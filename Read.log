Manual.adoc

== Manual Widget Test cases - Widget 2D

This document is for writing manual test cases.

=== AnimationWidget2D

Widget Guide:

https://rbcm-jen-hmib.hi.de.bosch.com:8443/job/nb_w_cmdgen3_userdocu_copy/ws/HMIBaseWidgetGuide/HMIBaseWidgetGuide-CGI.html#_solidcoloreffect_2d_anchor_id_widget2d_solidcoloreffect_xreflabel_widget2d_solidcoloreffect

Widget Referrence:

https://rbcm-jen-hmib.hi.de.bosch.com:8443/job/nb_w_cmdgen3_userdocu_copy/ws/HMIBaseWidgetGuide/WidgetReference.html#_solidcoloreffectwidget2d_asciidoc_br

OPL:

https://rb-alm-20-p.de.bosch.com/ccm/web/projects/CM%20Distribution%20(CMD)#action=com.ibm.team.workitem.viewWorkItem&id=1423184

==== TC_W01_01_01[[TC_W01_01_01]]

Feature: Scale

. [big red]#Feature Description#
+
Test feature 'Scale' from the widget 'AnimationWidget2D'.
+
Short description for feature 'Scale'

. [big red]#Test Instruction#

.. [red]#Pre-condition#
+
Reset TestApp04
+
APPHMI_TEST_04_ResetAll Trace
+
Activate the Animation Widget scene by below mentioned steps
+
TestApp04->Widget Groups->Animation Widget->Animation/Animation list
+
APPHMI_TEST_04_ActivateScene TestApp04#Widget Groups#Animation Widget#Animation#Animation list
+
Set the toggle direction property to either 0 through TTFS.
+
HMI_Set_WidgetProperty ${TestWidget} ToggleDirection 0

.. [red]#Action 1#
+
Click on the Scale button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Click once again on the button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 1#
+
Observe the scene for ScrollCharCount=2
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Observe the scene for ScrollCharCount=3
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Action 2#
+
Swipe through the Coverflow List.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Rotate the image after the swipe.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 2#
+
The text will scroll when it is dragged.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}
+
The Alpha button should shows the fading feature upon clicking button.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}

==== TC_W01_01_02[[TC_W01_01_02]]

Feature: Scale

. [big red]#Feature Description#
+
Test feature 'Scale' from the widget 'AnimationWidget2D'.
+
Short description for feature 'Scale'

. [big red]#Test Instruction#

.. [red]#Pre-condition#
+
Reset TestApp04
+
APPHMI_TEST_04_ResetAll Trace
+
Activate the Animation Widget scene by below mentioned steps
+
TestApp04->Widget Groups->Animation Widget->Animation/Animation list
+
APPHMI_TEST_04_ActivateScene TestApp04#Widget Groups#Animation Widget#Animation#Animation list
+
Set the toggle direction property to either 0 through TTFS.
+
HMI_Set_WidgetProperty ${TestWidget} ToggleDirection 0

.. [red]#Action 1#
+
Click on the Scale button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Click once again on the button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 1#
+
Observe the scene for ScrollCharCount=2
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Observe the scene for ScrollCharCount=3
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Action 2#
+
Swipe through the Coverflow List.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Rotate the image after the swipe.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 2#
+
The text will scroll when it is dragged.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}
+
The Alpha button should shows the fading feature upon clicking button.
+
TTFisCommand:

==== TC_W02_01_01[[TC_W02_01_01]]

Feature: Alpha

. [big red]#Feature Description#
+
Test feature Alpha from the widget 'AnimationWidget2D'.
+
Short description for feature Alpha

. [big red]#Test Instruction#

.. [red]#Pre-condition#
+
Reset TestApp04
+
APPHMI_TEST_04_ResetAll Trace
+
Activate the Animation Widget scene by below mentioned steps
+
TestApp04->Widget Groups->Animation Widget->Animation/Animation list
+
APPHMI_TEST_04_ActivateScene TestApp04#Widget Groups#Animation Widget#Animation#Animation list
+
Set the toggle direction property to either 0 through TTFS.
+
HMI_Set_WidgetProperty ${TestWidget} ToggleDirection 0

.. [red]#Action 1#
+
Click on the Alpha button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Click once again on the button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 1#
+
Observe the scene for ScrollCharCount=2
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Observe the scene for ScrollCharCount=3
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Action 2#
+
Swipe through the Coverflow List.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Rotate the image after the swipe.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 2#
+
The text will scroll when it is dragged.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}
+
The Alpha button should shows the fading feature upon clicking button.
+
TTFisCommand:

==== TC_W03_01_01[[TC_W03_01_01]]

Feature: Position

. [big red]#Feature Description#
+
Test feature Position from the widget 'AnimationWidget2D'.
+
Short description for feature Position

. [big red]#Test Instruction#

.. [red]#Pre-condition#
+
Reset TestApp04
+
APPHMI_TEST_04_ResetAll Trace
+
Activate the Animation Widget scene by below mentioned steps
+
TestApp04->Widget Groups->Animation Widget->Animation/Animation list
+
APPHMI_TEST_04_ActivateScene TestApp04#Widget Groups#Animation Widget#Animation#Animation list
+
Set the toggle direction property to either 0 through TTFS.
+
HMI_Set_WidgetProperty ${TestWidget} ToggleDirection 0

.. [red]#Action 1#
+
Click on the Scale button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Click once again on the button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 1#
+
Observe the scene for ScrollCharCount=2
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Observe the scene for ScrollCharCount=3
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Action 2#
+
Swipe through the Coverflow List.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Rotate the image after the swipe.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 2#
+
The text will scroll when it is dragged.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}
+
The Alpha button should shows the fading feature upon clicking button.
+
TTFisCommand:

==== TC_W03_01_02[[TC_W03_01_02]]

Feature: Position

. [big red]#Feature Description#
+
Test feature Position from the widget 'AnimationWidget2D'.
+
Short description for feature Position

. [big red]#Test Instruction#

.. [red]#Pre-condition#
+
Reset TestApp04
+
APPHMI_TEST_04_ResetAll Trace
+
Activate the Animation Widget scene by below mentioned steps
+
TestApp04->Widget Groups->Animation Widget->Animation/Animation list
+
APPHMI_TEST_04_ActivateScene TestApp04#Widget Groups#Animation Widget#Animation#Animation list
+
Set the toggle direction property to either 0 through TTFS.
+
HMI_Set_WidgetProperty ${TestWidget} ToggleDirection 0

.. [red]#Action 1#
+
Click on the Scale button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Click once again on the button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 1#
+
Observe the scene for ScrollCharCount=2
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Observe the scene for ScrollCharCount=3
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Action 2#
+
Swipe through the Coverflow List.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Rotate the image after the swipe.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 2#
+
The text will scroll when it is dragged.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}
+
The Alpha button should shows the fading feature upon clicking button.
+
TTFisCommand:

==== TC_W03_01_03[[TC_W03_01_03]]

Feature: Position

. [big red]#Feature Description#
+
Test feature Position from the widget 'AnimationWidget2D'.
+
Short description for feature Position

. [big red]#Test Instruction#

.. [red]#Pre-condition#
+
Reset TestApp04
+
APPHMI_TEST_04_ResetAll Trace
+
Activate the Animation Widget scene by below mentioned steps
+
TestApp04->Widget Groups->Animation Widget->Animation/Animation list
+
APPHMI_TEST_04_ActivateScene TestApp04#Widget Groups#Animation Widget#Animation#Animation list
+
Set the toggle direction property to either 0 through TTFS.
+
HMI_Set_WidgetProperty ${TestWidget} ToggleDirection 0

.. [red]#Action 1#
+
Click on the Scale button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Click once again on the button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 1#
+
Observe the scene for ScrollCharCount=2
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Observe the scene for ScrollCharCount=3
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Action 2#
+
Swipe through the Coverflow List.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Rotate the image after the swipe.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 2#
+
The text will scroll when it is dragged.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}
+
The Alpha button should shows the fading feature upon clicking button.
+
TTFisCommand:

.. [red]#Action 3#
+
Swipe through the Coverflow List.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}
+
Rotate the image after the swipe.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}

.. [red]#Expected 3#
+
The text will scroll when it is dragged.
+
HMI_Get_WidgetInstanceInfo ${TestWidget}
+
The Alpha button should shows the fading feature upon clicking button.
+
HMI_Set_WidgetProperty ${TestWidget} ${PropertyName} ${PropertyValue}













-----------------------------------------------------------------------------------------------------
TCDescrip.py

import os
import sys
import fnmatch
import re

TCLIST_OT_FILENAME_CSV      = 'infoTCadoc.log'
TCLIST_OT_FILENAME_MAN_CSV  = 'infoTCDocMan.csv'
JENKINS_WS_PATH_GEN3        = 'https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse1/'
JENKINS_WS_PATH_GEN4        = 'https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen4_featuretrace_analyse/'


def remove_char_from_file(li):
    for i in li:
        file = open(i, 'r+')
        s = file.read().replace(",", ";")
        file.close()
        file = open(i, 'w')
        file.write(s)
        file.close()

def checkPath( path ):
    # check path
    if not os.path.isdir( path ):
        print ("ERROR: Path to  <" + path + "> is not a valid path.")
        sys.exit (1)

def checkPathIsValid(path = './'):
    # Method 1: os.path.exists()
    isExist = os.path.exists(path)
    return isExist

def findFiles(pattern, nameOfFolder):
    results = []
    # pattern = '*.py'
    for name in os.listdir(nameOfFolder):
        # if os.path.isfile(os.path.join(nameOfPath, name)) and fnmatch.fnmatch(name, pattern):
        if fnmatch.fnmatch(name, pattern):
            results.append(name)
    return results

def stripDetails(details):
    searchFTLinkInDetails = r'^(.*?)(link:https://.*?\]\]).*?'  # e.g.: link:https://.../FeatureTrace.html#TC_W18_02_01[[TC_W18_02_01\]]
    searchTCDescInDetails = r'^(Testcase Description )(.*)'     # e.g.: "TestCase Description Test the bindable property ..."

    details = re.sub('\+|\s+', ' ', details)                    # substitute '+' signs and whitespaces
    details  = details.strip()
    linkMatch = re.search(searchFTLinkInDetails, details)       # get the link to Feature Trace overview out of the details
    if linkMatch != None:
        details = linkMatch.group(1)                            # if there's a link in the details copy only the first details (without linkto Feature Trace overview)
    descripMatch      = re.search(searchTCDescInDetails, details)    # check if the text 'Testcase Description ' is present and should be removed
    if descripMatch != None:
        details = descripMatch.group(2)                         # if there's the 'TestCase Description ' we only want the text behind.
        details  = details.strip()
    # print(details)
    return details

class TCDocInformation:
    'Common base class for Test Case Inormation from Test Case Documentation'
    cnt = 0

    def __init__(self, testId, scope, group, subgroup, feature, subgroupdescrip, subgroupinstruct, subgroupdproperty, subgroupexpected, subgroupobtained, detail, linkTestAdoc):
        self.scope               = scope               # == Widget Test Cases
        self.group               = group               # ===  ButtonWidget
        self.subgroup            = subgroup            # ==== TC_W04_01
        self.feature             = feature             # Feature: Scale 
        self.subgroupdescrip     = subgroupdescrip     # . Testcase Description  + ...
        self.subgroupinstruct     = subgroupinstruct   # . Test instructions  + ...
        self.subgroupdproperty   = subgroupdproperty   #
        self.subgroupexpected    = subgroupexpected    # . Expected result  + ...
        self.subgroupobtained    = subgroupobtained    # . Obtained result  + ...
        self.testId              = testId              # (. Related Test cases): .. TC_W04_01_01[[TC_W04_01_01]]
        self.detail              = detail              # ... Widget being tested + ...
        self.linkTestAdoc        = linkTestAdoc        # link to adoc
        TCDocInformation.cnt += 1

    def printTCDoc( self ):
        print ("        TestId: " + self.testId + ",  Scope: " + self.scope + ",  Group: " + self.group + ",  SubGroup: " + self.subgroup)

    def printTCDocAll( self ):
        print ("        TestId: " + self.testId + ",  Scope: " + self.scope + ",  Group: " + self.group + ",  SubGroup: " + self.subgroup)
        print ("                               Description:  " + self.subgroupdescrip )
        print ("                               Property:     " + self.subgroupdproperty )
        print ("                               Expected:     " + self.subgroupexpected )
        print ("                               Obtained:     " + self.subgroupobtained )
        print ("                               Details:      " + self.detail )
        print ("                               Link to adoc: " + self.linkTestAdoc )



def writeTestIdInfo(subgrouptestcase, scope, group, subgroup, feature, subgroupdescrip, subgroupinstruct, subgroupproperty, subgroupexpected, subgroupobtained, linkTestAdoc, tcInfoDic):
    #print ("            writeTestIdInfo: Test ID information")

    # 1. format the given strings. Remove special characters and trim/strip the leading and trailing whitespaces
    subgroupdescrip     = re.sub('\r\n|\n|\s+', ' ', subgroupdescrip)  # substitute newline and whitespaces with one spaces
    subgroupinstruct    = re.sub('\r\n|\n|\s+', ' ', subgroupinstruct)
    subgroupexpected    = re.sub('\r\n|\n|\s+', ' ', subgroupexpected)
    subgroupobtained    = re.sub('\r\n|\n|\s+', ' ', subgroupobtained)
    subgroupdescrip     = re.sub('\+', ': ', subgroupdescrip)          # substitute '+' with ': ' and whitespaces
    subgroupinstruct    = re.sub('\+', ': ', subgroupinstruct)          # substitute '+' with ': ' and whitespaces
    subgroupexpected    = re.sub('\+', ': ', subgroupexpected)
    subgroupobtained    = re.sub('\+', ': ', subgroupobtained)
    subgroupdescrip     = subgroupdescrip.strip()                      # remove leading and trailing spaces
    subgroupinstruct    = subgroupinstruct.strip()                      # remove leading and trailing spaces
    subgroupproperty    = subgroupproperty.strip()
    subgroupexpected    = subgroupexpected.strip()
    subgroupobtained    = subgroupobtained.strip()

    state                   = None
    SubGroupTCTestID        = 1
    SubGroupTCTestIdDetails = 2
    testId                  = ''
    details                 = ''
    searchItemTestCaseTestID         = r'^\s*?[\.]{2}\s+?(TC_[A-Z]{1,2}\d\d_\d\d_\d\d).*?'
    searchItemTestCaseTestIDDetails  = r'^\s*?[\.]{3}\s+?([a-zA-Z0-9_\.\s]+).*?'
    searchNoContent                  = r'^\s*?[\.]{1}.*?'

    lines = subgrouptestcase.splitlines()
    for line in lines:

        match =  re.search(searchNoContent, line)               # check that line does NOT begin with '.'
        if match == None:
            if state == SubGroupTCTestIdDetails:                # copy Test ID details only in state details
                details = details + " " + line                  # copy further details

        match =  re.search(searchItemTestCaseTestID, line)      # search for TestId: e.g.: .. TC_W04_01_01[[TC_W04_01_01]]
        if match != None:
            # check if there was already another Test ID -> save Test ID element
            if state == SubGroupTCTestID or state == SubGroupTCTestIdDetails:
                details = stripDetails(details)
                tcInfo = TCDocInformation(testId, scope, group, subgroup, feature, subgroupdescrip, subgroupinstruct, subgroupproperty, subgroupexpected, subgroupobtained, details, linkTestAdoc)
                #tcInfo.printTCDoc()
                #tcInfo.printTCDocAll()
                tcInfoDic[testId] = tcInfo
                testId  = ''                                    # reset Test ID
                details = ''                                    # reset Test ID details
            testId = match.group(1)                             # save (1./new) Test ID
            state = SubGroupTCTestID                            # set state to details

        if state == SubGroupTCTestID:
            match =  re.search(searchItemTestCaseTestIDDetails, line)   # search for TestId details: e.g.: ... Widget being tested
            if match != None:
                details = details + match.group(1)                      # copy content without the beginning '... '
                state = SubGroupTCTestIdDetails                         # set state to details
    # check for last Test ID
    if state == SubGroupTCTestID or state == SubGroupTCTestIdDetails:
        details = stripDetails(details)
        tcInfo = TCDocInformation(testId, scope, group, subgroup, feature, subgroupdescrip, subgroupinstruct, subgroupproperty, subgroupexpected, subgroupobtained, details, linkTestAdoc)
        #tcInfo.printTCDoc()
        #tcInfo.printTCDocAll()
        tcInfoDic[testId] = tcInfo



def evalSubGroupContent(subgroupContent, scope, group, subgroup, linkTestAdoc, tcInfoDic):
    #print ("        evalSubGroupContent: Collect subgroup information")

    # 1. trim/strip the leading and trailing whitespaces of given strings
    scope    = scope.strip()
    group    = group.strip()
    subgroup = subgroup.strip()

    state               = None
    stateTestcase       = None
    SubGroupDescrip     = 1
    SubGroupExpect      = 2
    SubGroupObtain      = 3
    SubGroupTestcase    = 4
    SubGroupInstruct    = 5
    subfeature          = ''
    testId              = ''
    subgroupdescrip     = ''
    subgroupinstruct    = ''
    subgroupproperty    = ''
    subgroupexpected    = ''
    subgroupobtained    = ''
    subgrouptestcase    = ''
    detail              = ''

    # searchSubgroupItemDescrip  = r'^\s*?[\.]{1}\s+?Testcase Description.*?'
    searchSubgroupItemDescrip  = r'^[\.]\s+\[(.*)\]\#Feature\sDescription\#'
    searchSubgroupItemInstruct = r'^\s*?[\.]{1}\s+?Test instructions.*?'
    searchProperty             = r'(^properties\s\:)|(^property\s\:)|(^message\s\:)'
    searchSubgroupItemExpect   = r'^\s*?[\.]{1}\s+?Expected result.*?'
    searchSubgroupItemObtained = r'^\s*?[\.]{1}\s+?Obtained result.*?'
    searchSubgroupItemTestCase = r'^\s*?[\.]{1}\s+?Related Test cases.*?'
    searchFeature              = r'Feature:\s*(.+)'                                             # Feature: 
    searchNoContent            = r'^\s*?[\.]{1}.*?'
    searchSubGroupBeginItem    = r'^\s*?[\.]{1}.*?'

    lines = subgroupContent.splitlines()
    for line in lines:
        # check for now sub group items: Testcase Description; Expected result; Obtained result; Related Test cases
        match =  re.search(searchSubgroupItemDescrip, line)         # search: . Test Description
        if match != None:
            state = SubGroupDescrip

        match =  re.search(searchSubgroupItemInstruct, line)         # search: . Test Description
        if match != None:
            state = SubGroupInstruct

        match =  re.search(searchSubgroupItemExpect, line)          # search: . Expected result
        if match != None:
            state = SubGroupExpect

        match =  re.search(searchSubgroupItemObtained, line)        # search: . Obtained result
        if match != None:
            state = SubGroupObtain

        match =  re.search(searchSubgroupItemTestCase, line)        # search: . Related Test cases
        if match != None:
            state = SubGroupTestcase

        match =  re.search(searchNoContent, line)                   # if line does NOT beginning with '.'
        if match == None:                                           # copy content according to the recognized subgroup item
            if state == SubGroupDescrip:
                match =  re.search(searchProperty, line)
                if match != None:                 # if line does NOT beginning with '.'
                    subgroupproperty = subgroupproperty + line
                    # print(subgroupproperty)
                subgroupdescrip = subgroupdescrip + line                # copy Test Case Description content
                print(subgroupdescrip)
            
            elif state == SubGroupInstruct:
                subgroupinstruct = subgroupinstruct + line
                # print(subgroupinstruct)

            elif state == SubGroupExpect:
                subgroupexpected = subgroupexpected + line              # copy Expected Result content
            elif state == SubGroupObtain:
                subgroupobtained = subgroupobtained + line              # copy Obtained Result content
            elif state == SubGroupTestcase:
                subgrouptestcase = subgrouptestcase + line + '\n'     # copy related Test Cases content (content lines)
        elif state == SubGroupTestcase:
            subgrouptestcase = subgrouptestcase + line + '\n'         # copy related Test Cases content (header lines)
    # end: for line in lines: -> sub group is sorted into the different items
    if len(subgrouptestcase) != 0:
        writeTestIdInfo(subgrouptestcase, scope, group, subgroup, feature, subgroupdescrip, subgroupinstruct, subgroupproperty, subgroupexpected, subgroupobtained, linkTestAdoc, tcInfoDic)



def collectTestCaseInformationFromDocs(tcInfoFileNames, pathForLink2Doc, env):
    # dictionary with class TCDocInformation elements
    tcInfoDic = { '0' : '' }
    del tcInfoDic['0']

    state           = None
    stateSubGroup   = 1
    subgroupContent = ''
    scope           = ''
    group           = ''
    subgroup        = ''
    subgroupdescrip = ''
    subproperty     = ''

    if env == "Gen4":   # Gen4
        path2Docs  = JENKINS_WS_PATH_GEN3 + 'ADocs/' + pathForLink2Doc + '/'        # (sub) path to Test Case description (on Jenkins)
    else:               # Gen3 and default
        path2Docs  = JENKINS_WS_PATH_GEN4 + 'ADocs/' + pathForLink2Doc + '/'        # (sub) path to Test Case description (on Jenkins)

    searchDocName  = r'(UserGuide\HMIBaseTest\ListOfTestCases\)([a-zA-Z0-9_].adoc))'
    searchScope    = r'^\s*?[=]{2}\s+?([a-zA-Z0-9_\.\s]+).*?'                       # == Widget Test Cases
    searchGroup    = r'^\s*?[=]{3}\s+?([a-zA-Z0-9_\.\s]+).*?'                       # === AngularSlider Widget 2D
    searchSubGroup = r'^\s*?[=]{4}\s+?([a-zA-Z0-9_\.\s]+).*?'                       # ==== UI Design
    searchSubGroupCheck = r'^\s*?[=]{4}\s+?(TC_[A-Z]{1,2}\d\d_\d\d)\[\[(.*)\]\].*?' # ==== TC_W02_01[[TC_W02_01]]
    searchContent  = r'^\s*?=.*?'                                                   #

    # over Test Case Documentation files
    for fileName in sorted( tcInfoFileNames ):
        filename = os.path.basename(fileName)                   # get file name from complete workspace
        linkTestAdoc = path2Docs + filename                     # buildup the path to docs in Jenkins work space
        with open(fileName, 'r') as f:
            for line in f:
                match =  re.search( searchScope, line )         # search begin of scope; e.g.: == List of Widget Test Cases
                if match != None:
                    if state != None:
                        if state == stateSubGroup:                      # check for already subgroup info is available
                            evalSubGroupContent(subgroupContent, scope, group, subgroup, linkTestAdoc, tcInfoDic)
                            subgroupContent = ''                        # reset subgroup information
                        state = None                                    # reset state if actual line begins with one or more '='
                    scope = match.group(1)                          # get scope information; e.g.: = List of Widget Test Cases
                    scope = re.sub('\r\n|\n|\s{2,}', '', scope)     # substitute newline and whitespaces

                match =  re.search( searchGroup, line )         # search begin of group; e.g.: ===  ButtonWidget
                if match != None:
                    if state != None:
                        if state == stateSubGroup:                      # check for already subgroup info is available
                            evalSubGroupContent(subgroupContent, scope, group, subgroup, linkTestAdoc, tcInfoDic)
                            subgroupContent = ''                        # reset subgroup information
                        state = None                                    # reset state if actual line begins with one or more '='
                    group = match.group(1)                          # get group information; e.g.: ===  ButtonWidget
                    group = re.sub('\r\n|\n|\s{2,}', '', group)     # substitute newline and whitespaces

                match =  re.search( searchSubGroup, line )      # search begin of subgroup; e.g.: ==== TC_W04_01
                if match != None:
                    if state != None:
                        if state == stateSubGroup:                      # check for already subgroup info is available
                            evalSubGroupContent(subgroupContent, scope, group, subgroup, linkTestAdoc, tcInfoDic)
                            subgroupContent = ''                        # reset subgroup information
                        state = None                                    # reset state if actual line begins with one or more '='
                    state = stateSubGroup                           # set state to subgroup -> to copy all following line until one line begins with '='
                    subgroup = match.group(1)                       # get subgroup information; e.g.: ==== TC_W04_01
                    subgroup = re.sub('\r\n|\n|\s{2,}', '', subgroup)# substitute newline and whitespaces
                    match =  re.search( searchSubGroupCheck, line ) # check subgroup; e.g.: ==== TC_W04_01
                    if match != None:
                        if match.group(1) != match.group(2):            # check if content before and within brackets is equal; TC_W08_01[TC8_01]
                            subgroup = '%s: Please check the anchor (%s[%s]) in %s' % (subgroup, match.group(1), match.group(2), filename)
                            print ("        ERROR in subgroup: " + subgroup)

                match =  re.search( searchContent, line )       # search lines without '='; e.g.: . Testcase Description
                if match == None:
                    if state == stateSubGroup:
                        subgroupContent = subgroupContent + line
                        # print(subgroupContent)
        f.close()
        # check for last info from end of file
        if state == stateSubGroup:                      # check for already subgroup info is available
            evalSubGroupContent(subgroupContent, scope, group, subgroup, linkTestAdoc, tcInfoDic)
            subgroupContent = ''                        # reset subgroup information
        state = None                                    # reset state if actual line begins with one or more '='

    return tcInfoDic
def createOutputFile(testTypeAuto, tcDocInfoDic, path, env):
    createOutputFileCsv(testTypeAuto, tcDocInfoDic, path)
def insertNameofWidget(nameOfWidget):
    content = '%s\n' % (nameOfWidget)
    return content

def createOutputFileCsv(testTypeAuto, tcDocInfoDic, path):
    resultFirstLine = 'Count: %s\n' % (TCDocInformation.cnt)
    # resultHeadLine = 'TestId,Details,Scope,Group,Subgroup,Subgroup Description,Subgroup ,Subgroup Expected Result,Subgroup Obtained Result\n'
    resultHeadLine = 'Name of Widget,Test Scope ID,Requirement/ Feature,Short test description,Test instructions,Expected Results,Actual Results,Status,Comment,Known issues\n'

    if testTypeAuto==True:      # details from CPULoad.adoc, MultiDisplay.adoc, ScreenBroker.adoc, Widgets.adoc -> ai_hmi_base\_doc\UserGuide\HMIBaseTest\ListOfTestCases\
        fileName =os.path.join(path, TCLIST_OT_FILENAME_CSV)
    else:                       # -> details from Manual.adoc -> ai_hmi_base\_doc\UserGuide\HMIBaseTest\ManualTestCases
        fileName =os.path.join(path, TCLIST_OT_FILENAME_MAN_CSV)

    f = open( fileName, 'w' )
    fileContent = resultFirstLine + resultHeadLine
    for key in sorted( tcDocInfoDic ):
        # print(key)
        # temp = str(key)
        # print(temp[0:6])
        # print(docInfo.group)
        # print(tempName)
        docInfo          = tcDocInfoDic.get( key, 0 )
        # print(type(docInfo.subgroupdescrip))
        # print(docInfo.subgroupdescrip)
        # print(docInfo.group)
        # if(docInfo.group)
        # resultLine = '%s,%s,%s,%s,%s,%s,%s,%s\n'% (docInfo.testId, docInfo.detail, docInfo.scope, docInfo.group, docInfo.subgroup, docInfo.subgroupdescrip, docInfo.subgroupexpected, docInfo.subgroupobtained)
        resultLine = '%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n'% (docInfo.group, docInfo.testId, docInfo.subgroupdproperty, docInfo.subgroupdescrip, docInfo.subgroupinstruct, docInfo.subgroupexpected, ' ', ' ', ' ', ' ')
        fileContent += resultLine
        tempName = str(key)[0:6]
        # print(tempName)
    f.write( fileContent )
    f.close()
    
    
    ----------------------------------------------------------------
FeatureTrace.py
import os

import TCDescrip

BASE_PATH_GEN3 = "/home/nul3hc/samba/views/cmd_super"
BASE_PATH_GEN4 = "/home/nul3hc/samba/views/cmd_super"
TC_LIST_ADOC_NAME           = '*.adoc'
AutomatedTest = True
base_path = BASE_PATH_GEN3  # default base path
env       = "Gen3"          # default environment is Gen3. Possible values: Gen3, Gen4

if __name__ == "__main__":
    # result path; same path for all
    resultPath = os.path.dirname(os.path.realpath( __file__ ))
    #/home/nul3hc/vmshare/Python/ManualTest

    # Find all adoc files in a Path
    tcDocFileNamesAutomated = TCDescrip.findFiles(TC_LIST_ADOC_NAME, resultPath)
    print(tcDocFileNamesAutomated)
    # tcDocFileNamesAutomated = "/home/nul3hc/vmshare/Python/manual_script/Demo Templates/Manual.adoc"

    # Remove unexpected characters from files
    TCDescrip.remove_char_from_file(tcDocFileNamesAutomated)

    # Collect TCs information from Adoc file
    tcDocInfoDicAutomated = TCDescrip.collectTestCaseInformationFromDocs(tcDocFileNamesAutomated, 'HMIBaseTest/ListOfTestCases', env)

    # Create Output file
    TCDescrip.createOutputFile(AutomatedTest, tcDocInfoDicAutomated, resultPath, env)
    print(f"Done!!!!!!!!!!!!!!!")
--------------------------------------

Widgets.adoc1

== Widget Test Cases

=== AngularSlider Widget 2D
==== UI Design

The UI design for AngularSlider Widget 2D includes six sliders as the below figure:

There are two full-circle sliders: asTimedStepMovement and asDirectMovement.
There are four semi-circle sliders: asHorizontalRight; asHorizontalLeft; asVerticalTop and asVerticalBottom.


image::images/AngularSliderScene.png[title="Angular Slider Scene"]

==== TC_W02_01[[TC_W02_01]]

. Testcase Description
+
property : CurrentValue
+
Check property 'CurrentValue' of AngularSliderWidget.
+
Test scope checks the property value of 'CurrentValue'.
Test the bindable property 'CurrentValue' from the widget 'AngularSlider' that the
marker should be moved in the range between min and max values when changing 'CurrentValue'.
Test also when changing 'CurrentValue'; the marker will move based on the
'AngularSliderType'; 'SliderOrientation'; 'RotationType' was set in the CGI.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The marker should be moved in the range between min and max value.
The AngularSlider can be set to full-circle and semi-circle; if semi-circle then
can set it in four orientations.
When changing the current value; the marker can move in clockwise and anti-clockwise
direction.
'CurrentValue' changes its value based on the 'MarkerMovement' type was set in the CGI.

. Obtained result
+
The 'CurrentValue' property value is Checked through TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W02_01_01[[TC_W02_01_01]]

... TestCase Description
+
Test the bindable property 'CurrentValue' from the widget 'AngularSlider'.
Test if the marker moves in the range between min and max values when changing CurrentValue.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set property 'CurrentValue' of the direct movement AngularSlider to 200.0f to move the
marker to the approximated middle position of the range of min and max.
Check if the marker moves to the corresponding position via screenshot compare.
Set property 'CurrentValue' of the direct movement AngularSlider to under min value to
move the marker to min degree position.
Check if the marker moves to the min degree position via screenshot compare.
Set property 'CurrentValue' of the direct movement AngularSlider to over max value to move
the marker to max degree position.
Check if the marker moves to the max degree via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_01_01[[TC_W02_01_01\]]

.. TC_W02_01_02[[TC_W02_01_02]]

... TestCase Description
+
Test the bindable property 'CurrentValue' and non-bindable 'AngularSliderType' from the
widget 'AngularSlider'.
Test when changing the property 'CurrentValue'; whether the marker can move full-circle
or semi-circle based on 'AngularSliderType' configuration.
The preconditions are set and checked.
Set property 'CurrentValue' of the full-circle and semi-circle AngularSlider to min
value to move the marker to min position.
Check if the marker of the full-circle AngularSlider is moved to min position
via screenshot compare.
Set property 'CurrentValue' of the full-circle and semi-circle AngularSlider to max
value to move the marker to max position.
Check if the marker of the full-circle AngularSlider is moved in full-circle; and the
marker of semi-circle AngularSlider is moved in semi-circle via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_01_02[[TC_W02_01_02\]]

.. TC_W02_01_03[[TC_W02_01_03]]

... TestCase Description
+
Test the bindable property 'CurrentValue' and non-bindable 'MarkerMovement' from the widget
'AngularSlider'.
Test when touching on the Slider; whether the marker will move and 'CurrentValue' will be
set based on the 'MarkerMovement' type as set in CGI.
Three types of movement:

    Marker moves each step by stepsize - TimedStepMovement
    Marker moves directly to clicked position - DirectMovement
    Marker moves to the nearest clicked position calculated by stepsize - StepMovement
+
The preconditions are set and checked.
Touch direct movement; timed step movement and step movement AngularSlider to move
the marker.
Check if CurrentValue of these AngularSlider has corresponding values with the movement
type via property check; and check if all markers are moved to the corresponding positions
via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_01_03[[TC_W02_01_03\]]

.. TC_W02_01_04[[TC_W02_01_04]]

... TestCase Description
+
Test the bindable property 'CurrentValue'; non-bindable properties 'AngularSliderType'
and 'SliderOrientation' from the widget 'AngularSlider'.
Test when changing 'CurrentValue'; if 'AngularSliderType' is SemiCircle then the marker
will move based on 'SliderOrientation' as set in CGI.
Four types of slider orientation:

    Horizontal Left: Slider marker movement will be restricted between the second and
    third quadrant in the coordinate system.
    Horizontal Right: Slider marker movement will be restricted between the first and
    fourth quadrant in the coordinate system.
    Vertical Top: Slider marker movement will be restricted between the first
    and second quadrant in the coordinate system.
    Vertical Bottom: Slider marker movement will be restricted between the third and
    fourth quadrant in the coordinate system.
+
The preconditions are set and checked.
Set property CurrentValue of all semi-circle (four orientations) AngularSliders to
max values to move the markers to max position.
Check one screenshot compare if:

    The marker of HorizontalLeft AngularSlider is moved in the second and third
    quadrant in the coordinate system.
    The marker of HorizontalRight AngularSlider is moved in the first and fourth
    quadrant in the coordinate system.
    The marker of VerticalTop AngularSlider is moved in the first and second
    quadrant in the coordinate system.
    The marker of VerticalBottom AngularSlider is moved in the third and fourth
    quadrant in the coordinate system.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_01_04[[TC_W02_01_04\]]

.. TC_W02_01_05[[TC_W02_01_05]]

... TestCase Description
+
Test the bindable property 'CurrentValue' and non-bindable property 'RotationType' from
the widget 'AngularSlider'.
Test when changing 'CurrentValue'; whether the marker will rotate in a clockwise or
anticlockwise direction.
The preconditions are set and checked.
Set property 'CurrentValue' of clockwise and anticlockwise AngularSlider to differ with
current values to move the markers.
Check if the marker of clockwise AngularSlider is moved in clockwise rotation; and the
marker of anticlockwise
AngularSlider is moved in anticlockwise rotation.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_01_05[[TC_W02_01_05\]]

==== TC_W02_02[[TC_W02_02]]

. Testcase Description
+
property : StepSize; NumOfSteps
+
Check property 'StepSize'; 'NumOfSteps' of AngularSliderWidget.
+
Test 'StepSize' property that allows the marker to move with the given value.
Test if 'UseNumOfSteps' is enabled then 'NumOfSteps' property can set the total
number of steps for the marker movement.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The property 'StepSize' and 'NumOfSteps' should be updated according to the
value set.
The marker on Slider moves with the given StepSize or NumOfSteps.


. Obtained result
+
Property values of 'StepSize' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W02_02_01[[TC_W02_02_01]]

... TestCase Description
+
Test the bindable property 'StepSize' from the widget 'AngularSlider'.
Test if the property 'StepSize' allows the marker to move with the angle in a
given value.
The preconditions are set and checked.
Touch TimedStepMovement AngularSlider to move the marker and change 'CurrentValue'.
Check if CurrentValue has value is 'CurrentValue' plus one stepsize.
Set property 'StepSize' of TimedStepMovement AngularSlider to a new value; then
set 'CurrentValue' to default one.
Check if property 'StepSize' has new value as set and property 'CurrentValue' has
value is 'CurrentValue' plus new one stepsize via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_02_01[[TC_W02_02_01\]]

.. TC_W02_02_02[[TC_W02_02_02]]

... TestCase Description
+
Test the bindable property 'NumOfSteps' and non-bindable property 'UseNumOfSteps' from the
widget 'AngularSlider'.
Test if the property 'UseNumOfSteps' is enabled then property 'NumOfSteps' can set the total
number of steps for the marker movement.
Property 'Stepsize' value will be calculated based on the given range and 'NumOfSteps' value.
The preconditions are set and checked.
Touch StepMovement AngularSlider at near 0 degree to move the marker to 0 degree.
Check if the marker of StepMovement AngularSlider has moved to nearest the touched position
which calculated by NumOfSteps via screenshot compare.
Set property 'NumOfSteps' to a small value to make the stepsize is greater; then Touch the
StepMovement AngularSlider again.
Check if the marker of StepMovement AngularSlider has moved to nearest the touched position
which calculated by new NumOfSteps via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_02_02[[TC_W02_02_02\]]

==== TC_W02_03[[TC_W02_03]]

. Testcase Description
+
property : MinVal';
+
Check property 'MinVal' of AngularSliderWidget.
+
Test Description
+
Test if the property 'MinVal' can be set to FLOAT_MIN; FLOAT_MIN_NEG and FLOAT_MAX.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The property 'MinVal' should be updated according to the value set.

. Obtained result
+
Property values of 'MinVal' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W02_03_01[[TC_W02_03_01]]

... TestCase Description
+
Test the bindable property 'MinVal' from the widget 'AngularSlider'.
Test if the property 'MinVal' can be set to FLOAT_MIN; FLOAT_MIN_NEG and FLOAT_MAX.
The preconditions are set and checked.
Set property 'MinValue' and 'CurrentValue' of an AngularSlider widget to FLOAT_MIN.
Check if property 'MinValue' and 'CurrentValue' has value FLOAT_MIN as set via property check.
Set property 'MinValue' and 'CurrentValue' of an AngularSlider widget to FLOAT_MIN_NEG.
Check if property 'MinValue' and 'CurrentValue' has value FLOAT_MIN_NEG as set via
property check.
Set property 'MinValue' and 'CurrentValue' of an AngularSlider widget to FLOAT_MAX.
Check if property 'MinValue' and 'CurrentValue' has value FLOAT_MAX as set via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_03_01[[TC_W02_03_01\]]

==== TC_W02_04[[TC_W02_04]]

. Testcase Description
+
property : MaxVal'
+
Check property 'MaxVal' of AngularSliderWidget.
+
Test if the property 'MaxVal' can be set to FLOAT_MAX; FLOAT_MAX_NEG and FLOAT_MIN.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The property 'MaxVal' should be updated according to the value set.

. Obtained result
+
Property values of 'MaxVal'; 'CurrentValue' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W02_04_01[[TC_W02_04_01]]

... TestCase Description
+
Test the bindable property 'MaxVal' from the widget 'AngularSlider'.
Test if the property 'MaxVal' can be set to FLOAT_MAX; FLOAT_MAX_NEG and FLOAT_MIN.
Set property 'MaxVal' and 'CurrentValue' of an AngularSlider widget to FLOAT_MAX.
Check if property 'MaxVal' and 'CurrentValue' has value FLOAT_MAX as set via property check.
Set property 'MaxVal' and 'CurrentValue' of an AngularSlider widget to FLOAT_MAX_NEG.
Check if property 'MaxVal' and 'CurrentValue' has value FLOAT_MAX_NEG as set via
property check.
Set property 'MaxVal' and 'CurrentValue' of an AngularSlider widget to FLOAT_MIN.
Check if property 'MaxVal' and 'CurrentValue' has value FLOAT_MIN as set via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_04_01[[TC_W02_04_01\]]

==== TC_W02_08[[TC_W02_08]]

. Testcase Description
+
property : Enable; DisabledTouching; Touchable
+
Check property 'Enable'; 'DisabledTouching'; 'Touchable' of AngularSliderWidget.
+
Test if the Slider can be enabled or disabled.
Test if on setting property 'DisabledTouching' to true; Slider can be touched even after
property 'Enable' is false.
Test if the Slider can be touched or not.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
If Enable or Touchable is true then can touch on the widget; Enable or Touchable
is false then cannot touch on the background.
If on setting property 'DisabledTouching' to true; Slider can be touched even after
property 'Enable' is false.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W02_08_01[[TC_W02_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'AngularSlider'.
Test if the Slider can be enabled or disabled.
The preconditions are set and checked.
Set property 'Enable' of two AngularSliders to false to disable the widgets; then touch
at some position on these widgets to move the marker and make the CurrentValue changed.
Check if the 'Enable' has value is false; and 'CurrentValue' value is not changed via
property check.
Set property 'Enable' of two AngularSliders to true to enable the widgets; then touch
at some positions on these widgets to move the marker and make the CurrentValue changed.
Check if the 'Enable' has value true; and 'CurrentValue' value is changed correspondingly
via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_08_01[[TC_W02_08_01\]]

.. TC_W02_08_02[[TC_W02_08_02]]

... TestCase Description
+
Test the bindable property 'Enable' and 'DisabledTouching' from the widget AngularSlider.
Test if on setting property 'DisabledTouching' to true; Slider can be touched even after
property 'Enable' is false.
The preconditions are set and checked.
Set property 'Enable' of AngularSlider to false to disable the widget; then set property
'DisableTouching'
to false to totally disable touching.
Touch the widget that differs from the current value to change the CurrentValue.
Check if properties 'Enable' and 'DisableTouching' has value false as set; and property
'CurrentValue' has value as default via property check.
Set property 'DisableTouching' to true to make the widget can be touched.
Touch the widget that differs to the current value to change the CurrentValue.
Check if property 'DisableTouching' has value true as set; and property 'CurrentValue'
has value corresponding
with the touched position via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_08_02[[TC_W02_08_02\]]

.. TC_W02_08_03[[TC_W02_08_03]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget AngularSlider.
Test if the Slider can be touched or not.
The preconditions are set and checked.
Set property 'Touchable' of two AngularSlider widgets to false to disable touching; then
touch the two widgets to try to move the marker and make the CurrentValue changes.
Check if property 'Touchable' has value false as set; and property 'CurrentValue' has
value as default via property check.
Set property 'Touchable' of two AngularSlider widgets to true to enable touching; then
touch the two widgets to try to move the marker and make the CurrentValue changes.
Check if property 'Touchable' has value true as set; and property 'CurrentValue' has
value corresponding with the touched position via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_08_03[[TC_W02_08_03\]]

==== TC_W02_09[[TC_W02_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of AngularSliderWidget.
+
Test the bindable property 'Visible' to set the Slider Widget to be visible or invisible.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The widget should be visible when setting 'Visible' to true and invisible when
setting 'Visible' to false.

. Obtained result
+
Property values checked for 'Visible' through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W02_09_01[[TC_W02_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'AngularSlider'.
Test if the Slider can be visible or invisible.
The preconditions are set and checked.
Set property 'Visible' of two AngularSlider widgets to false to make the widgets invisible.
Check if two AngularSlider widgets are invisible via screenshot compare.
Set property 'Visible' of two AngularSlider widgets to true to make the widgets visible.
Check if two AngularSlider widgets are visible via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W02_09_01[[TC_W02_09_01\]]

=== Blur Widget 2D

==== UI Design

The UI designed for Blur Widget 2D includes five blur widgets as the figure below:

- 1 MainCamera for overall of Blur Widget scene.
- 5 cameras equivalent for attached scenes for 5 blur widgets.


image::images/BlurScene.png[title="Blur Scene"]

==== TC_W56_01[[TC_W56_01]]

. Testcase Description
+
property : Darken
+
Check property 'Darken' of BlurWidget.
+
Test scope checks the property value of 'Darken'.
+
Test by changing the value of 'Darken' to other values to update the intensity of the final color which widget affects to attached camera.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The property 'Darken' should be updated according to the value set.
+
Property value of 'Darken' will be set to 0 to reduce the intensity of color to 0 (black); 0.5 to reduce the intensity of color to 50%; 1 to preserve the color.

. Obtained result
+
Property values of 'Darken' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W56_01_01[[TC_W56_01_01]]

... TestCase Description
+
Test the bindable property 'Darken' and non-bindable property 'BlurShaderVariant from the
widget 'BlurWidget2D'.
Test when changing 'Darken'; if the intensity of color is also changed immediately in
both dynamic shader
(BitmapMaskBlur) and static shader (NoMaskBlur).
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set property 'Darken' of BitmapMaskBlur widget to some value to see the change of
intensity of color.
Check this action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W56_01_01[[TC_W56_01_01\]]

==== TC_W56_02[[TC_W56_02]]

. Testcase Description
+
property : BlurRadius
+
Check property 'BlurRadius' of BlurWidget.
+
Test scope checks the property value of 'BlurRadius'.
+
Test by changing the value of 'BlurRadius' to other values to change its blur effect.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The property 'BlurRadius' should be updated according to the value set.
+
The higher value is; the more blur effect becomes.

. Obtained result
+
Property values of 'BlurRadius' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W56_02_01[[TC_W56_02_01]]

... TestCase Description
+
Test the bindable property 'BlurRadius' and non-bindable property 'BlurShaderVariant from
the widget 'BlurWidget2D'.
Test if the value of property is updated as setting; and the effect of blur is changed
base on the property.
Test only mode DynamicShader of 'BlurShaderVariant'.
The preconditions are set and checked.
Set property BlurRadius to some value to see the different effect of the blur.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W56_02_01[[TC_W56_02_01\]]

.. TC_W56_02_02[[TC_W56_02_02]]

... TestCase Description
+
Test the bindable property 'BlurRadius' and non-bindable property 'BlurShaderVariant' from
the widget 'BlurWidget2D'.
Test if property 'BlurRadius' affects attached camera in mode StaticShader (of
'BlurShaderVariant') only if the
shader is uploaded again by disabling and re-enabling 'BlurEnabled' again.
The preconditions are set and checked.
Set property 'Darken' of NoMaskBlur to a value and check if it affect immediately.
Set property 'BlurRadius' of NoMaskBlur to a value and check if it do not affect
immediately.
Upload the shader again by disabling and re-enabling the 'BlurEnabled' again to apply the
change.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W56_02_02[[TC_W56_02_02\]]

==== TC_W56_03[[TC_W56_03]]

. Testcase Description
+
property : BlurEnabled
+
Check property 'BlurEnabled' of BlurWidget.
+
Test scope checks the property value of 'BlurEnabled'.
+
Test by changing the value of 'BlurEnabled' to False or True.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The property 'BlurEnabled' should be updated according to the value set.
+
Property value of 'BlurEnabled' to False to disable the blur effect for the attached scence; True to enable the blur effect for the attached scene.

. Obtained result
+
Property values of 'BlurEnabled' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W56_03_01[[TC_W56_03_01]]

... TestCase Description
+
Test the bindable property 'BlurEnabled' and non-bindable property 'BlurShaderVariant'
from the widget 'BlurWidget2D'.
Test if the camera (the associated node of the widget) can be set to blur or non-blur due
to
the property in both dynamic shader (BitmapMaskBlur) and static shader (NoMaskBlur).
The preconditions are set and checked.
Set property 'BlurEnabled' of some blur widgets to false to disable the blur for the
attached scene.
Set property 'BlurEnabled' of some blur widgets to true to enable the blur for the
attached scene.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W56_03_01[[TC_W56_03_01\]]

==== TC_W56_04[[TC_W56_04]]

. Testcase Description
+
property : BlurRadiusToSigma
+
Check property 'BlurRadiusToSigma' of BlurWidget.
+
Test scope checks the property value of 'BlurRadiusToSigma'.
+
Test by changing the value of 'BlurRadiusToSigma' to other values to change its blur effect.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)
+
Actions / Checks
"Description of Action1"
TTFis for manual commands for the 1. action
Description of Check1
Manual check only (e.g. for smooth animation) (or TTFis commands) to check the previous action

. Expected result
+
The property 'BlurRadiusToSigma' should be updated according to the value set.
+
The higher value is; the more blur effect becomes.

. Obtained result
+
Property values of 'BlurRadiusToSigma' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W56_04_01[[TC_W56_04_01]]

... TestCase Description
+
Test the bindable property 'BlurRadiusToSigma' and non-bindable property
'BlurShaderVariant from the widget 'BlurWidget2D'.
Test if the value of property is updated as setting; and the effect of blur is changed
base on the property.
Test only mode DynamicShader of 'BlurShaderVariant'.
The preconditions are set and checked.
Set property BlurRadiusToSimga to two numbers recommended in document BlurWidget-UserGuide
to see the difference.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W56_04_01[[TC_W56_04_01\]]

==== TC_W56_05[[TC_W56_05]]

. Testcase Description
+
property : BitmapMask
+
Check property 'BitmapMask' of BlurWidget.
+
Test scope checks the property value of 'BitmapMask'.
+
Test by changing the value of 'BitmapMask' to.change to another bitmap mask.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'BitmapMask' should be updated according to the value set via HALL code executing the implemented code of changing bitmap mask.
+
The property value of 'Darken'; 'BlurRadius'; 'BlurRadiusToSigma' will keep the initial value after changing to the new bitmap.

. Obtained result
+
Property values of 'BitmapMask' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W56_05_01[[TC_W56_05_01]]

... TestCase Description
+
Test the bindable property 'BitmapMask' in option BitmapBlurMask; which set from non-
bindable property
'BlurMaskVariant'from the widget 'BlurWidget2D'.
Test the possibility of changing 'BitmapMask' and the affect from the specified Darken;
BlurRadius
and BlurRadiusToSigma also affect to the new bitmap.
The preconditions are set and checked.
Use trace command to send message and trigger HALL code to execute implemted code of
changing bitmap.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W56_05_01[[TC_W56_05_01\]]

=== Button Widget 2D

==== TC_W04_01[[TC_W04_01]]

. Testcase Description
+
property : Touchable; PostButtonReactionMsg
+
Check property 'Touchable' of ButtonWidget.
+
Test Description
+
Test scope checks the property value of 'Touchable'.By setting the value of property 'Touchable' of
the button named ButtonWithTextNode to false and touching the button. Then set the above property of
the same button to true and touch the button. Touch the button named ButtonPBRMIsFalse
which has property 'PostButtonReactionMsg' which had been set to false in CGI.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Touchable' should be updated according to the value set.
For the button named ButtonWithTextNode; when the value of property 'Touchable' was set
to false and the button is touched; there's no message from HALL code sending to TTFis.
By contrast; when the value of property 'Touchable' was set to true and the button is touched;
there's a message from HALL code sending to TTFis. In case property 'PostButtonReactionMsg'
was set to false by default in CGI for ButtonPBRMIsFalse; when the button is touched;
there's no message sent from HALL code to TTFis.

. Obtained result
+
Property values of 'Touchable' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W04_01_01[[TC_W04_01_01]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'Button'.
Widget should be able to be pressed if 'Touchable' property is true.
When a button is clicked; HALL code sends a message to TTFis to check
if property 'Touchable' is set to true.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
First set property 'Touchable' of a widget 'Button' to false
to make the widget untouchable.
Check this action via getting and verifying the widget property value.
Next; touch a button which has the widget modified above.
Check this action via catching and verifying a message in the combination of
HALL code and TTFis as mentioned above.
Then set property 'Touchable' of the widget 'Button' to true to make the widget touchable.
Check this action via getting and verifying the widget property value.
Next; touch a button which has the widget modified above.
Check this action via catching and verifying a message in the combination of
HALL code and TTFis as mentioned above.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W04_01_01[[TC_W04_01_01\]]

.. TC_W04_01_02[[TC_W04_01_02]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'Button'.
Incase non-bindable 'PostButtonReactionMsg' was set to false in CGI.
The preconditions are set and checked.
ButtonReactionMsg messages of ButtonWidget2D should be posted only
if this property 'PostButtonReactionMsg' is true.
When a button is clicked; HALL code will not send a message to TTFis
if property 'Touchable' is set to true.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W04_01_02[[TC_W04_01_02\]]

==== TC_W04_02[[TC_W04_02]]

. Testcase Description
+
property : IsActive
+
Check property 'IsActive' of ButtonWidget.
+
Test Description
+
Test scope checks the property value of 'IsActive'.
By first set property 'IsActive' of ButtonWithTextNode to false;
then set that property to true.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'IsActive' should be updated according to the value set.

. Obtained result
+
Property values of 'IsActive' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W04_02_01[[TC_W04_02_01]]

... TestCase Description
+
Test the bindable property 'IsActive' from the widget 'Button'.
For normal buttons; active means that the option/action is active.
The preconditions are set and checked.
First set property 'IsActive' of a widget 'Button' to false to make the widget active.
Check this action via getting and verifying the widget property value.
Then set property 'IsActive' of the widget 'Button' to true to make the widget inactive.
Check this action via getting and verifying the widget property value.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W04_02_01[[TC_W04_02_01\]]

==== TC_W04_03[[TC_W04_03]]

. Testcase Description
+
property : DisabledTouching
+
Check property 'DisabledTouching' of ButtonWidget.
+
Test Description
+
Test scope checks the property value of 'DisabledTouching'.
For the button named ButtonEnableIsFalse which has property 'Enable' was set to false as default;
first set property 'DisabledTouching' value to false and touch the button;
then set property 'DisabledTouching' value to true and touch the button.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'DisabledTouching' should be updated according to the value set.
For the button named ButtonEnableIsFalse; set property 'DisabledTouching' value to false
and touch the button; there's no message sent from HALL code to TTFis.
By contrast; when set property 'DisabledTouching' value to true and touch the button;
there's a message sent from HALL code to TTFis.

. Obtained result
+
Property values of 'DisabledTouching' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W04_03_01[[TC_W04_03_01]]

... TestCase Description
+
Test the bindable property 'DisabledTouching' from the widget 'Button'.
When a button is clicked; HALL code will not send a message to TTFis
if property 'DisabledTouching' is set to true.
The preconditions are set and checked.
First set property 'DisabledTouching' of a widget 'Button' to false
to make the widget untouchable.
Check this action via getting and verifying the widget property value.
Next; touch a button which has the widget modified above.
Check this action via catching and verifying a message in the combination of
HALL code and TTFis as mentioned above.
Then set property 'DisabledTouching' of the widget 'Button'
to true to make the widget touchable.
Check this action via getting and verifying the widget property value.
Next; touch a button which has the widget modified above.
Check this action via catching and verifying a message in the combination of
HALL code and TTFis as mentioned above.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W04_03_01[[TC_W04_03_01\]]

==== TC_W04_08[[TC_W04_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of ButtonWidget.
+
Test Description
+
Test scope checks the property value of 'Enable'.
By setting the value of property 'Enable' of the button named ButtonWithTextNode to false
and touching the button. Then set the above property of the same button to true and touch the button.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Enable' should be updated according to the value set.
For the button named ButtonWithTextNode; when the value of property 'Enable' was set to false
and the button is touched; there's no message from HALL code sending to TTFis.
By contrast; when the value of property 'Touchable' was set to true and the button is touched;
there's a message from HALL code sending to TTFis.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W04_08_01[[TC_W04_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'Button'.
Widget should be not able to be pressed if 'Enable' property is false and vice versa.
When a button is clicked; HALL code sends a message to TTFis if property 'Enable' is set to true.
The preconditions are set and checked.
First set property 'Enable' of a widget 'Button' to false to make the widget disable.
Check this action via getting and verifying the widget property value.
Next; touch a button which has the widget modified above.
Check this action via catching and verifying a message in the combination of
HALL code and TTFis as mentioned above.
Then set property 'Enable' of the widget 'Button' to true to make the widget enable.
Check this action via getting and verifying the widget property value.
Next; touch a button which has the widget modified above.
Check this action via catching and verifying a message in the combination of
HALL code and TTFis as mentioned above.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W04_08_01[[TC_W04_08_01\]]

==== TC_W04_09[[TC_W04_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ButtonWidget.
+
Test Description
+
Test scope checks the property value of 'Visible'.
For the button named ButtonWithTextNode; first set property 'Visible' to false; then set property 'Visible' to true.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Visible' should be updated according to the value set.
For the button named ButtonWithTextNode; when the property 'Visible' value is set to false;
the button will invisiale from the screen.
By contrast; if the property 'Visible' value is set to true;
the button will visiale from the screen.


. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W04_09_01[[TC_W04_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'Button'.
Widget should be either visible if 'Visible' property is true or invisible
if 'Visible' property is false.
The preconditions are set and checked.
First set property 'Visible' of a widget 'Button' to false to make the widget invisible.
Check this action via a screenshot compare.
Then set property 'Visible' of the widget 'Button' to true to make the widget visible.
Check this action via a screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W04_09_01[[TC_W04_09_01\]]

=== ButtonGroup Widget 2D

==== UI Design

The UI designed for ButtonGroup Widget 2D ....

image::images/ButtonGroupScene.png[title="ButtonGroup Scene"]

==== TC_W61_01[[TC_W61_01]]

. Testcase Description
+
property : ActiveIndex
+
Check property 'ActiveIndex' of ButtonGroupWidget.
+
Test scope checks the property value of 'ActiveIndex'.
+
Test by changing the value of 'ActiveIndex' to other values.
Firstly set property value to -1 to make no button active.
Secondly set property value to 0 to activate the 1st button in the group.
Thirdly set property value to 2 to activate the 3rd button in the group.
Lastly set property value to 44 to make property value back to -1.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'ActiveIndex' should be updated according to the value set.
. Obtained result
+
Property values of 'ActiveIndex' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W61_01_01[[TC_W61_01_01]]

... TestCase Description
+
Test the bindable property 'ActiveIndex' from the widget 'ButtonGroup'.
Test the possibility of changing the property's value to
manage the Active flag of buttons based on an index.
The preconditions are set and checked.
Firstly set property value to -1 to make no button active.
Check the above action via property check.
Secondly set property value to 0 to activate the 1st button in the group.
Check the above action via property check.
Thirdly set property value to 2 to activate the 3rd button in the group.
Check the above action via property check.
Lastly set property value to 44 to make property value back to -1.
Check the above action via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W61_01_01[[TC_W61_01_01\]]

==== TC_W61_02[[TC_W61_02]]

. Testcase Description
+
property : AnimationDuration
+
Check property 'AnimationDuration' of ButtonGroupWidget.
+
Test scope checks the property value of 'AnimationDuration'.
+
Test by changing the value of 'AnimationDuration' to another value.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'AnimationDuration' should be updated according to the value set.
+
. Obtained result
+
Property values of 'AnimationDuration' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W61_02_01[[TC_W61_02_01]]

... TestCase Description
+
Test the bindable property 'AnimationDuration' from the widget 'ButtonGroup'.
Test if the property 'AnimationDuration' can be set to other value.
The preconditions are set and checked.
Set property 'AnimationDuration' of ButtonGroupWidget to other value.
Check the above action via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W61_02_01[[TC_W61_02_01\]]

==== TC_W61_03[[TC_W61_03]]

. Testcase Description
+
property : AnimationEnabled
+
Check property 'AnimationEnabled' of ButtonGroupWidget.
+
Test scope checks the property value of 'AnimationEnabled'.
+
Test by changing the value of 'AnimationEnabled' to other values.
Firstly set property value to false to disable the button slide animation.
Secondly set property value to true to enable the button slide animation.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'AnimationEnabled' should be updated according to the value set.
+
. Obtained result
+
Property values of 'AnimationEnabled' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W61_03_01[[TC_W61_03_01]]

... TestCase Description
+
Test the bindable property 'AnimationEnabled' from the widget 'ButtonGroup'.
Test if property 'AnimationEnabled' can be set to enable or disable.
The preconditions are set and checked.
Firstly set property value to false to disable the button slide animation.
Check the above action via property check.
Secondly set property value to true to enable the button slide animation.
Check the above action via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W61_03_01[[TC_W61_03_01\]]

==== TC_W61_08[[TC_W61_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of ButtonGroupWidget.
+
Test scope checks the property value of 'Enable'.
+
Test by changing the value of 'Enable' to aother values.
Firstly set property false to make the widget disable.
Secondly set property true to make the widget enable.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Enable' should be updated according to the value set.
+
. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W61_08_01[[TC_W61_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'ButtonGroup'.
Test if the the widget ButtonGroup can be set to enable or disable.
The preconditions are set and checked.
Firstly set property false to make the widget disable.
Check the above action via property check.
Secondly set property true to make the widget enable.
Check the above action via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W61_08_01[[TC_W61_08_01\]]

==== TC_W61_09[[TC_W61_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ButtonGroupWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to other values.
Firstly set property value to false to make the widget invisible.
Secondly set property value to true to make the widget visible.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
Check if property 'Visible' of ButtonGroupWidget2D makes
the widget invisible or visiable as configured
. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W61_09_01[[TC_W61_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ButtonGroup'.
Test if the the widget ButtonGroup can be set to visible or invisible.
The preconditions are set and checked.
Firstly set property value to false to make the widget invisible.
Check the above action via property check and screenshot compare.
Secondly set property value to true to make the widget visible.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W61_09_01[[TC_W61_09_01\]]

=== ButtonImage Widget 2D

==== UI Design

The UI designed for ButtonImage Widget 2D

image::images/ButtonImageScene.png[title="ButtonImage Scene"]

==== TC_W05_01[[TC_W05_01]]

. Testcase Description
+
properties : NormalBitmap; DisabledBitmap; ActiveNormalBitmap; ActiveDisabledBitmap
+
Check properties 'NormalBitmap'; 'DisabledBitmap'; 'ActiveNormalBitmap'; 'ActiveDisabledBitmap' of ButtonImageWidget.
+
Test scope checks the property value of 'NormalBitmap'; 'DisabledBitmap'; 'ActiveNormalBitmap'; 'ActiveDisabledBitmap'.
+
Test by changing the value of 'NormalBitmap'; 'DisabledBitmap'; 'ActiveNormalBitmap'; 'ActiveDisabledBitmap'
to update widget's appearance.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The properties 'NormalBitmap'; 'DisabledBitmap'; 'ActiveNormalBitmap'; 'ActiveDisabledBitmap' should be updated according to
the value set via HALL code executing the implemented code of changing widgets' appearance.

. Obtained result
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W05_01_01[[TC_W05_01_01]]

... TestCase Description
+
Test the bindable property 'NormalBitmap'; 'DisabledBitmap'; 'ActiveNormalBitmap'; 'ActiveDisabledBitmap'
from the widget 'ButtonImage'.
Test the possibility of changing the appearance of all 4 properties mentioned above.
The preconditions are set and checked.
Touch all mentioned properties of ButtonImageWidget to trigger HALL code to execute the implemented code
of changing widgets' appearance.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W05_01_01[[TC_W05_01_01\]]

==== TC_W05_02[[TC_W05_02]]

. Testcase Description
+
property : FallbackStrategyEnabled
+
Check property 'FallbackStrategyEnabled' of ButtonImageWidget.
+
Test scope checks the property value of 'FallbackStrategyEnabled'.
+
Test by changing the value of 'FallbackStrategyEnabled' to true or false.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'FallbackStrategyEnabled' should be updated according to the value set.

. Obtained result
+
Property values of 'FallbackStrategyEnabled' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W05_02_01[[TC_W05_02_01]]

... TestCase Description
+
Test the bindable property 'FallbackStrategyEnabled' from the widget 'ButtonImage'.
Test if the property 'FallbackStrategyEnabled' can be set to true or false.
The preconditions are set and checked.
Set property 'FallbackStrategyEnabled' of ButtonImageWidget to true or false.
Check the above action via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W05_02_01[[TC_W05_02_01\]]

==== TC_W05_03[[TC_W05_03]]

. Testcase Description
+
property : Color
+
Check property 'Color' of ButtonImageWidget.
+
Test scope checks the property value of 'Color'.
+
Test by changing the property 'Color' to another value to change its color.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Color' should be updated according to the value set.
+
. Obtained result
+
Property values of 'Color' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W05_03_01[[TC_W05_03_01]]

... TestCase Description
+
Test the bindable property 'Color' from the widget 'ButtonImage'.
Test the possibility of changing the color of the property 'Color'.
The preconditions are set and checked.
Set the property 'Color' of ButtonImageWidget to another value to change its color.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W05_03_01[[TC_W05_03_01\]]

==== TC_W05_08[[TC_W05_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of ButtonImageWidget.
+
Test scope checks the property value of 'Enable'.
+
Test by changing the value of 'Enable' to true to make the widget enable or false to make the widget disable.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Enable' should be updated according to the value set.
+
. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W05_08_01[[TC_W05_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'ButtonImage'.
Test if the the widget ButtonImage can be set to enable or disable.
The preconditions are set and checked.
Set property 'Enable' of ButtonImageWidget to make the widget disable or enable.
Check if the property 'Enable' of the widget ButtonImage's value is set successfully.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W05_08_01[[TC_W05_08_01\]]

==== TC_W05_09[[TC_W05_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ButtonImageWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to true to make the widget visble or false to make the widget invisible.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W05_09_01[[TC_W05_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ButtonImage'.
Test if the the widget ButtonImage can be set to visible or invisible.
The preconditions are set and checked.
Set property 'Visible' of ButtonImageWidget to make the widget invisible or visible.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W05_09_01[[TC_W05_09_01\]]

=== ButtonTextColor Widget 2D

==== UI Design

The UI designed for ButtonTextColor Widget 2D ....


image::images/ButtonTextColorScene.png[title="ButtonTextColor Scene"]

Properties : ActiveNormalTextColor; ActiveDisabledTextColor; DisabledTextColor; NormalTextColor

. Note: [DELETED] Due to the confirmation of the Dev team.

. Detail: When we analyze this with candera; we have following conclusions made.
+
- This is not reported on target/project environment and seen only on LSIM randomly by TML testing.
- The test case related to Text widget is not relevant for real world implementation by any HMI application. (Test steps basically).
- Though the application can send or update property randomly; the timing issue can't happen on target.
- It is purely a timing issue and depends on system load at the time of test case execution on simulation.
+
Please follow the link below for precise.
+
https://rb-alm-20-p.de.bosch.com/ccm/web/projects/CM%20Distribution%20(CMD)#action=com.ibm.team.workitem.viewWorkItem&id=950198
+
. Clearing: Majorly touching Candera framework code at this time of stabi is very risky to projects.

==== TC_W06_02[[TC_W06_02]]

. Testcase Description
+
property : OutlineColorConfiguration
+
Check property 'OutlineColorConfiguration' of ButtonTextColorWidget.
+
Test scope checks the property value of 'OutlineColorConfiguration'.
+
Test by changing the value of 'OutlineColorConfiguration' to true or false.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'OutlineColorConfiguration' should be updated according to the value set.
+
Property 'OutlineColorConfiguration' of the widget has value 0(false) or 1(true).
Property 'TextColor' of the TextWidget has value 1;1;1;1(white).
Property 'OutlineColor' of the TextWidget has value 1;1;1;1(white).

. Obtained result
+
Property values of 'OutlineColorConfiguration' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W06_02_01[[TC_W06_02_01]]

... TestCase Description
+
Test the bindable property 'OutlineColorConfiguration' from the widget 'ButtonTextColor'.
The property 'OutlineColorConfiguration' is bindable but not dynamic.
Test if the property 'OutlineColorConfiguration' can affect to itself and to TextWidget.
The preconditions are set and checked.
Set property 'OutlineColorConfiguration' of the widget 'ButtonTextColor' to apply the effect to TextWidget.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W06_02_01[[TC_W06_02_01\]]

==== TC_W06_03[[TC_W06_03]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of ButtonTextColorWidget.
+
Test scope checks the property value of 'Enable'.
+
Test by changing the value of 'Enable' to true or false.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Enable' should be updated according to the value set.
+
. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W06_03_01[[TC_W06_03_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'ButtonTextColor'.
Test if the the widget ButtonTextColor can be set to enable or disable.
The preconditions are set and checked.
Set property 'Enable' of ButtonTextColorWidget to make the widget disable or enable.
Check if the property 'Enable' of the widget ButtonTextColor's value is set successfully.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W06_03_01[[TC_W06_03_01\]]

==== TC_W06_09[[TC_W06_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ButtonTextColorWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to true or false.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The property 'Visible' makes the widget visible or invisible as configured.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W06_09_01[[TC_W06_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ButtonTextColor'.
Test if the the widget ButtonTextColor can be set to visible or invisible.
The preconditions are set and checked.
Set property 'Visible' of ButtonTextColorWidget to make the widget invisible or visible.
Check if the property 'Visible' of the widget ButtonTextColor's value is set successfully.
Check this action via a screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W06_09_01[[TC_W06_09_01\]]

=== Clock Widget 2D

==== UI Design

The UI designed for Clock Widget 2D ....

The scene is designed with the left clock with SmoothRotation property is set to false;and the right clock
with SmoothRotation property is set to true.


image::images/ClockScene.png[title="Clock Scene"]

==== TC_W07_01[[TC_W07_01]]

. Testcase Description
+
property : SkinIndex
+
Check property 'SkinIndex' of ClockWidget.
+
Test scope checks the property value of 'SkinIndex'.
+
Test by changing the SkinIndex value to 'valid' index and 'invalid' index. Valid SkinIndex means that the skin image set
is available in the bitmap folder. Invalid SkinIndex means that the skin image set is unavailable in the bitmap folder.

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'SkinIndex' should be updated according to the value set.
+
If the SkinIndex is valid; the clock face will change the appearance with the corresponding SkinIndex value.
The clock face will remain the same if the SkinIndex is invalid.

. Obtained result
+
Property values of 'SkinIndex' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W07_01_01[[TC_W07_01_01]]

... TestCase Description
+
Test the bindable property 'SkinIndex' from the widget 'ClockWidget2D'.
Test if the clock hands can be change by change the value of SkinIndex.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set 'SkinIndex' to 'available' and 'invalid' value
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W07_01_01[[TC_W07_01_01\]]

==== TC_W07_02[[TC_W07_02]]

. Testcase Description
+
property :'Hour; Minute; Second'
+
Check property 'Hour; Minute; Second' of ClockWidget.
+
Test scope checks the property value of 'Hour; Minute; Second'.
+
Test by changing the value of 'Hour; Minute; Second' to within the limit values and exceed the limit values
(e.g. : Hour > 24; Minute > 60 and Second > 60).

. Test instructions
+
Preconditions:
select main scene <<TTFis command to reach  similarly for all other steps >>
reset TestApp04
reach Animation scene (further preconditions like setting some properties)

. Expected result
+
The property 'Hour; Minute; Second' should be updated according to the value set.
+
If the hour; minute and second is within the limit values; the clock hands will change the time with the
corresponding hour; minute and second values.
+
When the hour; minute and second exceed the limit values; the time will be recalculate by taking the remainder
(e.g. : if hour is set to 26; the hour hand will be point to 2 since 26%24=2). Then the clock hands will be changed
with the corresponding recomputed time value.
+
The clock with SmoothRotation property can be located in the between of minute lines for some specific time;
while the clock without SmoothRotation property can only be located in the exact minute line.

. Obtained result
+
Property values of 'Hour; Minute; Second' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W07_02_01[[TC_W07_02_01]]

... TestCase Description
+
Test the bindable properties 'Hour'; 'Minute' and 'Second' from the widget 'ClockWidget2D'.
Test if the clock hands can be changed by changing the value of hour;minute and second.
The preconditions are set and checked.
Set 'Hour'; 'Minute'; 'Second' to within/outside the limits value.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W07_02_01[[TC_W07_02_01\]]

==== TC_W07_09[[TC_W07_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ClockWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to true or false.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The property 'Visible' makes the clock visible or invisible as configured.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W07_09_01[[TC_W07_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ClockWidget2D'.
Test if the ClockWidget can be visible or not.
The preconditions are set and checked.
Set the 'Visible' property to false to make the widgets invisible.
Then; set the 'Visible' property to true to make the widgets visible.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W07_09_01[[TC_W07_09_01\]]


=== ColorBar Widget 2D

==== TC_W46_01[[TC_W46_01]]

. Testcase Description
+
property :  ColorBar
+
Test case to set different colors for the colorBar widget.
+
The test case shows different colors in the ColorBar widget by pressing the ClrBarUpdateBtn/btn.

. Expected result
+
The color combination need to be set with each press on ClrBarUpdateBtn/btn.

. Obtained result
+
Screen comparison test is performed.

. Related Test cases

.. TC_W46_01_01[[TC_W46_01_01]]

... Widget being tested
+
ColorBarWidget.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W46_01_01[[TC_W46_01_01\]]


=== ColorEffect Widget 2D

==== UI Design

The UI designed for ColorEffect Widget 2D includes 3 RenderNode as the below figure:
- BitmapBrushColorBlend: brush of a single color for a bitmap.
- SolidColorBrushBlend: brush of a single color for a graphic shape.
- TextNode: brush of a single color for text.

image::images/ColorEffectScene.png[title="ColorEffect Scene"]

==== TC_W45_01[[TC_W45_01]]

. Testcase Description
+
property : Color
+
Check property 'Color' of ColorEffectWidget.
+
Test scope checks the property value of 'Color'.
+
Test 'Color' to be set on the effect of three types of RenderNode:
+
- BitmapBrushColorBlend: brush of a single color for a bitmap.
+
- SolidColorBrushBlend: brush of a single color for a graphic shape.
+
- TextNode: brush of a single color for text.

. Expected result
+
The property 'Color' should be updated according to the value set.
+

. Obtained result
+
Property values of 'Color' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W45_01_01[[TC_W45_01_01]]

... TestCase Description
+
Test the bindable property 'Color' from the widget 'ColorEffectWidget2D'.
Test 'Color' to be set on the effect of the RenderNode.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set the property 'Color' of ColorEffectWidget2D to another values to change its color.
Check this action via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W45_01_01[[TC_W45_01_01\]]

==== TC_W45_09[[TC_W45_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ColorEffectWidget.
+
Test scope checks the property value of 'Visible'.
+
Test if ColorEffectWidget2D can be set to invisible or visible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget is visible or invisible.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W45_09_01[[TC_W45_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ColorEffectWidget2D'.
Test if ColorEffectWidget2D can be set to invisible or visible.
The preconditions are set and checked.
First; set property 'Visible' to false to make the widgets invisible.
Then; set property 'Visible' to true to make the widgets visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W45_09_01[[TC_W45_09_01\]]


=== ColorSwitch Widget 2D

==== UI Design

The UI designed for ColorSwitch Widget 2D includes ten composites marked as the below figure:

- ColorSwitchText
- ColorSwitchOutlineTxt
- ColorSwitchRTxtHL
- ColorSwitchDropShadow
- ColorSwitchSolidColor
- ColorSwitchBtn
- ColorSwitchSlider
- ColorSwitchScrollbar
- ColorSwitchList
- ColorSwitchSlider_1

image::images/ColorSwitchScene.png[title="ColorSwitch Scene"]

==== TC_W42_01[[TC_W42_01]]

. Testcase Description
+
property : Index
+
Check property 'Index' of ColorSwitchWidget.
+
Test scope checks the property value of 'Index'.
+
Test 'Index' used to select the color with different effect.

. Expected result
+
The property 'Index' should be updated according to the value set.
+

. Obtained result
+
Property values of 'Index' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W42_01_01[[TC_W42_01_01]]

... TestCase Description
+
Test the bindable property 'Index' and the non-bindable property 'Target' from the widget 'ColorSwitchWidget2D'.
+
Test 'Index' used to select the color with different effect of 'Target'.
+
The preconditions are set and checked.
Check the initial state with a screenshot compare.
+
Set the 'Index' to different valid and invalid values in different widgets to make change the colors according to the given 'Index'.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W42_01_01[[TC_W42_01_01\]]

==== TC_W42_02[[TC_W42_02]]

. Testcase Description
+
property : Colors
+
Check property 'Colors' of ColorSwitchWidget.
+
Test scope checks the property value of 'Colors'.
+
Test 'Colors' to be set on different widgets and effects.

. Expected result
+
The property 'Colors' should be updated according to the value set.

. Obtained result
+
Property values of 'Colors' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W42_02_01[[TC_W42_02_01]]

... TestCase Description
+
Test the bindable property 'Colors' from the widget 'ColorSwitchWidget2D'.
+
Test 'Colors' to be set on different widgets and effects.
+
The preconditions are set and checked.
Set the 'Colors' to different valid and invalid values in different widgets to change the colors.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W42_02_01[[TC_W42_02_01\]]

.. TC_W42_02_02[[TC_W42_02_02]]

... TestCase Description
+
Test the bindable property 'Colors' and the non-bindable property 'StateFlags' from the widget 'ColorSwitchWidget2D'.
+
Test 'Colors' changed by configuring 'StateFlags' with different values in CGI.
The preconditions are set and checked.
+
Firstly; call press gesture simulation to change color of ColorSwitchBtn.
Change value of 'Enable' of ScrollBar and List to change color of ColorSwitch.
+
Secondly; call press gesture simulation to change color of ColorSwitchSlider.
Change value of 'IsActive' of Button to 0 to change color of ColorSwitchBtn.
+
Check these actions via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W42_02_02[[TC_W42_02_02\]]

==== TC_W42_09[[TC_W42_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ColorSwitchWidget.
+
Test scope checks the property value of 'Visible'.
+
Test if ColorSwitchWidget2D can be set to invisible or visible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget is visible or invisible.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W42_09_01[[TC_W42_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ColorSwitchWidget2D'.
+
Test if ColorSwitchWidget2D can be set to invisible or visible.
+
The preconditions are set and checked.
+
First; set property 'Visible' to false to make the widgets invisible.
+
Then; set property 'Visible' to true to make the widgets visible again.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W42_09_01[[TC_W42_09_01\]]


=== EditField Widget 2D

==== TC_W16_08[[TC_W16_08]]

. Testcase Description
+
property :   InstructionText
+
It checks the  InstructionText dislayed in the editfield for the different modes of speller type.

. Expected result
+
The editfield  should show appropriate instruction text in the editfiled on entering the different speller views.

. Obtained result
+
Checked for the instruction text property through TTFi and also verfied through picture comparison.

. Related Test cases

.. TC_W16_08_01[[TC_W16_08_01]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check the InstructionText property for Match mode.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_08_01[[TC_W16_08_01\]]

.. TC_W16_08_02[[TC_W16_08_02]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the InstructionText property for Free mode.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_08_02[[TC_W16_08_02\]]

==== TC_W16_19[[TC_W16_19]]

. Testcase Description
+
property : EditFieldInfo
+
To check the text entry in the edit field.
+
The EditFieldInfo property stores the characters entered by the user; by checking the property we can confirms the right charcters are displayed in the editfield.

. Expected result
+
Text entered in the editfield should be match with the EditFieldInfo.

. Obtained result
+
Checked for the EditFieldInfo property through TTFi and bitmap should be matched with the refernce bitmap  .

. Related Test cases

.. TC_W16_19_01[[TC_W16_19_01]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the EditfieldInfo property for charcter entry along with the left cursor entry feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_01[[TC_W16_19_01\]]

.. TC_W16_19_02[[TC_W16_19_02]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the EditfieldInfo property for charcter entry along with the delete character feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_02[[TC_W16_19_02\]]

.. TC_W16_19_03[[TC_W16_19_03]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the EditfieldInfo property for charcter entry along with the left cursor entry feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_03[[TC_W16_19_03\]]

.. TC_W16_19_04[[TC_W16_19_04]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the EditfieldInfo property along with the left/right cursor entry feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_04[[TC_W16_19_04\]]

.. TC_W16_19_05[[TC_W16_19_05]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the EditfieldInfo property for numbers.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_05[[TC_W16_19_05\]]

.. TC_W16_19_06[[TC_W16_19_06]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check EditfieldInfo property for combination of character and numbers.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_06[[TC_W16_19_06\]]

.. TC_W16_19_07[[TC_W16_19_07]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the EditfieldInfo property along with the delete all feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_07[[TC_W16_19_07\]]

.. TC_W16_19_08[[TC_W16_19_08]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check EditfieldInfo property along with the delete all feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_08[[TC_W16_19_08\]]

.. TC_W16_19_09[[TC_W16_19_09]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check the EditfieldInfo property character entry.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_09[[TC_W16_19_09\]]

.. TC_W16_19_10[[TC_W16_19_10]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check the EditfieldInfo property character entry.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_10[[TC_W16_19_10\]]

.. TC_W16_19_11[[TC_W16_19_11]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check EditfieldInfo property along with the delete all feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_11[[TC_W16_19_11\]]

.. TC_W16_19_12[[TC_W16_19_12]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check the EditfieldInfo property along with the delete all feature
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_12[[TC_W16_19_12\]]

.. TC_W16_19_13[[TC_W16_19_13]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check EditfieldInfo property along with the cursor entry.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_13[[TC_W16_19_13\]]

.. TC_W16_19_14[[TC_W16_19_14]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check the EditfieldInfo property along with cursor entry feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_14[[TC_W16_19_14\]]

.. TC_W16_19_15[[TC_W16_19_15]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check EditfieldInfo property along with the delete feature.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_15[[TC_W16_19_15\]]

.. TC_W16_19_16[[TC_W16_19_16]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the  EditfieldInfo property along with the cursor entry.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_16[[TC_W16_19_16\]]

.. TC_W16_19_17[[TC_W16_19_17]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the  EditfieldInfo property along with the cursor entry.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_17[[TC_W16_19_17\]]

.. TC_W16_19_18[[TC_W16_19_18]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the  EditfieldInfo property.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_18[[TC_W16_19_18\]]

.. TC_W16_19_19[[TC_W16_19_19]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the cursor remembering the position after entering back to scene.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_19[[TC_W16_19_19\]]

.. TC_W16_19_20[[TC_W16_19_20]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the cursor remembering the position after entering back to scene.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_20[[TC_W16_19_20\]]

.. TC_W16_19_21[[TC_W16_19_21]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the cursor remembering the position after entering back to scene.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_19_21[[TC_W16_19_21\]]

==== TC_W16_20[[TC_W16_20]]

. Testcase Description
+
property : EditTextReceived
+
To check the text received by the edit field.

. Expected result
+
The  EditTextReceived value should match with the entered text.

. Obtained result
+
The  EditTextReceived value is matching  with the entered text.

. Related Test cases

.. TC_W16_20_01[[TC_W16_20_01]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check the EditTextReceived property value through TTFIS command.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_20_01[[TC_W16_20_01\]]

==== TC_W16_21[[TC_W16_21]]

. Testcase Description
+
property : SuggetionText
+
It checks the text stored in the SuggetionText property; when the user entered any character.
+
For Ex: If user entered a character 'B'; the suggestion text should update with the possible text like "BANGALORE".

. Expected result
+
When user enter any character; it should store the appropriate suggestion Text.

. Obtained result
+
The suggestiontext property is verified through TTFIS.

. Related Test cases

.. TC_W16_21_01[[TC_W16_21_01]]

... Widget being tested
+
cmp_EditField_MatchMode/EditFieldWidget2D. Check the suggestion text property value through TTFIS command.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_21_01[[TC_W16_21_01\]]

==== TC_W16_22[[TC_W16_22]]

. Testcase Description
+
property : KeyReceived
+
To check the KeyReceived when the user press any character.
+
It checks a character entered by the user. for ex: if 'G' is entered; the KeyReceived property should update with the charcter 'G'.
. Expected result
+
When user enter any character; the property KeyReceived value should be updated with the particular character.

. Obtained result
+
The KeyReceived property is verified through TTFIS.

. Related Test cases

.. TC_W16_22_01[[TC_W16_22_01]]

... Widget being tested
+
cmp_EditField_FreeMode/EditFieldWidget2D. Check the KeyReceived property value through TTFIS command.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W16_22_01[[TC_W16_22_01\]]


=== EnableGroup Widget 2D

==== UI Design

The UI designed for EnableGroup Widget 2D includes other widgets belowed:

- ButtonWidget2D
- TextWidget2D
- SliderWidget2D
- ListWidget2D
- ScrollBarWidget2D
- MeterWidget2D
- AngularSliderWidget2D

image::images/EnableGroupScene.png[title="EnableGroup Scene"]

==== TC_W10_07[[TC_W10_07]]

. Testcase Description
+
property : InheritEnabled
+
Check property 'InheritEnabled' of EnableGroupWidget.
+
Test scope checks the property value of 'InheritEnabled'.
+
Test if InheritEnabled can make enable or disable for other widgets with value 'Enable' of EnableGroupWidget2D is false.

. Expected result
+
The property 'InheritEnabled' should be updated according to the value set.
+

. Obtained result
+
Property values of 'InheritEnabled' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W10_07_01[[TC_W10_07_01]]

... TestCase Description
+
Test the bindable property 'InheritEnabled' from the widget 'EnableGroupWidget2D'.
+
Test if InheritEnabled can make enable or disable for other widgets with value 'Enable' of EnableGroupWidget2D is false.
+
The preconditions are set and checked.
+
Check the initial state with a screenshot compare.
+
First; set property 'InheritEnabled' to true to make other widgets disable.
Then; set property 'InheritEnabled' to false to make other widgets enable.
+
Check the enabled state by setting property 'InheritEnabled' via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W10_07_01[[TC_W10_07_01\]]

==== TC_W10_08[[TC_W10_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of EnableGroupWidget.
+
Test scope checks the property value of 'Enable'.
+
Test if EnableGroupWidget2D can make enable or disable for other widgets.

. Expected result
+
The property 'Enable' should be updated according to the value set.
+

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W10_08_01[[TC_W10_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'EnableGroupWidget2D'.
+
Test the bindable property 'InheritEnabled' from other widgets.
+
Test if EnableGroupWidget2D can make enable or disable for other widgets.
+
The preconditions are set and checked.
+
First; set property 'Enable' to false to make other widgets disable with the default value
of 'InheritEnabled' is true.
Then; set property 'Enable' to true to make other widgets enable again.
+
Check the enabled state by setting property 'Enable' via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W10_08_01[[TC_W10_08_01\]]

==== TC_W10_09[[TC_W10_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of EnableGroupWidget.
+
Test scope checks the property value of 'Visible'.
+
Test if EnableGroupWidget2D can be set to invisible or visible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W10_09_01[[TC_W10_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'EnableGroupWidget2D'.
+
Test if EnableGroupWidget2D can be set to invisible or visible.
The preconditions are set and checked.
+
First; set property 'Visible' to false to make other widgets invisible.
Then; set property 'Visible' to true to make other widgets visible again.
+
Check the visibility of other widgets via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W10_09_01[[TC_W10_09_01\]]


=== GridList Widget 2D

==== TC_W47_01[[TC_W47_01]]

. Testcase Description
+
Grid List Page scrolling through Page Down/up buttons.
+
Test case/s to check Page scrolling functionality in Grid List Widget through touch of co-ordinates on Page Down/Up button present in the Grid List widget.

. Expected result
+
Depending upon the press of the touch of co-ordinates  in the scrollbar Page Down/up buttons the items should be scrolled downwards/upwards.

. Obtained result
+
Screen comparison is used to check the functionality of scrolling in Scrollable Text Widget.

. Related Test cases

.. TC_W47_01_01[[TC_W47_01_01]]

... Page Scrolling in Grid List widget is tested.

.. TC_W47_01_02[[TC_W47_01_02]]

... Page Scrolling in Grid List widget is tested.

.. TC_W47_01_03[[TC_W47_01_03]]

... Page Scrolling in Grid List widget is tested.

.. TC_W47_02_01[[TC_W47_02_01]]

... Page Scrolling in Grid List widget is tested.

.. TC_W47_02_02[[TC_W47_02_02]]

... Page Scrolling in Grid List widget is tested.


=== ImageEffect Widget 2D

==== UI Design

The UI designed for ImageEffect 2D:

image::images/ImageEffectScene.png[title="ImageEffect Scene"]

==== TC_W12_01[[TC_W12_01]]

. Testcase Description
+
property : Bitmap
+
Check property 'Bitmap' of ImageEfect2D.
+
Test scope checks the property value of 'Bitmap'.
+
Test the possibility of changing the appearance of the property "Bitmap".

. Expected result
+
The property 'Bitmap' should be updated according to the logic from HALL code.
+
. Obtained result
+
Bitmap comparison is done.

. Related Test cases

.. TC_W12_01_01[[TC_W12_01_01]]

... TestCase Description
+
Test the bindable property 'Bitmap' from the widget 'ImageEffect.
Test the possibility of changing the appearance of the property "Bitmap".
The preconditions are set and checked.
Sending a message to HALL code to trigger the implemented code
of changing widgets' appearance.
Check the above action via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W12_01_01[[TC_W12_01_01\]]

==== TC_W12_02[[TC_W12_02]]

. Testcase Description
+
property : Color
+
Check property 'Color' of ImageEfect2D.
+
Test scope checks the property value of 'Color'.
+
Test the possibility of changing the appearance of the property "Color".

. Expected result
+
The property 'Color' should be updated according to value set.
+
. Obtained result
+
Property values of 'Color' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W12_02_01[[TC_W12_02_01]]

... TestCase Description
+
Test the bindable property 'Color' from the widget 'ImageEffect.
Test the possibility of changing the appearance of the property "Color".
The preconditions are set and checked.
Set the property 'Color' of ImageEffect2D to another value to change its Color.
Check the above action via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W12_02_01[[TC_W12_02_01\]]

==== TC_W12_09[[TC_W12_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ImageEfect2D.
+
Test scope checks the property value of 'Visible'.
+
Test the possibility of changing the appearance of the property "Visible".

. Expected result
+
The property 'Visible' should be updated according to value set.
+
. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W12_09_01[[TC_W12_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ImageEffect'.
Test if the the widget ImageEffect can be set to visible or invisible.
The preconditions are set and checked.
Set property 'Visible' of ImageEffect2D to make the widget invisible or visible.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W12_09_01[[TC_W12_09_01\]]


=== ImageSwitch Widget 2D

==== UI Design

The UI designed for ImageSwitch Widget 2D includes 2 widgets as the below figure:

image::images/ImageSwitchScene.png[title="ImageSwitch Scene"]

==== TC_W11_01[[TC_W11_01]]

. Testcase Description
+
property : Index
+
Check property 'Index' of ImageSwitchWidget.
+
Test scope checks the property value of 'Index'.
+
Test 'Index' of the selected bitmap to be made visible.

. Expected result
+
The property 'Index' should be updated according to the value set.
+

. Obtained result
+
Property values of 'Index' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W11_01_01[[TC_W11_01_01]]

... TestCase Description
+
Test the bindable property 'Index' from the widget 'ImageSwitchWidget2D'.
+
Test 'Index' of the selected bitmap to be made visible.
+
The preconditions are set and checked.
+
Check the initial state with a screenshot compare.
+
First; set 'Index' to outbound and inbound values to check that no image is visible.
+
Then set the 'Index' back into the valid range and check for a visible image.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W11_01_01[[TC_W11_01_01\]]

==== TC_W11_09[[TC_W11_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ImageSwitchWidget.
+
Test scope checks the property value of 'Visible'.
+
Test if ImageSwitchWidget2D can be set to invisible or visible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget is visible or invisible.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W11_09_01[[TC_W11_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ImageSwitchWidget2D'.
+
Test if widgets can be set to invisible or visible.
+
The preconditions are set and checked.
+
First; set property 'Visible' to 0 (false) to make the widgets invisible.
+
Then. set property 'Visible' to 1 (true) to make the widgets visible again.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W11_09_01[[TC_W11_09_01\]]


=== List Widget 2D: Coverflow

==== UI Design

The UI designed for ListCoverflow Widget 2D includes widgets in vertical and horizontal as the below figure:

image::images/ListCoverflowScene.png[title="ListCoverflowScene"]

==== TC_W27_04[[TC_W27_04]]

. Testcase Description
+
property : Snap
+
Check property 'Snap'.
+
Test scope checks the property behavior of 'Snap'.
+
Test property 'Snap' by scrolling the list then comparing the screenshot.

. Expected result
+
Items of the list snap to center after scrolling.

. Obtained result
+
Result is verified with TTFIs command and bitmap comparison.

. Related Test cases

.. TC_W27_04_01[[TC_W27_04_01]]

... TestCase Description
+
Test the non-bindable property 'Snap' from the widget 'Coverflow'.
Test the possibility of applying the snapping to the widget.
The preconditions are set and checked.
Firstly; swipe the list down or right within the current item by to check
whether or not the list snaps to the current item.
Secondly; swipe the list up or left within the current item by to check
whether or not the list snaps to the next item.
Thirdly; swipe the list down or right over the current item to check
whether or not the list snaps to the previous item.
Lastly; swipe the list up or left over the current item to check
whether or not the list snaps to the current item.
Check the all above actions via a screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W27_04_01[[TC_W27_04_01\]]


=== List Widget 2D: Curved

==== UI Design

The Curved List is a sub testing group of ListWidget2D. CurvedList scene is
designed as below:

- Includes Horizontal and Vertical lists
- ScrollingType: DefaultSrolling

- LimitReachedUpAnimationType: CustomAnimation

- LimitReachedUpAnimationTime: 0

- LimitReachedUpAnimation: Animation_Scale_CurvedReachUp

- LimitReachedDownAnimationType: CustomAnimation

- LimitReachedDownAnimationTime: 0

- LimitReachedDownAnimation: Animation_Scale_CurvedReachDown

image::images/ListCurvedScene.png[title="ListCurved Scene"]

==== TC_W29_04[[TC_W29_04]]

. Testcase Description
+
property : LimitReachedUpAnimationType
+
Check property 'LimitReachedUpAnimationType' of ListWidget.
+
Test scope checks the property value of 'LimitReachedUpAnimationType'.
+
Test the bindable property 'LimitReachedUpAnimationType' from the widget 'List' about
the possibility of applying the animation to the widget
when the condition LimitReachedUp is matched.

. Expected result
+
The property 'LimitReachedUpAnimationType' should be updated according to the value set.
+
The animation is applied to the items as configured.

. Obtained result
+
Property values of 'LimitReachedUpAnimationType' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W29_04_01[[TC_W29_04_01]]

... TestCase Description
+
Test the bindable property 'LimitReachedUpAnimationType' from the widget 'List'.
Test the possibility of applying the animation to the widget.
The preconditions are set and checked.
Firstly; set property 'LimitReachedUpAnimationType' of the widget to NoAnimation to
not apply any animation to the widget.
Swipe the list to reach up; then swipe the list down by roughly 8 items to
check whether or not the animation plays correctly.
Check the above action via property check and screenshot compare.
Secondly; set property 'LimitReachedUpAnimationType' of the widget to CustomAnimation to
apply the animation to the widget.
Swipe the list to reach up; then swipe the list down by roughly 8 items to
check whether or not the animation plays correctly.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W29_04_01[[TC_W29_04_01\]]

==== TC_W29_05[[TC_W29_05]]

. Testcase Description
+
property : LimitReachedUpAnimationTime
+
Check property 'LimitReachedUpAnimationTime' of ListWidget.
+
Test scope checks the property value of 'LimitReachedUpAnimationTime'.
+
Test the bindable property 'LimitReachedUpAnimationTime' from the widget 'List' about
the possibility of applying the time to play the animation to the widget
when the condition LimitReachedUp is matched.

. Expected result
+
The property 'LimitReachedUpAnimationTime' should be updated according to the value set.
+
The animation is applied to the items as configured.

. Obtained result
+
Property values of 'LimitReachedUpAnimationTime' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W29_05_01[[TC_W29_05_01]]

... TestCase Description
+
Test the bindable property 'LimitReachedUpAnimationTime' from the widget 'List'.
Test the possibility of applying the time to play the animation to the widget.
The preconditions are set and checked.
Firstly; set property 'LimitReachedUpAnimationTime' of the widget to another value
to apply the waittime to play the animation to the widget.
Swipe the list to reach up and wait for LimitReachedUpAnimationTime;
then swipe the list down by about 8 items to check whether or not the animation plays correctly.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W29_05_01[[TC_W29_05_01\]]

==== TC_W29_06[[TC_W29_06]]

. Testcase Description
+
property : LimitReachedDownAnimationType
+
Check property 'LimitReachedDownAnimationType' of ListWidget.
+
Test scope checks the property value of 'LimitReachedDownAnimationType'.
+
Test the bindable property 'LimitReachedDownAnimationType' from the widget 'List' about
the possibility of applying the animation to the widget
when the condition LimitReachedDown is matched.

. Expected result
+
The property 'LimitReachedDownAnimationType' should be updated according to the value set.
+
The animation is applied to the items as configured.

. Obtained result
+
Property values of 'LimitReachedDownAnimationType' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W29_06_01[[TC_W29_06_01]]

... TestCase Description
+
Test the bindable property 'LimitReachedDownAnimationType' from the widget 'List'.
Test the possibility of applying the animation to the widget.
The preconditions are set and checked.
Firstly; set property 'LimitReachedDownAnimationType' of the widget to NoAnimation to
not apply any animation to the widget.
Swipe the list to reach up; then swipe the list down by roughly 8 items to
check whether or not the animation plays correctly.
Check the above action via property check and screenshot compare.
Secondly; set property 'LimitReachedDownAnimationType' of the widget to CustomAnimation to
apply the animation to the widget.
Swipe the list to reach up; then swipe the list down by roughly 8 items to
check whether or not the animation plays correctly.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W29_06_01[[TC_W29_06_01\]]

==== TC_W29_07[[TC_W29_07]]

. Testcase Description
+
property : LimitReachedDownAnimationTime
+
Check property 'LimitReachedDownAnimationTime' of ListWidget.
+
Test scope checks the property value of 'LimitReachedDownAnimationTime'.
+
Test the bindable property 'LimitReachedDownAnimationTime' from the widget 'List' about
the possibility of applying the time to play the animation to the widget
when the condition LimitReachedUp is matched.

. Expected result
+
The property 'LimitReachedDownAnimationTime' should be updated according to the value set.
+
The animation is applied to the items as configured.

. Obtained result
+
Property values of 'LimitReachedDownAnimationTime' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W29_07_01[[TC_W29_07_01]]

... TestCase Description
+
Test the bindable property 'LimitReachedDownAnimationTime' from the widget 'List'.
Test the possibility of applying the time to play the animation to the widget.
The preconditions are set and checked.
Firstly; set property 'LimitReachedDownAnimationTime' of the widget to another value
to apply the waittime to play the animation to the widget.
Swipe the list to reach up and wait for LimitReachedDownAnimationTime;
then swipe the list down by about 8 items to check whether or not the animation plays correctly.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W29_07_01[[TC_W29_07_01\]]


=== List Widget 2D: Grid

==== UI Design

The Grid List is a sub testing group of ListWidget2D. GridList scenes are
designed as below:

One grid list scene:

- One Grid List scene includes the Horizontal; Vertical and Span Grid lists.
- One orthogonal horizontal Grid list scene includes Grid lists with three types of
DynamicGridEmptyCellsPolicy: KeepEmpty; DistributeToAllItems; DistributeToLastItem.
- One orthogonal Vertical Grid List scene includes Grid list with three types of
DynamicGridEmptyCellsPolicy: KeepEmpty; DistributeToAllItems; DistributeToLastItem.

image::images/GridListScene.png[title="Grid List Scene"]

image::images/HorizontalOrthogonalGridListScene.png[title="Horizontal Orthogonal Grid List Scene"]

image::images/VerticalOrthogonalGridListScene.png[title="Vertical Orthogonal Grid List Scene"]

==== TC_W28_01[[TC_W28_01]]

. Testcase Description
+
property : ScrollingOrientation; DynamicGrid; DynamicGridEmptyCellsPolicy
+
Check property 'ScrollingOrientation' and non bindable 'DynamicGrid';
'DynamicGridEmptyCellsPolicy' of ListWidget.
+
Test scope checks the property value of 'ListId'.
+
Test if the grid list is displayed as configuration and scrolled in configured scrolling orientation.
Also test if Dynamic grid list can be distributed in DynamicGridEmptyCellsPolicy types via initial screen.

. Expected result
+
The grid lists are loaded corresponding to configuration.
+
The grid lists are scrolled corresponding to 'ScrollingOrientation'.
+
The Dynamic grid lists are distributed in DynamicGridEmptyCellsPolicy types.

. Obtained result
+

Bitmap comparison is also done.

. Related Test cases

.. TC_W28_01_01[[TC_W28_01_01]]

... TestCase Description
+
Test the bindable property 'ScrollingOrientation' and non bindable 'DynamicGrid';
'DynamicGridEmptyCellsPolicy' from the widget 'List'.
Test if the grid list can be arranged and scrolled in configured scrolling orientation.
Also test if Dynamic grid list can be distributed in DynamicGridEmptyCellsPolicy types
via initial screen.
The preconditions are set and checked.
Check the initial state via screenshot compare to make sure all configurations are loaded correctly.
Swipe the three lists in the vertical and horizontal orientation to scroll the lists.
Check if the three lists scrolled in vertical and horizontal orientation as configuration
via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W28_01_01[[TC_W28_01_01\]]

==== TC_W28_02[[TC_W28_02]]

. Testcase Description
+
property : GestureConfigId
+
Check property 'GestureConfigId' of ListWidget.
+
Test scope checks the property value of 'GestureConfigId'.
+
Test if can change gesture configuration of the list by GestureConfigId property.

. Expected result
+
The property 'GestureConfigId' should be updated according to the value set.
+
Gesture configuration such as drag; swipe of the list works corresponding to the
setting GestureConfigId value.

. Obtained result
+
Property values of 'GestureConfigId' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W28_02_01[[TC_W28_02_01]]

... TestCase Description
+
Test the bindable properties 'GestureConfigId' from the widget 'List'.
Test if can change gesture configuration of the list by GestureConfigId property.
The preconditions are set and checked.
Set property GestureConfigId of one list to a gesture configID (disable drag/swipe)
that registered in DataModel to change the gesture configuration.
Check if GestureConfigId of the list has value as set.
Check if 'Drag' and 'Swipe' gestures of the list is not configured via gesture check.
Set property GestureConfigId of one list to a gesture configID (enable drag/swipe)
that registered in DataModel to change the gesture configuration.
Swipe the list to scroll the lists.
Check if GestureConfigId of the list has value as set.
Check if the list is scrolled via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W28_02_01[[TC_W28_02_01\]]

==== TC_W28_03[[TC_W28_03]]

. Testcase Description
+
property : PixelWiseScrollingEnabled; NumberOfItems
+
Check property 'PixelWiseScrollingEnabled'; 'NumberOfItems' of ListWidget.
+
Test scope checks the property value of 'NumberOfItems'.
+
Test if the NumberOfItems property can configure the number of columns(for horizontal scrolling)
or rows(for vertical scrolling).

. Expected result
+
The property 'NumberOfItems' should be updated according to the value set.
+
If the PixelWiseScrollingEnabled is false then can change the column and row of
list by changing NumberOfItems.
If the PixelWiseScrollingEnabled is true then cannot change the column and row of
list by changing NumberOfItems.

. Obtained result
+
Property values of 'NumberOfItems' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W28_03_01[[TC_W28_03_01]]

... TestCase Description
+
Test the bindable property 'PixelWiseScrollingEnabled' and 'NumberOfItems' from the widget 'List'.
Test if the property can configured the number of columns(for horizontal scrolling)
or rows(for vertical scrolling).
The preconditions are set and checked.
Set property NumberOfItems of the grid list to a number different to default to
change the number of visible column and row on the list.
Check if NumberOfItems has value as set via property check.
Check if the lists will change the column and row through 'NumberOfItems' if
'PixelWiseScrollingEnabled' is false via screenshot compare.
Check if the lists will not be changed the column and row through 'NumberOfItems'
if 'PixelWiseScrollingEnabled' is true via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W28_03_01[[TC_W28_03_01\]]

==== TC_W28_04[[TC_W28_04]]

. Testcase Description
+
property : FixedPageScrolling; FixedPageScrollingOffset
+
Check property 'FixedPageScrolling'; 'FixedPageScrollingOffset' of ListWidget.
+
Test scope checks the property value of 'FixedPageScrollingOffset'.
+
Test if the grid list can be configured to only scroll in a fixed page if the scroll is shorter
than offset; and scroll to next page if the scroll is longer than offset.

. Expected result
+
The property 'FixedPageScrollingOffset' should be updated according to the value set.
+
If scrolling the grid list is shorter than FixedPageScrollingOffset; then the list only
scrolls on the current page.
If scrolling the grid list is longer than FixedPageScrollingOffset; then the list can be
scrolled to the next page.

. Obtained result
+
Property values of 'FixedPageScrollingOffset' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W28_04_01[[TC_W28_04_01]]

... TestCase Description
+
Test the bindable property 'FixedPageScrolling' and 'FixedPageScrollingOffset' from the widget 'List'.
Test if the grid list can be configured to only scroll in a fixed page if the scroll is shorter
than offset; and scroll to next page if the scroll is longer than offset.
The preconditions are set and checked.
Drag the list shorter than the FixedPageScrollingOffset to check if the list just scroll
in the current page.
Check if the list scrolled back to the current page via screenshot compare.
Drag the list longer than the FixedPageScrollingOffset to check if the list scrolled to the next page.
Check if the list scrolled to the next page via screenshot compare.
Set FixedPageScrollingOffset to a large value and drag the list to see if the list scrolls
back to the current page.
Check if the list only stays on the current page via screenshot compare.
Set FixedPageScrollingOffset to a negative value and drag the list in a very short distance
to scroll the list to the next page.
Check if the list scrolled to the next page via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W28_04_01[[TC_W28_04_01\]]


=== List Widget 2D: Linear

==== UI Design

The Linear List is a sub testing group of ListWidget2D. LinearList scene is
designed as below:

- Includes Horizontal and Vertical lists
- Includes 2 SrollingType: Default Scrolling; Circular Scrolling.
- Includes 3 ListAlignment types: Begin; Center; End.
- The lists which designed for 2 scrolling type will involve 20 elements of Red;
Green; Blue and N/A.
- The lists which designed for 3 alignment types will involve 4 items of N/A and Item.
- Includes a CircularScrolling list that load items dynamic.
- Implement the GetAndResetWindowElementSize command to get WindowElementSize
of the dynamic list.

image::images/LinearListScene.png[title="Linear List Scene"]

==== TC_W26_01[[TC_W26_01]]

. Testcase Description
+
property : ListId
+
Check property 'ListId' of ListWidget.
+
Test scope checks the property value of 'ListId'.
+
Test the bindable property 'ListId' from the widget 'List' that the list can
request data by unique ListId.
Test also lists which configured non-bindable property ListAlignment display
items in Begin; Center and End corresponding.

. Expected result
+
The property 'ListId' should be updated according to the value set.
+
The items are loaded into lists corresponding to ListId.

. Obtained result
+
Property values of 'ListId' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_01_01[[TC_W26_01_01]]

... TestCase Description
+
Test the bindable property 'ListId' from the widget 'List'.
Test if the list can request data by unique ListId.
The preconditions are set and checked.
Check the initial state via screenshot compare to make sure all configurations
are loaded correctly.
Set property ListId of VerticalListWidget to a not-configured number.
Set property ListId of HorizontalListWidget to VerticalListWidget ListId.
Check if ListId of two List has value as set via property check.
Check if the items are loaded into two list corresponding to ListId via
screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_01_01[[TC_W26_01_01\]]

==== TC_W26_02[[TC_W26_02]]

. Testcase Description
+
property : StartIndex
+
Check property 'StartIndex' of ListWidget.
+
Test scope checks the property value of 'StartIndex'.
+
Test if change the StartIndex then the first visible item of the list also
changes corresponding. When setting StartIndex to out of the list size;
the first visible item should be item 0 if StartIndex is negative;
and the first item of the last page if StartIndex greater than the list size.

. Expected result
+
The property 'StartIndex' should be updated according to the value set.
+
The first visible item of the list is corresponding to the setting StartIndex value.

. Obtained result
+
Property values of 'StartIndex' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_02_01[[TC_W26_02_01]]

... TestCase Description
+
Test the bindable properties 'StartIndex' from the widget 'List'.
Test if can set the first visible item for the list by StartIndex property.
The preconditions are set and checked.
Set property StartIndex of two lists to a number differ default to change
the first visible item of the lists.
Check if StartIndex of two lists has value as set and the first visible items
of two lists are set item via screenshot compare.
Set property StartIndex of two lists to a negative number to change the first
visible item of the lists.
Check if StartIndex of two lists has value as set and the first visible items
of two lists are item 0 via screenshot compare.
Set property StartIndex of two lists to over list size number to change the
first visible item of the lists.
Check if StartIndex of two lists has value as set and the first visible items
of two lists is the items in last page via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_02_01[[TC_W26_02_01\]]

==== TC_W26_03[[TC_W26_03]]

. Testcase Description
+
property : ScrollingOrientation
+
Check property 'ScrollingOrientation' of ListWidget.
+
Test scope checks the property value of 'ScrollingOrientation'.
+
Test if the list supports horizontal and vertical scroll orientations.

. Expected result
+
The property 'ScrollingOrientation' should be updated according to the value set.
+
The list can be scrolled in vertical and horizontal orientations as set.

. Obtained result
+
Property values of 'ScrollingOrientation' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_03_01[[TC_W26_03_01]]

... TestCase Description
+
Test the bindable property 'ScrollingOrientation' from the widget 'List'.
Test if the list supports horizontal and vertical scroll orientation.
The preconditions are set and checked.
Set property ScrollingOrientation of VerticalListWidget to horizontal and HorizontalListWidget to
vertical to change the scroll orientation.
Check action set successfully via property check.
Check one screenshot compare if:
+ Items in VerticalListWidget are not in vertical orientation anymore.
+ Items in HorizontalListWidget are not in horizontal orientation anymore.
Set property ScrollingOrientation of VerticalListWidget to vertical and HorizontalListWidget to
horizontal to change the scroll orientation as configured.
Swipe the two lists in the vertical and horizontal orientation.
Check action set successfully via property check.
Check if the two lists scrolled in vertical and horizontal orientation
via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_03_01[[TC_W26_03_01\]]

==== TC_W26_04[[TC_W26_04]]

. Testcase Description
+
property : Drag
+
Check property 'Drag' of ListWidget.
+
Test scope checks the property value of 'Drag'.
+
Test the list can be dragged or not by setting Drag property enable or disable.

. Expected result
+
The property 'Drag' should be updated according to the value set.
+
If Drag is true then the list can be dragged and vise versa.

. Obtained result
+
Property values of 'Drag' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_04_01[[TC_W26_04_01]]

... TestCase Description
+
Test the bindable properties 'Drag' from the widget 'List'.
Test if the list can be dragged or not.
The preconditions are set and checked.
Set property Drag to false to disable drag; then call drag gesture
simulation to scroll the list.
Check if Drag is false via property check and the list was not scrolled
via screenshot compare.
Set property Drag to true to enable drag; then call drag gesture
simulation to scroll the list.
Check if Drag is false via property check and the list scrolled via
screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_04_01[[TC_W26_04_01\]]

==== TC_W26_05[[TC_W26_05]]

. Testcase Description
+
property : Swipe
+
Check property 'Swipe' of ListWidget.
+
Test scope checks the property value of 'Swipe'.
+
Test the list can be swiped or not by setting Swipe property enable or disable.
Test also when swipe the list; it will be scrolled based on the
'ScrollingType' was set in the CGI.

. Expected result
+
The property 'Swipe' should be updated according to the value set.
+
If Swipe is true then the list can be swiped and vise versa.

. Obtained result
+
Property values of 'Swipe' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_05_01[[TC_W26_05_01]]

... TestCase Description
+
Test the bindable property 'Swipe' from the widget 'List'.
Test if the list can be swiped or not.
The preconditions are set and checked.
Set property Swipe to false to disable swipe; then call swipe gesture
simulation to scroll the list.
Check if action set successfully via property check and the list wasn't
scrolled via screenshot compare.
Set property Swipe to true to enable swipe; then call swipe gesture
simulation to scroll the list.
Check if action set successfully via property check and the list scrolled
via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_05_01[[TC_W26_05_01\]]

.. TC_W26_05_02[[TC_W26_05_02]]

... TestCase Description
+
Test the bindable property 'Swipe' and non-bindable property 'ScrollingType'
from the widget 'List'.
Test if the list can be scrolled in two types:
- DefaultScrolling: The list can be scrolled from the first to the last element.
- CircularScrolling: The list can be scrolled endlessly; the beginning
and the end are connected.
The preconditions are set and checked.
Swipe the list has DefaultScrolling from the begin to the end two times
to scroll the list to the end.
Swipe the list has CircularScrolling back to see if the first item of the
list connect to the end item of list.
Check if the lists are scrolled as configured ScrollingType via
screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_05_02[[TC_W26_05_02\]]

==== TC_W26_06[[TC_W26_06]]

. Testcase Description
+
properties : PixelWiseScrollingEnabled; NumberOfItems
+
Check properties 'PixelWiseScrollingEnabled'; 'NumberOfItems' of ListWidget.
+
Test scope checks the property value of 'PixelWiseScrollingEnabled';
'NumberOfItems'.
+
Test if the list can be scrolled in pixelwise or item by setting PixelWiseScrollingEnabled. And if PixelWiseScrollingEnabled is false then
can configure the number of items in the list by setting NumberOfItems property.

. Expected result
+
The properties 'PixelWiseScrollingEnabled'; 'NumberOfItems' should be
updated according to the value set.
+
The list scrolled in pixelwise if PixelWiseScrollingEnabled is true and vice versa.
If PixelWiseScrollingEnabled is false then can set number of items in the list.

. Obtained result
+
Property values of 'PixelWiseScrollingEnabled'; 'NumberOfItems' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_06_01[[TC_W26_06_01]]

... TestCase Description
+
Test the bindable property 'PixelWiseScrollingEnabled' from the widget 'List'.
Test if the list can be scrolled in pixelwise or item.
The preconditions are set and checked.
Set property PixelWiseScrollingEnabled of one list to false to enable
scroll list in item.
Set property PixelWiseScrollingEnabled of one list to true to enable
scroll list in pixelwise.
Drag the two list to see if the list scrolls in item or pixelwise.
Check if action set successfully via property check.
Check if the two list scroll in item or pixelwise via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_06_01[[TC_W26_06_01\]]

.. TC_W26_06_02[[TC_W26_06_02]]

... TestCase Description
+
Test the bindable properties 'NumberOfItems' from the widget 'List'.
Test if the number of items in the list can be configured if
PixelWiseScrollingEnabled is false.
The preconditions are set and checked.
Set property NumberOfItems of VerticalListWidget; HorizontalListWidget
to 5 to change the visible items on the list.
Check if NumberOfItems of VerticalListWidget and HorizontalListWidget
is 5 via property.
Check if the number of items displayed on VerticalListWidget is 5
items via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_06_02[[TC_W26_06_02\]]

==== TC_W26_07[[TC_W26_07]]

. Testcase Description
+
properties : FixedPageScrolling; FixedPageScrollingOffset
+
Check properties 'FixedPageScrolling'; 'FixedPageScrollingOffset' of ListWidget.
+
Test scope checks the property value of 'FixedPageScrolling';
'FixedPageScrollingOffset'.
+
Test if the list can be configured to only scroll on a fixed page.
Also; test if can set a scrolling offset for the fixed page. If scrolling the
list over the offset; then the list will be scroll to another page. If
scrolling the list below the offset; then the list will snap to the current page.

. Expected result
+
The properties 'FixedPageScrolling'; 'FixedPageScrollingOffset' should
be updated according to the value set.
+
The list only scrolls on a fixed page if set FixedPageScrolling is true.
And if FixedPageScrolling is true; then can scroll the list to another
page if scroll over the scrolling offset.

. Obtained result
+
Property values of 'FixedPageScrolling'; 'FixedPageScrollingOffset' are
checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_07_01[[TC_W26_07_01]]

... TestCase Description
+
Test the bindable property 'FixedPageScrolling' from the widget 'List'.
Test if the list can be configured to only scroll in a fixed page.
The preconditions are set and checked.
Drag the VerticalList (FixedPageScrolling is true) in short distance
to scroll the list to next page.
Drag the HorizontalList (FixedPageScrolling is false) in short distance
to scroll the list in few items.
Check if VerticalList scrolled to next page and HorizontalList scrolled
to next few items.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_07_01[[TC_W26_07_01\]]

.. TC_W26_07_02[[TC_W26_07_02]]

... TestCase Description
+
Test the bindable property 'FixedPageScrollingOffset' from the widget 'List'.
Test if can configure the scrolling offset for the fixed page list.
The preconditions are set and checked.
Set property FixedPageScrollingOffset to a valid value (in range 0 to 1)
to check if it work correctly.
Drag the list shorter than the FixedPageScrollingOffset to check if the
list just scroll in the current page.
Check if FixedPageScrollingOffset has value as set and the list scrolled
back to current page via screenshot compare.
Drag the list longer than the FixedPageScrollingOffset to check if the
list scrolled to the next page.
Check if the list scrolled to the next page via screenshot compare.
Set FixedPageScrollingOffset to a large value and drag the list to see
if the list scroll back to the current page.
Check if the list only stay in the current page via screenshot compare.
Set FixedPageScrollingOffset to a negative value and drag the list in
a very short distance to scroll the list to the next page.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_07_02[[TC_W26_07_02\]]

==== TC_W26_08[[TC_W26_08]]

. Testcase Description
+
properties : Enable; Touchable
+
Check properties 'Enable'; 'Touchable' of ListWidget.
+
Test scope checks the property value of 'Enable'; 'Touchable'.
+
Test the list can be enable or touchable.

. Expected result
+
The properties 'Enable'; 'Touchable' should be updated according to the value set.
+
If Enable or Touchable is true then can touch on the widget; Enable or
Touchable is false then cannot touch.

. Obtained result
+
Property values of 'Enable'; 'Touchable' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_08_01[[TC_W26_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'List'.
Test if the List can be enabled or disabled.
The preconditions are set and checked.
Set property 'Enable' of two List to false to disable the widgets; then
call swipe gesture simulation to scroll the lists.
Check if the 'Enable' has value is false; and the lists weren't scrolled
via screenshot compare.
Set property 'Enable' of two List to true to enable the widgets; then
call swipe gesture simulation to scroll the lists.
Check if the 'Enable' has value true; and the lists scrolled via
screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_08_01[[TC_W26_08_01\]]

.. TC_W26_08_02[[TC_W26_08_02]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'List'.
Test if the List can be touchable or not.
The preconditions are set and checked.
Set property 'Touchable' of two List to false to disable touching on the widgets.
Check if gesture configuration is not available and the 'Touchable' has
value is false.
Set property 'Touchable' of two List to true to enable touching on the
widgets; then call swipe gesture simulation to scroll the list.
Check if the 'Touchable' has value true; and the lists scrolled via
screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_08_02[[TC_W26_08_02\]]

==== TC_W26_09[[TC_W26_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ListWidget.
+
Test scope checks the property value of 'Visible'.
+
Test the bindable property 'Visible' to set the List Widget to be visible or invisible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget should be visible when setting 'Visible' to true and invisible
when setting 'Visible' to false.

. Obtained result
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W26_09_01[[TC_W26_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'List'.
Test if the List can be visible or invisible.
The preconditions are set and checked.
Set property 'Visible' of two List widgets to false to make the widgets invisible.
Check if two List widgets are invisible via screenshot compare.
Set property 'Visible' of two List widgets to true to make the widgets visible.
Check if two List widgets are visible via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_09_01[[TC_W26_09_01\]]

==== TC_W26_10[[TC_W26_10]]

. Testcase Description
+
properties : BufferSize; UpdateTriggerOffset
+
Check properties 'BufferSize'; 'UpdateTriggerOffset' of ListWidget.
+
Test scope checks the property value of 'BufferSize'; 'UpdateTriggerOffset'.
+
Test if the list is loaded dynamically; we can configure the number of elements
to be kept in list buffer by setting BufferSize; and can configure the distance
to trigger to reload new items into the list by setting UpdateTriggerOffset.

. Expected result
+
The properties 'BufferSize'; 'UpdateTriggerOffset' should be updated according
to the value set.
+
When scrolling the list reaches the trigger offset; the new data will be
loaded into the list buffer.

. Obtained result
+
Property values of 'BufferSize'; 'UpdateTriggerOffset' are checked through
Getproperty in TTFIS.

. Related Test cases

.. TC_W26_10_01[[TC_W26_10_01]]

... TestCase Description
+
Test the bindable property 'BufferSize' from the widget 'List'.
Test if can configure the number of elements to be kept in list buffer.
The preconditions are set and checked.
Set BufferSize of the dynamic list to 0 to check if Window element size is
set to the only ViewPort size.
Swipe the dynamic list to trigger to send the ListDateProviderReqMsg.
Check if BufferSize has value as set and WindowElementSize has value is
ViewPort size of the list.
Set BufferSize of the dynamic list to a number in list range to change
Window element size.
Swipe the dynamic list to trigger to send the ListDateProviderReqMsg.
Check if BufferSize has value as set and WindowElementSize has value is
Viewport plus BufferSize.
Set BufferSize of the dynamic list to over the max size of list to check
if Window element size is set to the max size of list.
Swipe the dynamic list to trigger to send the ListDateProviderReqMsg.
Check if BufferSize has value as set and WindowElementSize has value
is max size of the list.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_10_01[[TC_W26_10_01\]]

.. TC_W26_10_02[[TC_W26_10_02]]

... TestCase Description
+
Test the bindable property 'UpdateTriggerOffset' from the widget 'List'.
Test if can configure the distance to trigger to reload new items into list.
The preconditions are set and checked.
Reset WindowElementSize in ListLinear data model to check if its value
changed or not in the next steps.
Swipe the dynamic list to scroll the list reaching default trigger offset
to send the ListDateProviderReqMsg command.
Check if ListDateProviderReqMsg was sent via GetAndResetWindowElementSize command.
Set UpdateTriggerOffset of the dynamic list to greater than default to
reduce the distance to trigger to load new data.
Drag the list less than the update trigger distance to see if the
ListDateProviderReqMsg wasn't sent.
Check if UpdateTriggerOffset has value as set and the ListDateProviderReqMsg
wasn't sent.
Set UpdateTriggerOffset of the dynamic list to greater than BufferSize
to reduce the update trigger distance to 0 items.
Drag the list only one item to trigger sending ListDateProviderReqMsg
command to load new data.
Check if UpdateTriggerOffset has value as set and ListDateProviderReqMsg
was sent via GetAndResetWindowElementSize command.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_10_02[[TC_W26_10_02\]]

==== TC_W26_11[[TC_W26_11]]

. Testcase Description
+
property : DragAndSwipeOnNeed
+
Check property 'DragAndSwipeOnNeed' of ListWidget.
+
Test scope checks the property value of 'DragAndSwipeOnNeed'.
+
Test if DragAndSwipeOnNeed is true then drag and swipe will be dynamically
disabled when a new touch session starts if all items are visible.

. Expected result
+
The property 'DragAndSwipeOnNeed' should be updated according to the value set.
+
If the list has full visible items; then drag and swipe is enabled if
DragAndSwipeOnNeed is true and vice versa.

. Obtained result
+
Property values of 'DragAndSwipeOnNeed' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W26_11_01[[TC_W26_11_01]]

... TestCase Description
+
Test the bindable property 'DragAndSwipeOnNeed' from the widget 'List'.
Test if it is true then drag and swipe will be dynamically disabled when
a new touch session starts if all items are visible.
The preconditions are set and checked.
Set DragAndSwipeOnNeed of a full visible items list to true to disable
drag and swipe gesture.
Check if Drag and Swipe gesture of the list is not configured via gesture check.
Set DragAndSwipeOnNeed of a full visible items list to false to enable
drag and swipe gesture.
Check if Drag and Swipe gesture of the list is configured via gesture check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W26_11_01[[TC_W26_11_01\]]


=== List Widget 2D: Scrollbar

==== UI Design

The Scrollbar is a feature of ListWidget2D.

There are three couples of List-Scrollbar: VList-VScrollbar; HList-HScrollbar; HShortList-HScrollBar_ShortList.

ListScrollbar scene is designed as below:

image::images/ListScrollbarScene.png[title="ListScrollbar Scene"]


==== TC_W30_01[[TC_W30_01]]

. Testcase Description
+
property : Swipe
+
Check property 'Swipe' of ListWidget.
+
Test the bindable property 'Swipe' from the widget 'List' and the non-bindable property 'KnobDragMode' from the widget 'ScrollBarWidget2D'.
+
The property 'Swipe' (True or False) is tested with test cases for LinearList.
+
'Swipe' is set to true by default because the purpose of this testing scope is to test 'Swipe' combines with 'KnobDragMode'.
+
Test the possibility of scrolling in two modes:
+
- ListPosition: follows the current position of list.
+
- PointerPosition: follows the current position of knob.

. Expected result
+
Check the animation of knob as configured KnobDragMode when swipping the list via screenshot compare.

. Obtained result
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W30_01_01[[TC_W30_01_01]]

... TestCase Description
+
Test the bindable property 'Swipe' from the widget 'List'.
+
Test the non-bindable property 'KnobDragMode' from the widget 'ScrollBarWidget2D'.
+
The preconditions are set and checked.
+
Check the initial state with a screenshot compare.
+
Simulate swipe action on HList to scroll the scrollbar in mode ListPosition.
+
Check the action via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W30_01_01[[TC_W30_01_01\]]

.. TC_W30_01_02[[TC_W30_01_02]]

... TestCase Description
+
Test the bindable property 'Swipe' from the widget 'List'.
+
Test the non-bindable property 'KnobDragMode' from the widget 'ScrollBarWidget2D'.
+
The preconditions are set and checked.
+
Simulate swipe action on VList to scroll the scrollbar in mode PointerPosition.
+
Check the action via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W30_01_02[[TC_W30_01_02\]]


==== TC_W30_02[[TC_W30_02]]

. Testcase Description
+
property : ScrollbarAlwaysVisible
+
Check property 'ScrollbarAlwaysVisible' of ListWidget.
+
Test scope checks the property value of 'ScrollbarAlwaysVisible'.
+
Test the bindable property 'ScrollbarAlwaysVisible' from the widget 'List' about
the visibility of scrollbar.

. Expected result
+
The property 'ScrollbarAlwaysVisible' should be updated according to the value set.
+
The scrollbar is visible or invisible by setting 'ScrollbarAlwaysVisible' of ListWidget.

. Obtained result
+
Property values of 'ScrollbarAlwaysVisible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W30_02_01[[TC_W30_02_01]]

... TestCase Description
+
Test the bindable property 'ScrollbarAlwaysVisible' from the widget 'List'.
+
Test if the list can set the scrollbar invisible or visible.
+
The preconditions are set and checked.
+
First; set property 'ScrollbarAlwaysVisible' of list widgets to false to make the scrollbar of the short list invisible.
+
Then; set property 'ScrollbarAlwaysVisible' of list widgets to true to make the scrollbar always visible.
+
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W30_02_01[[TC_W30_02_01\]]

=== ListCombination Widget 2D

==== UI Design

The UI designed for ListCombination Widget 2D to estimate how well other widgets
work as an item of a list widget by composite.

The ListCombination scene consists of 5 pages corresponding to the widgets as shown below:

- 1: ButtonInList
- 2: ButtonTextColorInList
- 3: GroupButtonInList
- 3: ImageEffectInList
- 5: RichTextInList

image::images/ButtonInList.png[title="ButtonInList Scene"]
image::images/ButtonTextColorInList.png[title="ButtonTextColorInList Scene"]
image::images/GroupButtonInList.png[title="GroupButtonInList Scene"]
image::images/ImageEffectInList.png[title="ImageEffectInList Scene"]
image::images/RichTextInList.png[title="RichTextInList Scene"]

==== TC_W25_04[[TC_W25_04]]

. Testcase Description
+
property : Touchable; DisabledTouching; DoubleTap; PressHold; PressRepeat
+
Check property 'Touchable'; 'DisabledTouching'; 'DoubleTap'; 'PressHold' and 'PressRepeat' from the widget 'Button' as an item of List widget.
+
Test scope checks the property value of 'Touchable'; 'DisabledTouching'; 'DoubleTap'; 'PressHold' and 'PressRepeat'.
+
Test by changing the value of 'Touchable' to true to make button able to touch.
+
Test by changing the value of 'DisabledTouching' to true to make button able to touch even though button is disable.
+
Test by changing the value of 'DoubleTap' to true to make button able to double tap.
+
Test by changing the value of 'PressHold' to true to make button able to hold in a specific time.
+
Test by changing the value of 'PressRepeat' to true to make button able to press repeat in a specific time.

. Expected result
+
The property 'Touchable'; 'DisabledTouching'; 'DoubleTap'; 'PressHold' and 'PressRepeat'
should be updated according to the value set.
+
The property 'Touchable' should make the button able to touch according to the value of properties respectively.
+
The property 'DisabledTouching' should make the button able to touch according to the value of properties respectively.
+
The property 'DoubleTap' should make the button able to double tap according to the value of properties respectively.
+
The property 'PressHold' should the button able to hold according to the value of properties respectively.
+
The property 'PressRepeat' should the button able to press repeat according to the value of properties respectively.

. Obtained result
+
Property values of 'Touchable'; 'DisabledTouching'; 'DoubleTap'; 'PressHold' and 'PressRepeat' are checked through Getproperty and touch event on TTFIS.

. Related Test cases

.. TC_W25_04_01[[TC_W25_04_01]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'Button' as an item ofList widget.
Test if widgets 'Button' can be touch or not.
The preconditions are set and checked.
First set property 'Touchable' of Button to false to make the widget untouchable
And set widget of Button to true to make the widget touchable.
Next; touch button of widget modified above and checked this action.
Via catching and verifying a message in the combination of HALL code and TTFis.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_04_01[[TC_W25_04_01\]]

.. TC_W25_04_02[[TC_W25_04_02]]

... TestCase Description
+
Test the bindable property 'DisabledTouching' from the widget 'Button' as an item of List
widget.
Test if widgets can be touch when 'DisabledTouching' are enabled and disabled.
The preconditions are set and checked.
First set property 'DisabledTouching' of a widget 'Button'
to false to make the widget untouchable and true to make the widget touchable.
Next; touch button of widget modified above and checked this action
via catching and verifying a message in the combination of HALL code and TTFis.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_04_02[[TC_W25_04_02\]]

.. TC_W25_04_03[[TC_W25_04_03]]

... TestCase Description
+
Test the bindable property 'DoubleTap' from the widget 'Button' as an item of List widget.
Test if widgets can be double tap when 'DoubleTap' is disabled and vice versa.
The preconditions are set and checked.
First; set 'DoubleTap' to false to change the hold time in gesture configuration to 0.
Then set 'DoubleTap' to true to make the widget DoubleTap again.
Call DoubleTap gesture simulation to see if the widget can simulate a double tap.
Check these actions via property check; gesture check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_04_03[[TC_W25_04_03\]]

.. TC_W25_04_04[[TC_W25_04_04]]

... TestCase Description
+
Test the bindable property 'PressHold' combined with the non-bindable property
'TimerConfiguration' from the
widget 'Button' as an item of List widget.
The property 'PressHold' does not support long press gesture. Long press could only be
tested
through 'TimerConfiguration' with enShortAndLongTimer value.
The preconditions are set and checked.
Test Long Press gesture when 'PressHold' is TRUE and 'TimerConfiguration' as
enShortAndLongTimer.
And test Long Press when 'PressHold' is FALSE; 'TimerConfiguration' as enNoTimer.
Call LongPress gesture simulation to check if the Widget reacts with press and hold.
Check these actions via property check; gesture check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_04_04[[TC_W25_04_04\]]

.. TC_W25_04_05[[TC_W25_04_05]]

... TestCase Description
+
Test the bindable property 'PressRepeat' combined with the non-bindable property
'TimerConfiguration' from the
widget 'Button' as an item of List widget.
The property 'PressRepeat' does not support repeat press gesture. Repeat press could only
be tested
through 'TimerConfiguration' with enPrimarySecondaryRepeatTime value.
The preconditions are set and checked.
Test Repeat Press gesture when 'PressRepeat' is TRUE and 'TimerConfiguration' as
enPrimarySecondaryRepeatTime.
And test when 'PressRepeat' is FALSE with 'TimerConfiguration' as enNoTimer for a Press.
Call LongPress gesture simulation to see if the widget can simulate a press and repeat.
Check these actions via property check; gesture check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_04_05[[TC_W25_04_05\]]

==== TC_W25_06[[TC_W25_06]]

. Testcase Description
+
property : ActiveNormalTextColor; OutlineColorConfiguration
+
Check property 'ActiveNormalTextColor'; 'OutlineColorConfiguration'
from the widget 'ButtonTextColor' as an item of List widget.
+
Test scope checks the property value of 'ActiveNormalTextColor'; 'OutlineColorConfiguration'.
+
Test by changing the value of 'ActiveNormalTextColor' to some RGBA colors.
+
Test by changing the value of 'OutlineColorConfiguration' to false and true.

. Expected result
+
The property 'ActiveNormalTextColor'; 'OutlineColorConfiguration' should be
updated according to the value set.
+
The color of button must be changed according to the value of properties respectively.

. Obtained result

. Related Test cases

.. TC_W25_06_01[[TC_W25_06_01]]

... TestCase Description
+
Test the bindable property 'ActiveNormalTextColor' from the widget
'ButtonTextColor' as an item of List widget.
Test the possibility of changing the color of the property mentioned above.
The preconditions are set and checked.
Set the property 'ActiveNormalTextColor' of ButtonTextColorWidget to another
value to change its color.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_06_01[[TC_W25_06_01\]]

.. TC_W25_06_02[[TC_W25_06_02]]

... TestCase Description
+
Test the bindable property 'OutlineColorConfiguration' from the widget
'ButtonTextColor' as an item of List widget.
The property 'OutlineColorConfiguration' is bindable but not dynamic.
Test if the property 'OutlineColorConfiguration' can affect to itself and to TextWidget.
The preconditions are set and checked.
Set property 'OutlineColorConfiguration' of the widget 'ButtonTextColor'
to apply the effect to TextWidget.
Check the above action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_06_02[[TC_W25_06_02\]]

==== TC_W25_12[[TC_W25_12]]

. Testcase Description
+
property : Bitmap; Color
+
Check property 'Bitmap'; 'Color' from the widget 'ImageEffect'
as an item of List widget.
+
Test scope checks the property value of 'Bitmap'; 'Color'.
+
Test by sending a message to HALL code to trigger the implemented code
of changing widgets' appearance.
+
Test by changing the value of 'Color' to some RGBA colors.

. Expected result
+
The property 'Bitmap'; 'Color' should be
updated according to the value set.
+
The new bitmap and color must be changed according to the value of properties respectively.

. Obtained result

. Related Test cases

.. TC_W25_12_01[[TC_W25_12_01]]

... TestCase Description
+
Test the bindable property 'Bitmap' from the widget 'ImageEffect'
as an item of List widget.
Test the possibility of changing the appearance of the property "Bitmap".
The preconditions are set and checked.
Sending a message to HALL code to trigger the implemented code
of changing widgets' appearance.
Check the above action via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_12_01[[TC_W25_12_01\]]

.. TC_W25_12_02[[TC_W25_12_02]]

... TestCase Description
+
Test the bindable property 'Color' from the widget 'ImageEffect'
as an item of List widget.
Test the possibility of changing the appearance of the property "Color".
The preconditions are set and checked.
Set the property 'Color' of ImageEffect2D to another value to change its Color.
Check the above action via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_12_02[[TC_W25_12_02\]]

==== TC_W25_40[[TC_W25_40]]

. Testcase Description
+
property : Source; Style
+
Check property 'Source'; 'Style' from the widget 'RichText'
as an item of List widget.
+
Test scope checks the property value of 'Source'; 'Style'.
+
Test by changing the value of 'Source' to a valid path id;
plain text combined with HTML text includes an image.
+
Test by changing the value of 'Style' to some common cases that
multiple CSS properties is combined.

. Expected result
+
The property 'Source'; 'Style' should be updated according to the value set.
+
The text source and style must be loaded and displayed as specified format.

. Obtained result

. Related Test cases

.. TC_W25_40_01[[TC_W25_40_01]]

... TestCase Description
+
Test the bindable property 'Source' from the widget 'RichText' as an item of List widget.
Test if the widget can load the string and can load the file by giving a file with id.
Test by changing the value of property 'Source'.
The preconditions are set and checked.
Set property 'Source' respectively to a valid path id; plain text combined with HTML text
includes an image to see if the source is changed.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_40_01[[TC_W25_40_01\]]

.. TC_W25_40_02[[TC_W25_40_02]]

... TestCase Description
+
Test the bindable property 'TextStyle' from the widget 'RichText' as an item of List widget.
Test some combination cases of CSS properties that RTW supports.
The preconditions are set and checked.
First; set property 'Style' to some common cases that multiple CSS properties is combined
to see if the combination is display correctly.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W25_40_02[[TC_W25_40_02\]]

=== Mesh Widget 2D

==== UI Design

The UI designed for Mesh Widget 2D includes six composites marked as the below figure:

- 1: NoneFitMesh
- 2: ActualFitMesh
- 3: MaxFitMesh
- 4: NoneOffset
- 5: OffsetX
- 6: OffsetY

image::images/MeshScene.png[title="Mesh Scene"]

==== TC_W17_01[[TC_W17_01]]

. Testcase Description
+
property : Rotation
+
Check property 'Rotation' of MeshWidget.
+
Test scope checks the property value of 'Rotation'.
+
Test by changing the value (standard values and positive/negative minimum and maximum float values) of 'Rotation' to
rotate the nodes linked with the widgets around a configured rotation axis at a configured origin.
+
Test the effects of Fit strategy and Origin offset properties by setting the same value of Rotation on each different widgets.

. Expected result
+
The property 'Rotation' should be updated according to the value set.
+
The rendernodes; bitmapnodes should be rotated according to the value set.

. Obtained result
+
Property values of 'Rotation' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W17_01_01[[TC_W17_01_01]]

... TestCase Description
+
Test the bindable property 'Rotation' from the widget 'MeshWidget'.
The rotation will be taken around a configured rotation axis at a configured origin.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
First checking 'Rotation' with some standard values.
Then test the bindable property 'Rotation' combined with non-bindable properties 'FitStrategy' and 'OriginOffset'.
Last test checks for positive/negative minimum and maximum float values.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W17_01_01[[TC_W17_01_01\]]

==== TC_W17_02[[TC_W17_02]]

. Testcase Description
+
property : CameraDistance
+
Check property 'CameraDistance' of MeshWidget.
+
Test scope checks the property value of 'CameraDistance'.
+
Test by changing the value (standard values and positive/negative minimum and maximum float values) of 'CameraDistance'
to change the distance from the origin to the image plane; it will affect to the image size.

. Expected result
+
The property 'CameraDistance' should be updated according to the value set.
+
The rendernodes; bitmapnodes should be resized according to the value set.

. Obtained result
+
Property values of 'CameraDistance' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W17_02_01[[TC_W17_02_01]]

... TestCase Description
+
Test the bindable property 'CameraDistance' from the widget 'MeshWidget'.
Test if the distance from the origin to the image plane affects the image size.
The preconditions are set and checked.
First checking 'CameraDistance' with some standard values.
Last test checks for positive/negative minimum and maximum float values.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W17_02_01[[TC_W17_02_01\]]

==== TC_W17_03[[TC_W17_03]]

. Testcase Description
+
property : CustomHorizontalOrigin
+
Check property 'CustomHorizontalOrigin' of MeshWidget.
+
Test scope checks the property value of 'CustomHorizontalOrigin'.
+
Test by changing the value (standard values and positive/negative minimum and maximum float values) of
'CustomHorizontalOrigin' to change the perspective projection looks by horizontal direction.

. Expected result
+
The property 'CustomHorizontalOrigin' should be updated according to the value set.
+
The rendernodes; bitmapnodes should be shown the perspective projection looks correctly according to the value set.

. Obtained result
+
Property values of 'CustomHorizontalOrigin' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W17_03_01[[TC_W17_03_01]]

... TestCase Description
+
Test the bindable property 'CustomHorizontalOrigin' from the widget 'MeshWidget'.
The 'CustomHorizontalOrigin' will be able to normalize the perspective projection looks by horizontal direction
(the default origin point is center on the horizontal direction).
Test if the Horizontal Origin affects to the perspective projection looks.
The preconditions are set and checked.
First checking 'CustomHorizontalOrigin' with some standard values.
Last test checks for positive/negative minimum and maximum float values.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W17_03_01[[TC_W17_03_01\]]

==== TC_W17_04[[TC_W17_04]]

. Testcase Description
+
property : CustomVerticalOrigin
+
Check property 'CustomVerticalOrigin' of MeshWidget.
+
Test scope checks the property value of 'CustomVerticalOrigin'.
+
Test by changing the value (standard values and positive/negative minimum and maximum float values) of
'CustomVerticalOrigin' to change the perspective projection looks by vertical direction.

. Expected result
+
The property 'CustomVerticalOrigin' should be updated according to the value set.
+
The rendernodes; bitmapnodes should be shown the perspective projection looks correctly according to the value set.

. Obtained result
+
Property values of 'CustomVerticalOrigin' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W17_04_01[[TC_W17_04_01]]

... TestCase Description
+
Test the bindable property 'CustomVerticalOrigin' from the widget 'MeshWidget'.
The 'CustomVerticalOrigin' will be able to normalize the perspective projection looks by vertical direction
(the default origin point is center on the vertical direction).
Test if the Vertical Origin affects to the perspective projection looks.
The preconditions are set and checked.
First checking 'CustomVerticalOrigin' with some standard values.
Last test checks for positive/negative minimum and maximum float values.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W17_04_01[[TC_W17_04_01\]]

==== TC_W17_09[[TC_W17_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of MeshWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to set the Mesh Widget to be visible or invisible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget should be visible when setting 'Visible' to true and invisible when setting 'Visible' to false.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W17_09_01[[TC_W17_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'MeshWidget'.
Test if widgets can be set to invisible or visible.
The preconditions are set and checked.
First; set property 'Visible' property of ActualFitMesh to false to make the widget
invisible.
Then; set property 'Visible' property of ActualFitMesh to true to make the widget
visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W17_09_01[[TC_W17_09_01]]

=== Meter Widget 2D

==== TC_W43_01[[TC_W43_01]]

. Testcase Description
+
property : CurrentValue
+
Test cases to check the CurrentValue property with minimal and maximal possible float values.

. Expected result
+
The meter widget should be updated according to the CurrentValue provided.

. Obtained result
+
Checked the CurrentValue through TTFIS.

. Related Test cases

.. TC_W43_01_01[[TC_W43_01_01]]

... Widget being tested
+
meterWidget_clock and MeterWidget_AntiClock.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W43_01_01[[TC_W43_01_01\]]

.. TC_W43_01_02[[TC_W43_01_02]]

... Widget being tested
+
meterWidget_clock and MeterWidget_AntiClock.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W43_01_02[[TC_W43_01_02\]]

==== TC_W43_02[[TC_W43_02]]

. Testcase Description
+
property : Visible
+
Test case to check the Visible property through TTFIS.
+
Test will hide/unhide widgets by setting Visible to false/true.

. Expected result
+
Widgets should be hidden if Visible is set to TRUE (1); and visible if Visible is set to FALSE (0)

. Obtained result
+
Check the visibility of widgets through screenshots comparison.

. Related Test cases

.. TC_W43_02_01[[TC_W43_02_01]]

... Widget being tested
+
meterWidget_clock and MeterWidget_AntiClock.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W43_02_01[[TC_W43_02_01\]]

==== TC_W43_03[[TC_W43_03]]

. Testcase Description
+
property : Enable
+
Test case to check the Enable property through TTFIS.
+
Test will disable/enable widgets by setting Enable to false/true.

. Expected result
+
Widgets should be enabled if Enable property is set to TRUE (1); and disabled if Enable is set to FALSE (0)

. Obtained result
+
Check Meters response with changes of CurrentValue when Enable is set and unset. Check through screenshots comparison.

. Related Test cases

.. TC_W43_03_01[[TC_W43_03_01]]

... Widget being tested
+
meterWidget_clock and MeterWidget_AntiClock.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W43_03_01[[TC_W43_03_01\]]

=== NodeControl Widget 2D

==== UI Design

The UI designed for NodeControl Widget 2D includes different node type place in different layout type to expose them outside composites or to change them.

image::images/NodeControlScene.png[title="NodeControl Scene"]

==== TC_W77_01[[TC_W77_01]]

. Testcase Description
+
property : AlphaValue
+
Check property 'AlphaValue' of NodeControlWidget.
+
Test scope checks the property value of 'AlphaValue'.
+
Test by changing the value of 'AlphaValue' to change degree of transparency of nodes.

. Expected result
+
The property 'AlphaValue' should be updated according to the value set.
+
The transparency of the button is changed according to the value set from 0 to 1.

. Obtained result
+
Property values of 'AlphaValue' are checked through TTFIS.
+
Check node's transparency through screenshots comparison.

. Related Test cases

.. TC_W77_01_01[[TC_W77_01_01]]

... TestCase Description
+
Test the bindable property 'AlphaValue' from the widget 'NodeControlWidget2D'.
Test if the nodes can change transparency.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set 'AlphaValue' to some value to see the change degree of transparency of node.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_01_01[[TC_W77_01_01\]]

==== TC_W77_02[[TC_W77_02]]

. Testcase Description
+
property : BoundingRectangle
+
Check property 'BoundingRectangle' of NodeControlWidget.
+
Test scope checks the property value of 'BoundingRectangle'.
+
Test by changing the value of 'BoundingRectangle' can change size of the layout.

. Expected result
+
The property 'BoundingRectangle' should be updated according to the value set.
+
The node is moved and changed size of layout according to the value set.

. Obtained result
+
Property values of 'BoundingRectangle' are checked through TTFIS.
+
Check size of layout through screenshots comparison.

. Related Test cases

.. TC_W77_02_01[[TC_W77_02_01]]

... TestCase Description
+
Test the bindable property 'BoundingRectangle' from the widget 'NodeControlWidget2D'.
Test 'BoundingRectangle' can change size of the node's layout.
The preconditions are set and checked.
Set property 'BoundingRectangle' to change size of node's layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_02_01[[TC_W77_02_01\]]

==== TC_W77_03[[TC_W77_03]]

. Testcase Description
+
property : ColumnSpan/RowSpan
+
Check property 'ColumnSpan/RowSpan' of NodeControlWidget.
+
Test scope checks the property value of 'ColumnSpan/RowSpan'.
+
Test by changing the value of 'ColumnSpan/RowSpan' to span item over multiple cells in grid layout.

. Expected result
+
The property 'ColumnSpan/RowSpan' should be updated according to the value set.
+
Grid layout spans item over multiple cells according to value set.
+
If set max or exceed value grid layout span node over maximum cells.

. Obtained result
+
Property values of 'ColumnSpan/RowSpan' are checked through TTFIS.
+
Check node's position through screenshots comparison.

. Related Test cases

.. TC_W77_03_01[[TC_W77_03_01]]

... TestCase Description
+
Test the bindable property 'ColumnSpan/RowSpan' from the widget 'NodeControlWidget2D'.
Test 'ColumnSpan/RowSpan' can allow to span an item over multiple cells in grid layout.
The preconditions are set and checked.
In 1st action; set property 'ColumnSpan' and 'RowSpan' to some value to span an item over
2 cells in grid layout.
In 2nd action; set property 'ColumnSpan' and 'RowSpan' to exceed column number of grid
layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_03_01[[TC_W77_03_01\]]

==== TC_W77_04[[TC_W77_04]]

. Testcase Description
+
property : Column
+
Check property 'Column' of NodeControlWidget.
+
Test scope checks the property value of 'Column'.
+
Test by changing the value of 'Column' to change position of node inside grid layout.

. Expected result
+
The property 'Column' should be updated according to the value set.
+
The nodes are placed the collumn according to the value set.
+
If set max or exceed value the node is placed in maximum column.
+
. Obtained result
+
Property values of 'Column' are checked through TTFIS.
+
Check node's position through screenshots comparison.

. Related Test cases

.. TC_W77_04_01[[TC_W77_04_01]]

... TestCase Description
+
Test the bindable property 'Column' from the widget 'NodeControlWidget2D'.
Test 'Column' can set column of grid layout contains nodes.
The preconditions are set and checked.
In 1st action; set 'Column' property to some value to change node's position inside grid
layout.
In 2nd action; set 'Column' property to exceed column number of grid layout to change
node's position inside grid
layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_04_01[[TC_W77_04_01\]]

==== TC_W77_05[[TC_W77_05]]

. Testcase Description
+
property : Row
+
Check property 'Row' of NodeControlWidget.
+
Test scope checks the property value of 'Row'.
+
Test by changing the value of 'Row' to change position of node inside grid layout.

. Expected result
+
The property 'Row' should be updated according to the value set.
+
The nodes are placed the row according to the value set.
+
If set max or exceed value the node is placed in maximum row.

. Obtained result
+
Property values of 'Row' are checked through TTFIS.
+
Check node's position through screenshots comparison.

. Related Test cases

.. TC_W77_05_01[[TC_W77_05_01]]

... TestCase Description
+
Test the bindable property 'Row' from the widget 'NodeControlWidget2D'.
Test 'Row' can set column of grid layout contains nodes.
The preconditions are set and checked.
In 1st action; set 'Row' property to some value change node's position inside grid layout.
In 2nd action; set 'Row' property to exceed row number of grid layout to change node's
position inside grid
layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_05_01[[TC_W77_05_01\]]

==== TC_W77_06[[TC_W77_06]]

. Testcase Description
+
property : HorizontalAlignment
+
Check property 'HorizontalAlignment' of NodeControlWidget.
+
Test scope checks the property value of 'HorizontalAlignment'.
+
Test by changing the value of 'HorizontalAlignment' to horizontally align nodes inside layout.

. Expected result
+
The property 'HorizontalAlignment' should be updated according to the value set.
+
The nodes are placed a position in the layout according to the value set.

. Obtained result
+
Property values of 'HorizontalAlignment' are checked through TTFIS.
+
Check node's position through screenshots comparison.

. Related Test cases

.. TC_W77_06_01[[TC_W77_06_01]]

... TestCase Description
+
Test the bindable property 'HorizontalAlignment' from the widget 'NodeControlWidget2D'.
Test 'HorizontalAlignment' can horizontally align nodes inside layout.
The preconditions are set and checked.
Set property 'HorizontalAlignment' to some value to change position of node in layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_06_01[[TC_W77_06_01\]]

==== TC_W77_09[[TC_W77_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of NodeControlWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value TRUE/FALSE of 'Visible' to make node visible/invisible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The property 'Visible' makes node visible or invisible as configured.

. Obtained result
+
Property values of 'Visible' are checked through TTFIS.
+
Check node is visible/invisible through screenshots comparison.

. Related Test cases

.. TC_W77_09_01[[TC_W77_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget NodeControl.
Test if widgets can be set to invisible or visible.
The preconditions are set and checked.
First; set property 'Visible' to false to make the widgets invisible.
Then; set property 'Visible' to true to make the widgets visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_09_01[[TC_W77_09_01\]]

==== TC_W77_10[[TC_W77_10]]

. Testcase Description
+
property : VerticalAlignment
+
Check property 'VerticalAlignment' of NodeControlWidget.
+
Test scope checks the property value of 'VerticalAlignment'.
+
Test by changing the value of 'VerticalAlignment' to horizontally align nodes inside layout.

. Expected result
+
The property 'VerticalAlignment' should be updated according to the value set.
+
The nodes are placed a position in the layout according to the value set.

. Obtained result
+
Property values of 'VerticalAlignment' are checked through TTFIS.
+
Check node's position through screenshots comparison.

. Related Test cases

.. TC_W77_10_01[[TC_W77_10_01]]

... TestCase Description
+
Test the bindable property 'VerticalAlignment' from the widget 'NodeControlWidget2D'.
Test 'VerticalAlignment' vertically align text node inside layout.
The preconditions are set and checked.
Set 'VerticalAlignment' to some value to change node's position in layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_10_01[[TC_W77_10_01\]]

==== TC_W77_11[[TC_W77_11]]

. Testcase Description
+
property : RenderOrderRank
+
Check property 'RenderOrderRank' of NodeControlWidget.
+
Test scope checks the property value of 'RenderOrderRank'.
+
Test by changing the value of 'RenderOrderRank' to make the nodes display in order from low to high.

. Expected result
+
The property 'RenderOrderRank' should be updated according to the value set.
+
The node will be placed above the another if 'RenderOrderRank' value is higher.
+
If negative value is set; the node is invisible.

. Obtained result
+
Property values of 'RenderOrderRank' are checked through TTFIS.
+
Check node's position through screenshots comparison.

. Related Test cases

.. TC_W77_11_01[[TC_W77_11_01]]

... TestCase Description
+
Test the bindable property 'RenderOrderRank' from the widget NodeControl.
Test 'RenderOrderRank' can make the nodes display in order from low to high.
The preconditions are set and checked.
In 1st action; set property 'RenderOrderRank' of RenderingOrderRankNodeControl_1 to place
SolidRenderingNode_1
above SolidRenderingNode_2.
In 2nd action; set property 'RenderOrderRank' of RenderingOrderRankNodeControl_2 to check
the node does not
display.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_11_01[[TC_W77_11_01\]]

==== TC_W77_12[[TC_W77_12]]

. Testcase Description
+
property : Position
+
Check property 'Position' of NodeControlWidget.
+
Test scope checks the property value of 'Position'.
+
Test by changing the value of 'Position' to change node's position.

. Expected result
+
The property 'Position' should be updated according to the value set.
+
Node's position is changed according to the value set.

. Obtained result
+
Property values of 'Position' are checked through TTFIS.
+
Check node's position through screenshots comparison.

. Related Test cases

.. TC_W77_12_01[[TC_W77_12_01]]

... TestCase Description
+
Test the bindable property 'Position' from the widget NodeControl.
Test if the Node can change positions on scene.
The preconditions are set and checked.
Set property 'Position' to some value to change node's position.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_12_01[[TC_W77_12_01\]]

==== TC_W77_13[[TC_W77_13]]

. Testcase Description
+
property : Size
+
Check property 'Size' of NodeControlWidget.
+
Test scope checks the property value of 'Size'.
+
Test by changing the value of 'Size' to change node's size.

. Expected result
+
The property 'Size' should be updated according to the value set.
+
The node's size is changed according to the value set.

. Obtained result
+
Property values of 'Size' are checked through TTFIS.
+
Check node's size through screenshots comparison.

. Related Test cases

.. TC_W77_13_01[[TC_W77_13_01]]

... TestCase Description
+
Test the bindable property 'Size' from the widget NodeControl.
Test 'Size' property can change size.
The preconditions are set and checked.
Set property 'Size' to some value to change size.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_13_01[[TC_W77_13_01\]]

==== TC_W77_14[[TC_W77_14]]

. Testcase Description
+
property : MinimumSize
+
Check property 'MinimumSize' of NodeControlWidget.
+
Test scope checks the property value of 'MinimumSize'.
+
Test by changing the value of 'MinimumSize' to make node's size is not smaller than 'MinimumSize'.

. Expected result
+
The property 'MinimumSize' should be updated according to the value set.
+
The node's size is not smaller than 'MinimumSize' value.

. Obtained result
+
Property values of 'MinimumSize' are checked through TTFIS.
+
Check node's size through screenshots comparison.

. Related Test cases

.. TC_W77_14_01[[TC_W77_14_01]]

... TestCase Description
+
Test the bindable property 'MinimumSize' from the widget 'NodeControlWidget2D'.
Test 'MinimumSize' property to can set minimum size of nodes.
The preconditions are set and checked.
Set 'MinimumSize' property of TextNodeBoundingRectangleControl to some value to see the
node's size is not smaller
than minimum size.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_14_01[[TC_W77_14_01\]]

==== TC_W77_15[[TC_W77_15]]

. Testcase Description
+
property : MaximumSize
+
Check property 'MaximumSize' of NodeControlWidget.
+
Test scope checks the property value of 'MaximumSize'.
+
Test by changing the value of 'MaximumSize' to make node's size is not larger than 'MaximumSize'.

. Expected result
+
The property 'MaximumSize' should be updated according to the value set.
+
The node's size is not larger than 'MaximumSize' value.

. Obtained result
+
Property values of 'MaximumSize' are checked through TTFIS.
+
Check node's size through screenshots comparison.

. Related Test cases

.. TC_W77_15_01[[TC_W77_15_01]]

... TestCase Description
+
Test the bindable property 'MaximumSize' from the widget 'NodeControlWidget2D'.
Test 'MaximumSize' property to can set maximum size of nodes.
The preconditions are set and checked.
Set 'MaximumSize' property of TextNodeBoundingRectangleControl to some value to see the
node's size is not greater
than maximumsize.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_15_01[[TC_W77_15_01\]]

==== TC_W77_16[[TC_W77_16]]

. Testcase Description
+
property : StretchBehavior
+
Check property 'StretchBehavior' of NodeControlWidget.
+
Test scope checks the property value of 'StretchBehavior'.
+
Test by changing the value of 'StretchBehavior' to resize node to fill layout.

. Expected result
+
The property 'StretchBehavior' should be updated according to the value set.
+
The node is resized to fill layout according to the value set.

. Obtained result
+
Property values of 'StretchBehavior' are checked through TTFIS.
+
Check node is resize to fill layout through screenshots comparison.

. Related Test cases

.. TC_W77_16_01[[TC_W77_16_01]]

... TestCase Description
+
Test the bindable property 'StretchBehavior' from the widget NodeControl.
Test 'StretchBehavior' property can stretch nodes.
The preconditions are set and checked.
Set property 'StretchBehavior' to some value to resize node to fill layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_16_01[[TC_W77_16_01\]]

==== TC_W77_17[[TC_W77_17]]

. Testcase Description
+
property : Scale
+
Check property 'Scale' of NodeControlWidget.
+
Test scope checks the property value of 'Scale'.
+
Test by changing the value of 'Scale' to change node's size.

. Expected result
+
The property 'Scale' should be updated according to the value set.
+

. Obtained result
+
Property values of 'Scale' are checked through TTFIS.
+
Check node's size through screenshots comparison.

. Related Test cases

.. TC_W77_17_01[[TC_W77_17_01]]

... TestCase Description
+
Test the bindable property 'Scale' from the widget 'NodeControlWidget2D'.
Test 'Scale' property can change the node's size.
The preconditions are set and checked.
Set property 'Scale'to some value to change node's size or reverse node's direction.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_17_01[[TC_W77_17_01\]]

==== TC_W77_18[[TC_W77_18]]

. Testcase Description
+
property : Rotation/PivotPoint
+
Check property 'Rotation/PivotPoint' of NodeControlWidget.
+
Test scope checks the property value of 'Rotation/PivotPoint'.
+
Test by changing the value of 'Rotation/PivotPoint' to rotate node in local coordinate space.

. Expected result
+
The property 'Rotation/PivotPoint' should be updated according to the value set.
+
The node is rotated around the new pivot point according to the value set.

. Obtained result
+
Property values of 'Rotation/PivotPoint' are checked in TTFIS.
+
Check node is rotated around new center point through screenshots comparison.

. Related Test cases

.. TC_W77_18_01[[TC_W77_18_01]]

... TestCase Description
+
Test the bindable property 'Rotation/PivotPoint' from the widget 'NodeControlWidget2D'.
Test 'Rotation' property can rotate node in local coordinate space.
The preconditions are set and checked.
Set 'PivotPoint' to some value to change position of center point for 'Rotation'.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_18_01[[TC_W77_18_01\]]

==== TC_W77_19[[TC_W77_19]]

. Testcase Description
+
property : Margin
+
Check property 'Margin' of NodeControlWidget.
+
Test scope checks the property value of 'Margin'.
+
Test by changing the value of 'Margin' to create space between node and layout.

. Expected result
+
The property 'Margin' should be updated according to the value set.
+
The node is given the space between node and layout according to the  value set.

. Obtained result
+
Property values of 'Margin' are checked through TTFIS.
+
Check node is created space between layout through screenshots comparison.

. Related Test cases

.. TC_W77_19_01[[TC_W77_19_01]]

... TestCase Description
+
Test the bindable property 'Margin' from the widget NodeControl.
Test 'Margin' property can create left space between node and layout.
The preconditions are set and checked.
In 1st action; set property 'Margin' to some positive value to create space between node
and layout.
In 2nd action; set property 'Margin' to some negative value to move nodes out of layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_19_01[[TC_W77_19_01\]]

==== TC_W77_20[[TC_W77_20]]

. Testcase Description
+
property : LayoutDirection
+
Check property 'LayoutDirection' of NodeControlWidget.
+
Test scope checks the property value of 'LayoutDirection'.
+
Test by changing the value of 'LayoutDirection' to adjust layout direction.

. Expected result
+
The property 'LayoutDirection' should be updated according to the value set.
+
The node is placed on the right side of layout if 'LayoutDirection' was set to 'RightToLeft'.
+
The node is placed on the left side of layout if 'LayoutDirection' was set to 'LeftToRight'.

. Obtained result
+
Property values of 'LayoutDirection' are checked through TTFIS.
+
Check layout direction throught screenshot compare.

. Related Test cases

.. TC_W77_20_01[[TC_W77_20_01]]

... TestCase Description
+
Test the bindable property 'LayoutDirection' from the widget NodeControl.
Test 'LayoutDirection' property can adjust layout direction.
The preconditions are set and checked.
In 1st action; set 'LayoutDirection' to 'RightToLeft' to adjust layout direction from
right to left.
In 2nd action; set 'LayoutDirection' to 'LeftToRight' to adjust layout direction from left
to right.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_20_01[[TC_W77_20_01\]]

==== TC_W77_21[[TC_W77_21]]

. Testcase Description
+
property : ScopeMask
+
Check property 'ScopeMask' of NodeControlWidget.
+
Test scope checks the property value of 'ScopeMask'.
+
Test by changing the value of 'ScopeMask' to a value that contains the required scope of Camera 'ScopeMask' to check for render.

. Expected result
+
The property 'ScopeMask' should be updated according to the value set.
+
If 'ScopeMask' of node is valid;they will be able to render if not they will not be allowed to render.

. Obtained result
+
Property values of 'ScopeMask' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W77_21_01[[TC_W77_21_01]]

... TestCase Description
+
Test the bindable property 'ScopeMask' from the widget Scope.
Test 'ScopeMask' could be applied to the widget about rendering.
The preconditions are set and checked.
In 1st action; set property 'ScopeMask' of RenderingOrderRankNodeControl_1 to 5;
RenderingOrderRankNodeControl_2
to 9 to render.
In 2nd action; set property 'ScopeMask' of RenderingOrderRankNodeControl_1 and
RenderingOrderRankNodeControl_2 to
0 to prevent node from rendering.
In 3rd action; set property 'ScopeMask' value for node to check whether this property can
be assigned to its MAX
value.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W77_21_01[[TC_W77_21_01\]]

=== OPS Widget 2D

==== TC_W44_03[[TC_W44_03]]

. Testcase Description
+
property : OPSDisplayMode
+
Test case to check the OPSDisplayMode value property through TTFIS.
+
Test Checks for the different OPS Display Modes in the OPS widget. Ex Front only; rear only; around 360 etc.

. Expected result
+
Depending upon the change in the OPSDisplayMode it should change the OPS mode.

. Obtained result
+
Checked the OPSDisplayMode through TTFIS and also verified with bit map comparison.

. Related Test cases

.. TC_W44_03_01[[TC_W44_03_01]]

... Widget being tested
+
OPSWidget2D.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W44_03_01[[TC_W44_03_01\]]

.. TC_W44_03_02[[TC_W44_03_02]]

... Widget being tested
+
OPSWidget2D.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W44_03_02[[TC_W44_03_02\]]

.. TC_W44_03_03[[TC_W44_03_03]]

... Widget being tested
+
OPSWidget2D.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W44_03_03[[TC_W44_03_03\]]

==== TC_W44_04[[TC_W44_04]]

. Testcase Description
+
property : TrailerConnected
+
Test case to check the TrailerConnected  value property through TTFIS.
+
Test Checks for the trailer connected for the vehicle to display in the OPS widget.

. Expected result
+
Depending upon the TrailerConnected value trailor connected state should be changed.

. Obtained result
+
Checked the TrailerConnected through TTFIS and also verified with bit map comparison.

. Related Test cases

.. TC_W44_04_01[[TC_W44_04_01]]

... Widget being tested
+
OPSWidget2D.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W44_04_01[[TC_W44_04_01\]]

.. TC_W44_04_02[[TC_W44_04_02]]

... Widget being tested
+
OPSWidget2D.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W44_04_02[[TC_W44_04_02\]]

.. TC_W44_04_03[[TC_W44_04_03]]

... Widget being tested
+
OPSWidget2D.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W44_04_03[[TC_W44_04_03\]]

.. TC_W44_04_03[[TC_W44_04_04]]

... Widget being tested
+
OPSWidget2D.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W44_04_04[[TC_W44_04_04\]]


=== PanelSlider Widget 2D

==== TC_W14_14[[TC_W14_14]]

. Testcase Description
+
property : Left;Right;Top;Bottom Slide +
To enable the all the slides and try to close or toggle the other slides by opening one slide.
+
The test performs the Slide on Left for example open through specified co-ordinates and then open; close; toggle the opposite slide from that.


. Expected result
+
Slider should update according to the button press in slide..

. Obtained result
+
Button present in the slides work as expected..

. Related Test cases

.. TC_W14_14_01[[TC_W14_14_01]]

... Widget being tested
+
Left Slider/Slider.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_14_01[[TC_W14_14_01\]]

.. TC_W14_14_02[[TC_W14_14_02]]

... Widget being tested
+
Right Slider/Slider.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_14_02[[TC_W14_14_02\]]

.. TC_W14_14_03[[TC_W14_14_03]]

... Widget being tested
+
Bottom Slider/Slider.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_14_03[[TC_W14_14_03\]]

.. TC_W14_14_04[[TC_W14_14_04]]

... Widget being tested
+
Top Slider/Slider.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_14_04[[TC_W14_14_04\]]


=== ProgressBar Widget 2D

==== TC_W13_06[[TC_W13_06]]

. Testcase Description
+
property : Total Value
+
Check property 'TotalValue' of widget Progress Bar.
+
Test Description
+
Test scope checks the property values of 'TotalValue'; with changing values in 'BufferValue';
'CurrentValue'. Setting values for one Progess Bar widget(HL_ProgressBarWidget2D) will also effect
the other progress bars(HR_ProgressBarWidget2D;VTop_RoundedCornerPBar; VBottom_RoundedCornerPBar) as
the property values used are same. Check with minimum values; maximum values and negative values for
'TotalValue'.

. Expected result
+
The Total value of the progress bar(HL_ProgressBarWidget2D) value should be updated according to the
'TotalValue' Property value. 'BufferVaue' and 'CurrentValue' are fully functional with the change in
'TotalValue' Property.

. Obtained result
+
Property values checked for 'TotalValue'; 'BufferValue' and 'CurrentValue' through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W13_06_01[[TC_W13_06_01]]

... Testcase Description
+
Test checks the property values of 'TotalValue' with Float minimum values; with changing values in
'BufferValue'; 'CurrentValue'. Set 'TotalValue' to lowest Float minimum value meaningful. Set the same
minimal value to 'BufferValue' and  half of the value  to 'CurrentValue'. After updating the values;
buffer should be seen as filled to 100% and current value should be filled to 50% in progress bar.
Bitmap comparison test is performed.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_06_01[[TC_W13_06_01\]]

.. TC_W13_06_02[[TC_W13_06_02]]

... Testcase Description
+
Test checks the property values of 'TotalValue' with Float maximum values.  Set 'TotalValue' to
hightest Float maximum value meaningful. Set the same maximum value to 'BufferValue' and  half of the
value  to 'CurrentValue'. After updating the values; buffer should be seen as filled to 100% and
current value should be filled to 50% in progress bar. Bitmap comparison test is performed.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_06_02[[TC_W13_06_02\]]

.. TC_W13_06_03[[TC_W13_06_03]]

... Testcase Description
+
Test checks the property values of 'TotalValue' with float negitive values.  Set 'TotalValue' to 1000.
Set 700 value to 'BufferValue' and 300 value  to 'CurrentValue'(to have a visible progress bar that
should not change). Set 'TotalValue'; 'BufferValue' and 'CurrentValue' to float negative values.
After updating the 'TotalValue'; 'BufferValue' and 'CurrentValue' the values should not be changed to
negitive values.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_06_03[[TC_W13_06_03\]]

==== TC_W13_07[[TC_W13_07]]

. Testcase Description
+
property : Current Value

Check property 'CurrentValue' of widget Progress Bar.

Test scope checks the property values of 'CurrentValue'; with changing values in 'TotalValue'.
Setting values for one Progess Bar widget(HL_ProgressBarWidget2D) will also effect the other progress
bars(HR_ProgressBarWidget2D;VTop_RoundedCornerPBar; VBottom_RoundedCornerPBar) as the property values
used are same. Check with minimum values; maximum values and negitive values for 'CurrrentValue'.

. Expected result
+
The 'CurrentValue' of the progress bar(HL_ProgressBarWidget2D)value should be updated according to
the 'CurrentValue'property value. 'BufferVaue' and 'TotalValue' are fully functional with the change
in 'CurrentValue' Property.

. Obtained result
+
Property values checked for 'TotalValue'; 'BufferValue' and 'CurrentValue' through Getproperty in TTFIS and
also by bitmap comparison.

. Related Test cases

.. TC_W13_07_01[[TC_W13_07_01]]

... Testcase Description
+
Test checks the property values of 'CurrentValue' with Float minimum values; with changing values in
'TotalValue'. Set 'TotalValue' to lowest Float minimum value meaningful. Set the same minimal value
to 'CurrentValue'.After updating the values; 'CurrentValue' should be filled to 100% in progress bar.
Bitmap comparison test is performed.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_07_01[[TC_W13_07_01\]]

.. TC_W13_07_02[[TC_W13_07_02]]

... Testcase Description
+
Test checks the property values of 'CurrentValue' with Float maximum values; with changing values in
'TotalValue'. Set 'TotalValue' to highest Float maximum value meaningful. Set the same
maximum value to 'CurrentValue'. After updating the values; 'CurrentValue' should be filled to 100% in
progress bar.  Bitmap comparison test is performed.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_07_02[[TC_W13_07_02\]]

.. TC_W13_07_03[[TC_W13_07_03]]

... Testcase Description
+
Test checks the property values of 'CurrentValue' with float negitive values.  Set Total value to
1000. Set 700 value to 'BufferValue' and 300 value  to 'CurrentValue'(to have a visible progress bar
that should not change). Set 'TotalValue'; 'BufferValue' and 'CurrentValue' to float negitive values.
After updating the values; 'CurrentValue' it should not be changed to negative values. Check property
value 'CurrentValue' to be set to the negative value.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_07_03[[TC_W13_07_03\]]

.. TC_W13_07_04[[TC_W13_07_04]]

... Testcase Description
+
Test checks the property values of 'CurrentValue'; where 'CurrentValue' set to value greater than
'TotalValue' leads to a change for 'CurrentValue' to 'TotalValue' properties. Set 'TotalValue' to 100. Set 150 value
to 'CurrentValue'. After updating the values; the property 'CurrentValue' must be
changed to 'TotalValue' to 100.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_07_04[[TC_W13_07_04\]]

==== TC_W13_08[[TC_W13_08]]

. Testcase Description
+
property : Buffer Value
+
Check property 'BufferValue' of widget Progress Bar.
+
Test scope checks the property values of 'BufferValue'; with changing values in 'TotalValue' and
'CurrentValue'. Setting values for one Progess Bar widget(HL_ProgressBarWidget2D) will also effect
the other progress bars(HR_ProgressBarWidget2D;VTop_RoundedCornerPBar; VBottom_RoundedCornerPBar) as
the property values used are same. Check with minimum values; maximum values and negitive values for
'BufferValue'.

. Expected result
+
The 'BufferValue' of the progress bar(HL_ProgressBarWidget2D)value should be updated according to the
'BufferValue' property value and also bit comparison test should be performed.

. Obtained result
+
The 'BufferValue' is checked through TTFIS and also verified with the bitmap comparison.

. Related Test cases

.. TC_W13_08_01[[TC_W13_08_01]]

... Testcase Description
+
Test checks the property values of 'BufferValue' with Float minimum values; with changing values in
'CurrentValue'. Set 'BufferValue' to lowest Float minimum value meaningful. Set the same minimal
value to 'CurrentValue'. After updating the values; 'BufferValue' and 'CurrentValue' should be filled to
100% in progress bar. Bitmap comparison test is performed.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_08_01[[TC_W13_08_01\]]

.. TC_W13_08_02[[TC_W13_08_02]]

... Testcase Description
+
Test checks the property values of 'BufferValue' with Float maximum values. Set Initially
'TotalValue' to highest meaningful value. Check Intial state for 'TotalValue' whether it is set to the
maximum value. Set 'BufferValue' to maximum value meaningful. BufferValue should be filled to 100%
in progress bar. Check the value 'BufferValue' through GetProperty. Bitmap comparison test is performed.

+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_08_02[[TC_W13_08_02\]]

.. TC_W13_08_03[[TC_W13_08_03]]

... Testcase Description
+
Test checks the property values of 'BufferValue' with Float negative values. Set 'TotalValue' to 1000. Set 700 value to 'BufferValue' and 300
value to 'CurrentValue' (to have a visible progress bar that should not change). Set 'TotalValue' and 'BufferValue' to negative
values. After updating the 'BufferValue'; 'CurrentValue' it should not be changed to negative values. Check property value 'BufferValue' to be set
to the same negitive value as set.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_08_03[[TC_W13_08_03\]]

.. TC_W13_08_04[[TC_W13_08_04]]

... Testcase Description
+
Test checks the property values of 'BufferValue' where 'BufferValue' set to value greater than 'TotalValue' leads to a change for 'BufferValue' to
'TotalValue'. Set 'TotalValue' to 100. Set 150 value to 'BufferValue'. After updating the 'BufferValue'; 'TotalValue' the property 'BufferValue'
must be changed to 'TotalValue' to 100.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_08_04[[TC_W13_08_04\]]

==== TC_W13_11[[TC_W13_11]]

. Testcase Description
+
property : StartTimer
+
To check the StartTimer property through TTFIS.
+
Test case are used to show on starting the timer to update the current position in progressbar.

. Expected result
+
It should be able to set and get the StartTimer property through TTFIS.

. Obtained result
+
The  StartTimer is checked through TTFIS and also verified with the bitmap comparison.

. Related Test cases

.. TC_W13_11_01[[TC_W13_11_01]]

... Widget being tested
+
btn_TimerStart/btn
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_11_01[[TC_W13_11_01\]]

.. TC_W13_11_02[[TC_W13_11_02]]

... Widget being tested
+
btn_TimerStart/btn
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W13_11_02[[TC_W13_11_02\]]


=== RichText Widget 2D

==== UI Design

The UI designed for RichText Widget 2D includes seven composites marked as the below figure:

- 1: URLRichText1
- 2: StringRichText
- 3: StringRichText2
- 4: URLRichText3
- 5: StringRichText1
- 6: URLRichText
- 7: URLRichText2

image::images/RichTextScene.png[title="RichText Scene"]

==== TC_W40_01[[TC_W40_01]]

. Testcase Description
+
property : Color
+
Check property 'Color' of RichTextWidget.
+
Test scope checks the property value of 'Color'.
+
Test by changing the value of 'Color' to different colors.
+
Test in case of the HTML style Color is defined or undefined in the property Style or Source.

. Expected result
+
The property 'Color' should be updated according to the value set.
+
The color of text should be overruled if the HTML style Color is defined in the property Style or Source.

. Obtained result
+
Property values of 'Color' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W40_01_01[[TC_W40_01_01]]

... TestCase Description
+
Test the bindable property 'Color' from the widget 'RichText'.
Test if the color of the text can be changed by changing the value of property 'Color'.
The color of text will be overruled if the HTML style Color is defined in the property
Style or Source.
The preconditions are set and checked.
Set property 'Color' to different colors in case of the HTML style Color is undefined to
change its color.
Then; set property 'Color' to different colors in case the HTML style Color is defined to
see if the color is changed.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_01_01[[TC_W40_01_01\]]

==== TC_W40_02[[TC_W40_02]]

. Testcase Description
+
property : TextStyle
+
Check property 'TextStyle' of RichTextWidget.
+
Test scope checks the property value of 'TextStyle'.
+
Test by changing the value of 'TextStyle' to different styles.

. Expected result
+
The property 'TextStyle' should be updated according to the value set.
+
The style of text defined by property 'TextStyle' should be used if the HTML style wasn't
specified by the Style or Source property.

. Obtained result
+
Property values of 'TextStyle' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W40_02_01[[TC_W40_02_01]]

... TestCase Description
+
Test the bindable property 'TextStyle' from the widget 'RichText'.
Test if the style of the text can be changed by changing the value of property
'TextStyle'.
The style of text will be used if the HTML style wasn't specified by the Style or Source
property.
The preconditions are set and checked.
Set property 'TextStyle' to different styles to see if the style changed as configured.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_02_01[[TC_W40_02_01\]]

==== TC_W40_03[[TC_W40_03]]

. Testcase Description
+
property : Source
+
Check property 'Source' of RichTextWidget.
+
Test scope checks the property value of 'Source'.
+
Test by changing the value of 'Source' to strings included configuration from
property StyleSheetURL; Candera path or id; plain text combined with
HTML text; text string includes HTML tags; text includes an image.

. Expected result
+
The property 'Source' should be updated according to the value set.
+
The text should be loaded successfully with the specified styles.

. Obtained result
+
Property values of 'Source' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W40_03_01[[TC_W40_03_01]]

... TestCase Description
+
Test the bindable property 'Source' and non-bindable property 'StyleSheetURL' from the
widget 'RichText'.
Test if all the Html tags that the widget supports could load the configuration from
property StyleSheetURL.
Test by changing the value of property 'Source'.
The preconditions are set and checked.
Set property 'Source' to different tags to see if the text displayed as tag configured.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_03_01[[TC_W40_03_01\]]

.. TC_W40_03_02[[TC_W40_03_02]]

... TestCase Description
+
Test the bindable property 'Source' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the widget can load the file by giving a Candera path or id.
Test while property 'SourceType' set to URL.
The preconditions are set and checked.
First; set property 'Source' to an invalid Candera path; id and file name to see if the
file is loaded.
Then; set property 'Source' to a valid Candera path; id and file name to see if the file
is loaded.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_03_02[[TC_W40_03_02\]]

.. TC_W40_03_03[[TC_W40_03_03]]

... TestCase Description
+
Test the bindable property 'Source' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the widget can load the string by changing the value of property 'Source'.
Test while property 'SourceType' set to String.
The preconditions are set and checked.
First; set property 'Source' respectively to a valid path id; plain text combined with
HTML text;
text string includes HTML tags; text includes an image to see if the style changed.
Then; set property 'Source' to HTML texts defined styles to see if the text loaded with
the specified styles.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_03_03[[TC_W40_03_03\]]

==== TC_W40_04[[TC_W40_04]]

. Testcase Description
+
property : Style
+
Check property 'Style' of RichTextWidget.
+
Test scope checks the property value of 'Style'.
+
Test by changing the value of 'Style' to different CSS attributes value that the widget supports.
+
Test the attributes independently and test some common cases that attributes are combined.

. Expected result
+
The property 'Style' should be updated according to the value set.
+
The style attributes defined by property 'Style' should override the style attributes defined by property StyleSheetUrl.
+
The style of text should be changed according to the predefined configurations get from CSS attributes.

. Obtained result
+
Property values of 'Style' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W40_04_01[[TC_W40_04_01]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Check if the background-color CSS property can render correctly.
Test by changing the value of the property 'Style' and property 'SourceType' set to URL or
String.
The preconditions are set and checked.
Set property 'Style' respectively to different background-color value formats to
see if the background-colors follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_01[[TC_W40_04_01\]]

.. TC_W40_04_02[[TC_W40_04_02]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS color attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different color value formats
to see if the widget colors follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_02[[TC_W40_04_02\]]

.. TC_W40_04_03[[TC_W40_04_03]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS display attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different display value formats to see
if the display behaviors follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_03[[TC_W40_04_03\]]

.. TC_W40_04_04[[TC_W40_04_04]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS font-family attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different text font value formats to
see if the widget fonts follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_04[[TC_W40_04_04\]]

.. TC_W40_04_05[[TC_W40_04_05]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS font-size attribute can render correctly.
Test by changing the value of property 'Style' and the property 'SourceType' set to URL or
String.
The preconditions are set and checked.
Set property 'Style' respectively to different text size value formats to
see if the widget sizes follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_05[[TC_W40_04_05\]]

.. TC_W40_04_06[[TC_W40_04_06]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS height attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different text height value formats to
see if the widget heights follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_06[[TC_W40_04_06\]]

.. TC_W40_04_07[[TC_W40_04_07]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS height attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different line-height value formats
to see if the height of lines follows the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_07[[TC_W40_04_07\]]

.. TC_W40_04_08[[TC_W40_04_08]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS margin attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different margin value formats
to see if all the margins follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_08[[TC_W40_04_08\]]

.. TC_W40_04_09[[TC_W40_04_09]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS margin-left attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different left margin value formats
to see if all the left margins follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_09[[TC_W40_04_09\]]

.. TC_W40_04_10[[TC_W40_04_10]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS margin-right attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different right margin value formats
to see if all the right margins follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_10[[TC_W40_04_10\]]

.. TC_W40_04_11[[TC_W40_04_11]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS margin-top attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different top margin value formats
to see if all the top margins follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_11[[TC_W40_04_11\]]

.. TC_W40_04_12[[TC_W40_04_12]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS margin-bottom attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different bottom margin value formats
to see if all the bottom margins follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_12[[TC_W40_04_12\]]

.. TC_W40_04_13[[TC_W40_04_13]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS padding attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different padding value formats to
see if all the extra spaces within an element follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_13[[TC_W40_04_13\]]

.. TC_W40_04_14[[TC_W40_04_14]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS padding-left attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different left padding value formats
to see if all the left spaces follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_14[[TC_W40_04_14\]]

.. TC_W40_04_15[[TC_W40_04_15]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS padding-right attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different right padding value formats
to see if all the right spaces follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_15[[TC_W40_04_15\]]

.. TC_W40_04_16[[TC_W40_04_16]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS padding-top attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different top padding value formats
to see if all the top spaces follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_16[[TC_W40_04_16\]]

.. TC_W40_04_17[[TC_W40_04_17]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS padding-bottom attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different bottom padding value formats
to see if all the bottom spaces follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_17[[TC_W40_04_17\]]

.. TC_W40_04_19[[TC_W40_04_19]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS text-align attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different text-align value formats to see if
all the widget horizontal alignments follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_19[[TC_W40_04_19\]]

.. TC_W40_04_20[[TC_W40_04_20]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS overflow attribute can render correctly.
Test by changing the value of property the 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different overflow value formats
to see if all widgets are overflowed follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_20[[TC_W40_04_20\]]

.. TC_W40_04_21[[TC_W40_04_21]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS text-overflow attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different text-overflow value formats
to see if all overflowed texts follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_21[[TC_W40_04_21\]]

.. TC_W40_04_22[[TC_W40_04_22]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS white-space attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different white-space value formats
to see if all the whitespaces are collapsed follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_22[[TC_W40_04_22\]]

.. TC_W40_04_23[[TC_W40_04_23]]

... TestCase Description
+
Test the bindable property 'Style' and non-bindable property 'SourceType' from the widget
'RichText'.
Test if the CSS width attribute can render correctly.
Test by changing the value of the property 'Style' and the property 'SourceType' set to
URL or String.
The preconditions are set and checked.
Set property 'Style' respectively to different width value formats
to see if all the widget widths follow the specified configuration.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_23[[TC_W40_04_23\]]

.. TC_W40_04_24[[TC_W40_04_24]]

... TestCase Description
+
Test the bindable property 'Style' from the widget 'RichText'.
Test some combination cases of CSS properties that RTW supports.
The preconditions are set and checked.
First; set property 'Style' to cases that multiple CSS properties are combined
to see if the combination is displayed correctly.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_04_24[[TC_W40_04_24\]]

==== TC_W40_08[[TC_W40_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of RichTextWidget.
+
Test scope checks the property value of 'Enable'.
+
Test by changing the value of 'Enable' to true to make the widget enable
or false to make the widget disable.

. Expected result
+
The property 'Enable' should be updated according to the value set.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W40_08_01[[TC_W40_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'RichText'.
Test if the property 'Enable' can be set to true or false.
The preconditions are set and checked.
First; set 'Enable' to false to disabled the widget.
Then set 'Enable' to true to enable the widget again.
Check the action via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_08_01[[TC_W40_08_01\]]

==== TC_W40_09[[TC_W40_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of RichTextWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to false or true.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The text should be turned to invisible when 'Visible' is set to False.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W40_09_01[[TC_W40_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'RichText'.
Test if the text is invisible when 'Visible' is set to false.
The preconditions are set and checked.
First; set 'Visible' of RichTextWidget to false to make the widget invisible.
Then; set 'Visible' of RichTextWidget to true to make the widget visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W40_09_01[[TC_W40_09_01\]]


=== RichTextHighlight Widget 2D

==== UI Design

The UI designed for RichTextHighlight Widget 2D includes six composites marked as the below figure:

1- RTHL_SrcStringMask

2- RTHL_SrcStringMask_1

3- RTHL_SrcURLMask

4- RTHL_SrcURLMask_1

5- RTHL_SrcStringRange

6- RTHL_SrcURLRange_1

image::images/RichTextHighlightScene.png[title="RichTextHighlight Scene"]

==== TC_W48_01[[TC_W48_01]]

. Testcase Description
+
property : HighlightText
+
Check property 'HighlightText' of RichTextHighlightWidget.
+
Test scope checks the property value of 'HighlightText'.
+
Test by changing the value of 'HighlightText' to different strings in different configurations.

. Expected result
+
The property 'HighlightText' should be updated according to the value set.
+
Based on the configuration from non-bindable properties 'HighlightMode'; 'CaseSensitive'; 'AllOccurrences'.
The widget should highlight one or all occurrences; sensitive or insensitive pattern;
or should highlight single characters or a range of characters specified by an index list.

. Obtained result
+
Property values of 'HighlightText' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W48_01_01[[TC_W48_01_01]]

... TestCase Description
+
Test the bindable property 'HighlightText' and non-bindable properties 'HighlightMode';
'CaseSensitive'; 'AllOccurrences' from the widget 'RichTextHighlight'.
Test if the widget should highlight one or all occurrences; sensitive or insensitive
pattern; or should highlight single characters or a range of characters specified by an index list.
Test by changing the value of property 'HighlightText'.
The preconditions are set and checked.
Set property 'HighlightText' respectively to different strings in different configurations
to see if the widget can provide the right highlighted string.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W48_01_01[[TC_W48_01_01\]]

==== TC_W48_02[[TC_W48_02]]

. Testcase Description
+
property : BackgroundColor
+
Check property 'BackgroundColor' of RichTextHighlightWidget.
+
Test scope checks the property value of 'BackgroundColor'.
+
Test by changing the value of 'BackgroundColor' to different color profiles.

. Expected result
+
The property 'BackgroundColor' should be updated according to the value set.
+
The background color of the highlighted text should be changed according to
the value of property 'BackgroundColor'.

. Obtained result
+
Property values of 'BackgroundColor' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W48_02_01[[TC_W48_02_01]]

... TestCase Description
+
Test the bindable property 'BackgroundColor' from the widget 'RichTextHighlight'.
Test if the background color of the highlighted text can be changed by changing the value
of property 'BackgroundColor'.
The preconditions are set and checked.
Set property 'BackgroundColor' to different colors to change the background color of the
text is highlighted.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W48_02_01[[TC_W48_02_01\]]

==== TC_W48_03[[TC_W48_03]]

. Testcase Description
+
property : TextColor
+
Check property 'TextColor' of RichTextHighlightWidget.
+
Test scope checks the property value of 'TextColor'.
+
Test by changing the value of 'TextColor' to different color profiles.

. Expected result
+
The property 'TextColor' should be updated according to the value set.
+
The color of the highlighted text can be changed according to the value of property 'TextColor'.

. Obtained result
+
Property values of 'TextColor' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W48_03_01[[TC_W48_03_01]]

... TestCase Description
+
Test the bindable property 'TextColor' from the widget 'RichTextHighlight'.
Test if the color of the highlighted text can be changed by changing the value of property 'TextColor'.
The preconditions are set and checked.
Set property 'TextColor' to different colors to change the color of the text is highlighted.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W48_03_01[[TC_W48_03_01\]]

==== TC_W48_08[[TC_W48_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of RichTextHighlightWidget.
+
Test scope checks the property value of 'Enable'.
+
Test by changing the value of 'Enable' to True and False.

. Expected result
+
The property 'Enable' should be updated according to the value set.
+
The highlighted feature should also be disabled if 'Enable' is disabled.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W48_08_01[[TC_W48_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'RichTextHighlight'.
Test if the highlighted feature can be disabled by changing the value of property
'Enable'.
The preconditions are set and checked.
First; set 'Enable' to false to disabled the highlight feature.
Then set 'Enable' to true to enable the highlight feature again.
Check the action via property check and via screeenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W48_08_01[[TC_W48_08_01\]]

==== TC_W48_09[[TC_W48_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of RichTextHighlightWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to True and False.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget should also be hidden if 'Visible' is disabled.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W48_09_01[[TC_W48_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'RichTextHighlight'.
Test if the widget is invisible when 'Visible' is set to false.
The preconditions are set and checked.
First; set 'Visible' of RichTextWidget to false to make the widget invisible.
Then; set 'Visible' of RichTextWidget to true to make the widget visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W48_09_01[[TC_W48_09_01\]]


=== Scope Widget 2D

==== UI Design

The UI designed for Scope Widget 2D with two groups. First group on the right; 'ApplyOnDescendents' is True
and second group on the left; 'ApplyOnDescendents' is False.
Each group is composed 'ScopeMask' with Parent scope is assigned to a group node and descendent scopes are assigned
to Text Node; that named Child Scope 1 and 2.

image::images/ScopeScene.png[title="Scope Scene"]

==== TC_W82_01[[TC_W82_01]]

. Testcase Description
+
property : ScopeMask
+
Check property 'ScopeMask' of ScopeWidget.
+
Test scope checks the property value of 'ScopeMask'.
+
Test by changing the value of 'ScopeMask' to a value that contains the required scope of Camera 'ScopeMask' to check for render
with two  instances of 'ApplyOnDescendents' is true and false.

. Expected result
+
The property 'ScopeMask' should be updated according to the value set.
+
If 'ScopeMask' of node or group is valid;
they will be able to render if not they will not be allowed to render.

. Obtained result
+
Property values of 'ScopeMask' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W82_01_01[[TC_W82_01_01]]

... TestCase Description
+
Test the bindable property 'ScopeMask' from the widget Scope.
Test 'ScopeMask' could be applied to the widget about rendering.
The preconditions are set and checked.
Set 'ScopeMask' of parent and child node with four actions to check the rendering
with two instances of 'ApplyOnDescendents' is checked and vice versa.
In 1st action; set 'ScopeMask' value for Parent node to render and with Child node to not
render.
In 2nd action; set 'ScopeMask' value for both Parent and child node to render.
In 3th action; set 'ScopeMask' value for both Parent and child node to not render.
In 4th action; set 'ScopeMask' value for Parent to not render and child node to render.
In 5th action; set 'ScopeMask' value for NonApplyChildScope_2 to check whether this
property can be assigned to its MAX value.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W82_01_01[[TC_W82_01_01\]]

==== TC_W82_02[[TC_W82_02]]

. Testcase Description
+
property : ApplyOnDescendents
+
Check property 'ApplyOnDescendents' of ScopeWidget.
+
Test scope checks the property value of 'ApplyOnDescendents'.
+
Test by changing the value of 'ApplyOnDescendents' to true and false

. Expected result
+
The property 'ApplyOnDescendents' should be updated according to the value set.
+
If 'ApplyOnDescendents' is set to true; all descendent nodes will be apply as parent node.
By that if parent 'ScopeMask' value is assigned as render or not render; descendent will be affected as that parent node.

. Obtained result
+
Property values of 'ApplyOnDescendents' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W82_02_01[[TC_W82_02_01]]

... TestCase Description
+
Test the bindable property 'ApplyOnDescendents' from the widget Scope.
Test 'ApplyOnDescendents' could be applied to the widget about inheritance of Parent Scope
with Descendent Scopes.
The preconditions are set and checked.
Set 'ApplyOnDescendents' of parent node to TRUE and FALSE with two instances of its
'ScopeMask' is rendered and vice versa.
In 1st action; set 'ApplyOnDescendents' to TRUE and 'NonApplyOnDescendents' to FALSE
and then assign their 'ScopeMask' to render.
In 2nd action; set 'ApplyOnDescendents' to TRUE and 'NonApplyOnDescendents' to FALSE
and then assign their 'ScopeMask' to not render.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W82_02_01[[TC_W82_02_01\]]

==== TC_W82_09[[TC_W82_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ScopeWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'ApplyOnDescendents' to true and false.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The property 'Visible' makes the Scope widet visible or invisible as configured.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W82_09_01[[TC_W82_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget Scope.
Test if widgets can be set to invisible or visible.
The preconditions are set and checked.
First; set property 'Visible' to false to make the widgets invisible.
Then; set property 'Visible' to true to make the widgets visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W82_09_01[[TC_W82_09_01\]]


=== ScrollBar Widget 2D

==== UI Design

The UI designed for ScrollBar Widget 2D has two scenes: one for horizontal scrollbar and one for vertical scrollbar.

There are three horizontal scrollbar widgets: ListPageHScrollBar; DynamicListJumpHScrollBar; DynamicPointerPageHScrollBar.

image::images/HorizontalScrollBarScene.png[title="Horizontal ScrollBar Scene"]

There are three vertical scrollbar widgets: DynamicListPageVScrollBar; PointerJumpVScrollBar; PointerPageVScrollBar.

image::images/VerticalScrollBarScene.png[title="Vertical ScrollBar Scene"]


==== TC_W83_01[[TC_W83_01]]

. Testcase Description
+
property : SliderSize
+
Check property 'SliderSize' of ScrollBarWidget.
+
Test scope checks the property value of 'SliderSize'.
+
Test the percentage of slider size relative to the size of slider back.
+

. Expected result
+
The knob should be updated the position corresponding to the slider size value.
+

. Obtained result
+
Property values of 'SliderSize' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W83_01_01[[TC_W83_01_01]]

... TestCase Description
+
Test the bindable property 'SliderSize' and the non-bindable property 'DynamicSliderSize' from the widget 'ScrollBarWidget2D'.
+
Test by changing the value in dynamic and non-dynamic vertical scrollbar modes.
+
The preconditions are set and checked.
+
Check the initial state with a screenshot compare.
+
Set 'SliderSize' to inbound and outbound values; when 'DynamicSliderSize' is enabled
and slider size will not take any effect.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_01_01[[TC_W83_01_01\]]

.. TC_W83_01_02[[TC_W83_01_02]]

... TestCase Description
+
Test the bindable property 'SliderSize' and the non-bindable property 'DynamicSliderSize' from the widget 'ScrollBarWidget2D'.
+
Test by changing the value in dynamic and non-dynamic horizontal scrollbar modes.
+
The preconditions are set and checked.
+
Check the initial state with a screenshot compare.
+
Set 'SliderSize' to inbound and outbound values; when 'DynamicSliderSize' is enabled
and slider size will not take any effect.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_01_02[[TC_W83_01_02\]]

==== TC_W83_02[[TC_W83_02]]

. Testcase Description
+
property : OverscrollSize
+
Check property 'OverscrollSize' of ScrollBarWidget.
+
Test scope checks the property value of 'OverscrollSize'.
+
Test the percentage of one of the overscroll areas relative to the size of slider back.
+

. Expected result
+
The property 'OverscrollSize' should be updated according to the value set.
+

. Obtained result
+
Property values of 'OverscrollSize' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W83_02_01[[TC_W83_02_01]]

... TestCase Description
+
Test the bindable property 'OverscrollSize' from the widget 'ScrollBarWidget2D'.
+
Test in vertical scrollbar widgets.
+
The preconditions are set and checked.
+
Set 'OverscrollSize' to outbound and inbound values to see if the overscroll areas changed.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_02_01[[TC_W83_02_01\]]

.. TC_W83_02_02[[TC_W83_02_02]]

... TestCase Description
+
Test the bindable property 'OverscrollSize' from the widget 'ScrollBarWidget2D'.
+
Test in horizontal scrollbar widgets.
+
The preconditions are set and checked.
+
Set 'OverscrollSize' to outbound and inbound values to see if the overscroll areas changed.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_02_02[[TC_W83_02_02\]]

==== TC_W83_08[[TC_W83_08]]

. Testcase Description
+
properties : Enable; Touchable
+
Check properties 'Enable'; 'Touchable' of ScrollBarWidget.
+
Test scope checks the property value of 'Enable'; 'Touchable'.
+

. Expected result
+
The properties 'Enable'; 'Touchable' should be updated according to the value set.
+

. Obtained result
+
Property values of 'Enable'; 'Touchable' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W83_08_01[[TC_W83_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'ScrollBarWidget2D'.
+
Test if the vertical scrollbar can be set to disable or enable.
+
The preconditions are set and checked.
+
First; set property 'Enable' of vertical scrollbar widgets to false to make the widget disable.
Then; simulate some touch actions to see if the widget are disabled.
+
Set property 'Enable' of vertical scrollbar widgets to true.
Simulate some touch actions to see if the widget are enabled again.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_01[[TC_W83_08_01\]]

.. TC_W83_08_02[[TC_W83_08_02]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'ScrollBarWidget2D'.
+
Test if the horizontal scrollbar can be set to touchable or not.
The preconditions are set and checked.
First; set property 'Touchable' of horizontal scrollbar widgets to false to make the widget non-touchable.
Simulate some touch actions to see if the widget are non-touchable.
+
Then; set property 'Touchable' of horizontal scrollbar widgets to true to make the widget touchable again.
Simulate some touch actions to see if the widget are touchable.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_02[[TC_W83_08_02\]]

.. TC_W83_08_03[[TC_W83_08_03]]

... TestCase Description
+
Test the bindable property 'Touchable' and the non-bindable property 'TrackPressMode' from the widget 'ScrollBarWidget2D'.
+
Test if the vertical scrollbar can be touched on slider in 2 modes:
+
- PageScroll: the knob scrolls the list one page up/down.
+
- JumpToTouchCoordinate: the knob scroll jumps to the touch coordinate.
+
The preconditions are set and checked.
+
Simulate touch actions on slider in 2 modes to scroll the list.
+
Check if the lists are scrolled via scrollbar as configured TrackPressMode via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_03[[TC_W83_08_03\]]

.. TC_W83_08_04[[TC_W83_08_04]]

... TestCase Description
+
Test the bindable property 'Touchable' and the non-bindable property 'TrackPressMode' from the widget 'ScrollBarWidget2D'.
+
Test if the horizontal scrollbar can be touched on slider in 2 modes:
+
- PageScroll: the knob scrolls the list one page up/down
+
- JumpToTouchCoordinate: the knob scroll jumps to the touch coordinate
+
The preconditions are set and checked.
+
Simulate touch actions on slider in 2 modes to scroll the list.
+
Check if the lists are scrolled via scrollbar as configured TrackPressMode via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_04[[TC_W83_08_04\]]

.. TC_W83_08_05[[TC_W83_08_05]]

... TestCase Description
+
Test the bindable property 'Touchable' and the non-bindable property 'AdditionalPageButtons' from the widget 'ScrollBarWidget2D'.
+
Test if the vertical scrollbar can support buttons to scroll pageup/pagedown.
+
The preconditions are set and checked.
+
Touch on the pageup/pagedown node of vertical scrollbars.
+
Check if the lists are scrolled page by page via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_05[[TC_W83_08_05\]]

.. TC_W83_08_06[[TC_W83_08_06]]

... TestCase Description
+
Test the bindable property 'Touchable' and the non-bindable property 'AdditionalPageButtons' from the widget 'ScrollBarWidget2D'.
+
Test if the horizontal scrollbar can support buttons to scroll pageup/pagedown.
+
The preconditions are set and checked.
+
Touch on the pageup/pagedown node of horizontal scrollbars.
+
Check if the lists are scroll item by item via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_06[[TC_W83_08_06\]]

.. TC_W83_08_07[[TC_W83_08_07]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'ScrollBarWidget2D'.
+
Test if the vertical scrollbar can support buttons to scroll up/down.
+
The preconditions are set and checked.
+
Touch on the up/down node of scrollbars.
+
Check if the lists are scroll item by item via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_07[[TC_W83_08_07\]]

.. TC_W83_08_08[[TC_W83_08_08]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'ScrollBarWidget2D'.
+
Test if the horizontal scrollbar can support buttons to scroll up/down.
+
The preconditions are set and checked.
+
Touch on the up/down node of scrollbars.
+
Check if the lists are scrolled via button up/down of scrollbar via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_08_08[[TC_W83_08_08\]]

==== TC_W83_09[[TC_W83_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ScrollBarWidget.
+
Test scope checks the property value of 'Visible'.
+
Test if the scrollbar can be set to invisible or visible.
+

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget should be visible when setting 'Visible' to true and invisible when setting 'Visible' to false.
+

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W83_09_01[[TC_W83_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ScrollBarWidget2D'.
+
The preconditions are set and checked.
+
First; set property 'Visible' of vertical scrollbar widgets to false to make the widget invisible.
+
Then; set property 'Visible' of vertical scrollbar widgets to true to make the widget visible again.
+
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W83_09_01[[TC_W83_09_01\]]


=== ScrollableText Widget 2D

==== TC_W20_01[[TC_W20_01]]

. Testcase Description
+
Test loading content of a file by bindable property 'FileName' and test
scrolling behavior from the widget ScrollableText through properties: 'TextSource'; 'Filename'; 'Text'.
+
Test case/s to check switch text contents between Text and FileName. +
Test case/s to check Scrolling functionality in Scrollable Text Widget through
APPHMI_TEST_04_ScrollScrollableTextWidget trace command. +
Test case/s to check misuse case when loading from a wrong Filename.

. Expected result
+
It should be able to set and get the 'FileName'; 'Text' and 'TextSource' property through TTFIS.
+
Depending upon the ListChangeType of scroll trace by APPHMI_TEST_04_ScrollScrollableTextWidget cmd;
the text should be scrolled as actions.

. Obtained result
+
Property check and Screen comparison is used to check the binable of these properties.
+
Screen comparison is used to check the functionality of scrolling in Scrollable Text Widget.

. Related Test cases

.. TC_W20_01_01[[TC_W20_01_01]]

... Loading content of a file by Filename and Scrolling behavior in Scrollable Text widget is tested.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W20_01_01[[TC_W20_01_01\]]

.. TC_W20_01_02[[TC_W20_01_02]]

... Switch text contents between Text and FileName in Scrollable Text widget is tested.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W20_01_02[[TC_W20_01_02\]]


==== TC_W20_02[[TC_W20_02]]

. Testcase Description
+
Test behavior of property 'TextAreaSize' when changing during runtime.
+
Test case/s to check TextAreaSize functionality in Scrollable Text Widget through truncating the value
of height by half in the Scrollable Text Widget and make sure the scrolling functionality still work properly.

. Expected result
+
Depending upon the truncation of height by half; the Scrollable Text should showing as the Text Size is set.
+
Depending upon APPHMI_TEST_04_ScrollScrollableTextWidget cmd; the text should be scrolled as actions.

. Obtained result
+
Screen comparison is used to check the functionality of 'TextAreaSize' in Scrollable Text Widget.

. Related Test cases

.. TC_W20_02_01[[TC_W20_02_01]]

... Property 'TextAreaSize' in Scrollable Text widget is tested.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W20_02_01[[TC_W20_02_01\]]

==== TC_W20_03[[TC_W20_03]]

. Testcase Description
+
Test behavior of property 'AlphaValue' with possible float values that control transparency of the text.
+
Test case/s to check AlphaValue functionality in Scrollable Text Widget with Minimum & Maximum float values.

. Expected result
+
Depending upon the float value is set; the Text in widget will update as config.
+
Text should be Transparent if it set to '0' and should be Opaque if it set to '1'.

. Obtained result
+
Screen comparison is used to check the functionality of 'AlphaValue' in Scrollable Text Widget.

. Related Test cases

.. TC_W20_03_01[[TC_W20_03_01]]

... Property 'AlphaValue' in Scrollable Text widget is tested.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W20_03_01[[TC_W20_03_01\]]

==== TC_W20_04[[TC_W20_04]]

. Testcase Description
+
Test behavior of property 'Enable' when changing during runtime.
+
Test case/s to check Enable functionality in Scrollable Text Widget through Disable by set the property to '0'.

. Expected result
+
Depending upon set the property to '0'; disable widget only disable touch;
scrolling or changing TextSource is still possible.

. Obtained result
+
Property check is used to check the functionality of 'Enable' in Scrollable Text Widget.

. Related Test cases

.. TC_W20_04_01[[TC_W20_04_01]]

... Property 'Enable' in Scrollable Text widget is tested.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W20_04_01[[TC_W20_04_01\]]

==== TC_W20_05[[TC_W20_05]]

. Testcase Description
+
Test behavior of property 'Visible' when changing during runtime.
+
Test case/s to check TextAreaSize functionality in Scrollable Text Widget through Disable by set the property to '0'.

. Expected result
+
Depending upon set the property to '0'; disable widget should make the widget invisible and vice versa.

. Obtained result
+
Screen comparison is used to check the functionality of 'Visible' in Scrollable Text Widget.

. Related Test cases

.. TC_W20_05_01[[TC_W20_05_01]]

... Property 'Visible' in Scrollable Text widget is tested.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W20_05_01[[TC_W20_05_01\]]

==== TC_W20_06[[TC_W20_06]]

. Testcase Description
+
Test the color; tab are displayed as configuration and rendering of provided text
input for the same as required.
+

. Expected result
+
Test behavior of Non-Bindable 'ColorTable' and 'TabStopTable' properties; and the control
characters (\c1;\\\\c1;\t1;\\\\t1) are expected to be present as part of provided input.
Few other control characters such as ?;#;& can be removed or added with a meaningful sentence
like testing the rendering of control characters if required.

. Obtained result
+
Screen comparison is used to check the defined text is displayed with colors;
tabs and the control characters are present as input in Scrollable Text Widget.

. Related Test cases

.. TC_W20_06_01[[TC_W20_06_01]]

... Non-Bindable properties 'ColorTable'; 'TabStopTable'; and presenting control
charaters in Scrollable Text widget are tested.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W20_06_01[[TC_W20_06_01\]]


=== ScrollableRichText Widget 2D

==== UI Design

The UI designed for ScrollableRichText Widget 2D includes the view of richtext and a scrollbar
marked as the below figures:

image::images/RichTextScrollableMultiLang_Page1.png[title="ScrollableRichText Initial Scene"]
image::images/RichTextScrollableMultiLang_Page2.png[title="ScrollableRichText Scene Page 2"]
image::images/RichTextScrollableMultiLang_Page3.png[title="ScrollableRichText Scene Page 3"]
image::images/RichTextScrollableMultiLang_Page4.png[title="ScrollableRichText Scene Page 4"]
image::images/RichTextScrollableMultiLang_Page5.png[title="ScrollableRichText Scene Page 5"]
image::images/RichTextScrollableMultiLang_Page6.png[title="ScrollableRichText Scene Page 6"]
image::images/RichTextScrollableMultiLang_Page7.png[title="ScrollableRichText Scene Page 7"]
image::images/RichTextScrollableMultiLang_Page8.png[title="ScrollableRichText Scene Page 8"]
image::images/RichTextScrollableMultiLang_Page9.png[title="ScrollableRichText Scene Page 9"]


==== TC_W39_01[[TC_W39_01]]

. Testcase Description
+
property : Drag
+
Check property 'Drag' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'Drag'.
+
Test by changing the value of 'Drag' to false and true respectively.
Then test if the richtext can be dragged or not through Drag simulation.

. Expected result
+
The property 'Drag' should be updated according to the value set.
+
The rich-text can only be dragged if the 'Drag' property is enabled.

. Obtained result
+
Property values of 'Drag' are checked through Getproperty in TTFIS;
+
The results of actions are checked through gesture check.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W39_01_01[[TC_W39_01_01]]

... TestCase Description
+
Test the bindable property 'Drag' from the widget 'ScrollableRichText'.
Test if the richtext can be dragged or not through Drag simulation.
Check the initial state with a screenshot compare.
The preconditions are set and checked.
First; set property Drag to false to disable Drag;
Check if the action is set successfully via property check and
the 'Drag' gesture is not configured via gesture check.
Then; set property Drag to true to enable Drag;
call Drag gesture simulation to scroll the richtext.
Check if the action is set successfully via property check and the
richtext scrolled via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_01_01[[TC_W39_01_01\]]

==== TC_W39_02[[TC_W39_02]]

. Testcase Description
+
property : Swipe
+
Check property 'Swipe' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'Swipe'.
+
Test by changing the value of 'Swipe' to false and true respectively.
Then test if the richtext can be swiped or not through Swipe simulation.

. Expected result
+
The property 'Swipe' should be updated according to the value set.
+
The rich-text can only be swiped if the 'Swipe' property is enabled.

. Obtained result
+
Property values of 'Swipe' are checked through Getproperty in TTFIS.
+
The results of actions are checked through gesture check and position check.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W39_02_01[[TC_W39_02_01]]

... TestCase Description
+
Test the bindable property 'Swipe' from the widget 'ScrollableRichText'.
Test if the richtext can be swiped or not through Swipe simulation.
The preconditions are set and checked.
First; set property Swipe to false to disable Swipe;
Check if the action is set successfully via property check and
the 'Swipe' gesture is not configured via gesture check.
Then; set property Swipe to true to enable Swipe;
call Swipe gesture simulation to scroll the richtext.
Check if the action is set successfully via property check
and the richtext scrolled via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_02_01[[TC_W39_02_01\]]

.. TC_W39_02_02[[TC_W39_02_02]]

... TestCase Description
+
Test the bindable property 'Swipe' from the widget 'ScrollableRichText'.
Test the swipe simulation result if Swipe is enabled.
The preconditions are set and checked.
First; call Swipe gesture simulation up 4 times to
scroll the richtext in vertical orientation to the end of file.
Then; call Swipe gesture simulation down 2 times to
see if  the richtext is scrolled to the expected position.
Check if the action was set successfully via position check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_02_02[[TC_W39_02_02\]]

==== TC_W39_03[[TC_W39_03]]

. Testcase Description
+
message : ScrollableRichTextUpdMsg
+
Check message 'ScrollableRichTextUpdMsg' of ScrollableRichTextWidget.
+
Test scope checks the behavior of 'ScrollableRichTextUpdMsg'.
+
Test by calling a Swipe and drag gesture simulation respectively;
Then; set the position of the list to the top through post the listChangeMsg.

. Expected result
+
The message is posted whenever a offset/line/page is changed.

. Obtained result
+
The results of actions are checked through position check.

. Related Test cases

.. TC_W39_03_01[[TC_W39_03_01]]

... TestCase Description
+
Test the bindable message 'ScrollableRichTextUpdMsg' from the widget 'ScrollableRichText'.
Test the message is posted whenever a offset/line/page is changed.
The preconditions are set and checked.
First; alternately call a Swipe and drag gesture simulation.
Then; set the position of the list to the top through post the listChangeMsg.
Check if the message is posted successfully for each action via position check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_03_01[[TC_W39_03_01\]]

==== TC_W39_04[[TC_W39_04]]

. Testcase Description
+
property : GestureConfigId
+
Check property 'GestureConfigId' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'GestureConfigId'.
+
Test by changing the value of 'GestureConfigId' to different values registered in Data-model.
[
. Expected result
+
The property 'GestureConfigId' should be updated according to the value set.
+
The richtext gesture configuration should be changed
according to the value of GestureConfigId property.

. Obtained result
+
Property values of 'GestureConfigId' are checked through Getproperty in TTFIS.
+
The results of actions are checked through gesture check and position check.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W39_04_01[[TC_W39_04_01]]

... TestCase Description
+
Test the bindable property 'GestureConfigId' from the widget 'ScrollableRichText'.
Test if the gesture configuration of the richtext changes by GestureConfigId property.
The preconditions are set and checked.
First; set property GestureConfigId of one list to a gesture configID (disable drag/swipe)
that registered in DataModel to change the gesture configuration.
Then; set property GestureConfigId of one list to a gesture configID (enable drag/swipe)
that registered in DataModel to change the gesture configuration.
Call Drag simulation to see if the text is scrolled.
Check these actions via gesture check; property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_04_01[[TC_W39_04_01\]]

==== TC_W39_05[[TC_W39_05]]

. Testcase Description
+
property : Tap
+
Check property 'Tap' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'Tap'.
+
Test by changing the value of 'Tap' to false and true respectively.
Then call Swipe gesture simulation and SimTouch gesture simulation.

. Expected result
+
The property 'Tap' should be updated according to the value set.
+
Test if the the 'Tap' is set to true; a tap of the control area
immediately stops a swipe animation in progress.

. Obtained result
+
Property values of 'Tap' are checked through Getproperty in TTFIS.
+
The results of actions are checked through position check.

. Related Test cases

.. TC_W39_05_01[[TC_W39_05_01]]

... TestCase Description
+
Test the bindable property 'Tap' from the widget 'ScrollableRichText'.
Test if the the 'Tap' is set to true; a tap of the control area immediately stops a swipe
animation in progress.
The preconditions are set and checked.
First; set 'Tap' to false to disabled the widget.
Call Swipe gesture simulation; then call SimTouch gesture simulation to see if the text
doesn't immediately stop the swipe animation.
Then set 'Tap' to true to enable the widget again.
Call Swipe gesture simulation; then call SimTouch  gesture simulation to see if the text
immediately stop the
swipe animation.
Check these actions via property check and position check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_05_01[[TC_W39_05_01\]]

==== TC_W39_06[[TC_W39_06]]

. Testcase Description
+
property : PressHold
+
Check property 'PressHold' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'PressHold'.
+
Test by changing the value of 'Tap' to false and true respectively.
Then call LongPress gesture simulation to see if the widget can simulate a press and hold.

. Expected result
+
The property 'PressHold' should be updated according to the value set.
+
Test if the widget can only simulate a long-press gesture when 'PressHold' is set to true.

. Obtained result
+
Property values of 'PressHold' are checked through Getproperty in TTFIS.
+
The results of actions are checked through gesture check and position check.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W39_06_01[[TC_W39_06_01]]

... TestCase Description
+
Test the bindable property 'PressHold' from the widget 'ScrollableRichText'.
Test if the widget can simulate a long-press gesture when 'PressHold' is set to true.
The preconditions are set and checked.
First; set 'PressHold' to false to change the hold time in gesture configuration to 0.
Check this action by property check and gesture check.
Then set 'PressHold' to true to make the widget PressHold again.
Call LongPress gesture simulation to see if the widget can simulate a press and hold.
Check these actions via property check; gesture check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_06_01[[TC_W39_06_01\]]

==== TC_W39_07[[TC_W39_07]]

. Testcase Description
+
property : Touchable
+
Check property 'Touchable' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'Touchable'.
+
Test by changing the value of 'Touchable' to false and true respectively.

. Expected result
+
The property 'Touchable' should be updated according to the value set.
+
No gesture simulation can work when the 'Touchable' is set to false.

. Obtained result
+
Property values of 'Touchable' are checked through Getproperty in TTFIS.
+
The results of actions are checked through gesture check.

Bitmap comparison is also done.

. Related Test cases

.. TC_W39_07_01[[TC_W39_07_01]]

... TestCase Description
+
Test the bindable property 'Touchable' from the widget 'ScrollableRichText'.
Test if the text cannot be touched when 'Touchable' is set to false.
The preconditions are set and checked.
First; set 'Touchable' to false to disabled the widget.
Check the action via property check and the presshold; drag
and swipe gestures are not configured by input Gesture
Then set 'Touchable' to true to make the widget touchable again.
Call Drag gesture simulation to see if the text can be scrolled.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_07_01[[TC_W39_07_01\]]

==== TC_W39_08[[TC_W39_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'Enable'.
+
Test by changing the value of 'Enable' to false and true respectively.
Then call a swipe and drag gesture simulation

. Expected result
+
The property 'Enable' should be updated according to the value set.
+
The text should be disabled and no gesture simulation can work
when 'Enable' is set to false.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.
+
The results of actions are checked through gesture check.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W39_08_01[[TC_W39_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'ScrollableRichText'.
Test if the text is disable when 'Enable' is set to false.
The preconditions are set and checked.
First; set 'Enable' to false to disabled the widget.
Call Swipe gesture simulation to see if the text cannot be scrolled.
Then set 'Enable' to true to enable the widget again.
Call Drag gesture simulation to see if the text can be scrolled.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_08_01[[TC_W39_08_01\]]

==== TC_W39_09[[TC_W39_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value of 'Visible' to false and true respectively.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The text should be invisible when 'Visible' is set to false.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W39_09_01[[TC_W39_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'ScrollableRichText'.
Test if the text is invisible when 'Visible' is set to false.
The preconditions are set and checked.
First; set 'Visible' of RichTextWidget to false to make the widget invisible.
Then; set 'Visible' of RichTextWidget to true to make the widget visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_09_01[[TC_W39_09_01\]]

==== TC_W39_10[[TC_W39_10]]

. Testcase Description
+
property : ScrollId
+
Check property 'ScrollId' of ScrollableRichTextWidget.
+
Test scope checks the property value of 'ScrollId'.
+
Test by changing the value of 'ScrollId' to an unsigned int value.
Then post a listChangeMsg with valid scroll ids and invlalid scroll ids respectively.

. Expected result
+
The property 'ScrollId' should be updated according to the value set.
+
The text should not be scrolled through listChangeMsg when 'ScrollId' is invalid.

. Obtained result
+
Property values of 'ScrollId' are checked through Getproperty in TTFIS.
+
The results of actions are checked through position check.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W39_10_01[[TC_W39_10_01]]

... TestCase Description
+
Test the bindable property 'ScrollId' from the widget 'ScrollableRichText'.
Test if the text cannot be scrolled through listChangeMsg when 'ScrollId' is invalid.
The preconditions are set and checked.
First; set 'ScrollId' to 12 to change the scrollable text Id to 12.
Then; post a listChangeMsg with valid scroll ids and invlalid scroll ids
respectively to see if the richtext is scrolled.
Check these actions via property check; position check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W39_10_01[[TC_W39_10_01\]]


=== Slider Widget 2D

==== TC_W14_01[[TC_W14_01]]

. Testcase Description
+
property : DisabledTouching; Touchable +
Check properties 'DisabledTouching' and 'Touchable' of widget Slider.
+
Test 'DisabledTouching' property of Slider Widget that Slider can be touched
even 'DisabledTouching' property is true or false. Test 'Touchable' property
of Slider Widget that it can enable the Slider to be touched or not.


. Expected result
+
Slider should be touched or not according to the Touchable and DisabledTouching
properties. The 'CurrentValue' are changed to the corresponding value with
touching position in Slider.

. Obtained result
+
Property values checked for 'DisabledTouching'; 'Touchable' and 'CurrentValue'
through Getproperty in TTFIS.

. Related Test cases

.. TC_W14_01_01[[TC_W14_01_01]]

... Testcase Description
+
Test 'DisabledTouching' property of Slider Widget that Slider can be touched even
DisabledTouching is true or false. Check the initial state with screenshot compare
to make sure the UI displays corresponding with the default setting in CGI.
Set 'DisabledTouching' of Direct Movement; TimedStepMovement and StepMovement Slider
to 0(false). Touch to the Direct Movement; TimedStepMovement and StepMovement Slider
at any value that differs to 0 to move the position of the marker. Check if the
'DisabledTouching' value of Direct Movement; TimedStepMovement and StepMovement Slider
are 0(false). Check 'CurrentValue' property of Direct Movement; TimedStepMovement and
StepMovement Slider if its values are corresponding with the position that clicked in
the UI. Set 'DisabledTouching' of Direct Movement; TimedStepMovement and StepMovement
Slider to 1(true). Touch to the Slider at the value that differs to the previous value.
Check if the 'DisabledTouching' value of Direct Movement; TimedStepMovement and StepMovement
Slider are 1(false). Check 'CurrentValue' property of Direct Movement; TimedStepMovement
and StepMovement Slider if its values are corresponding with the positions that clicked in the UI.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_01_01[[TC_W14_01_01\]]

.. TC_W14_01_02[[TC_W14_01_02]]

... Testcase Description
+
Test the bindable property 'Touchable' from the widget 'Slider' that it can enable
the Slider to be touched or not. Set 'Touchable' of Direct Movement; StepMovement
and TimedStepMovement Slider to 0(false). Touch to the Direct Movement; StepMovement
and TimedStepMovement Slider at some positions. Check 'Touchable' property of Direct
Movement; StepMovement and TimedStepMovement Slider is 0. Check if the 'CurrentValue'
of Direct Movement; StepMovement and TimedStepMovement Slider didn't change via getting
property. Set 'Touchable' of Direct Movement; StepMovement and TimedStepMovement Slider
to 1(true). Touch to the Direct Movement; StepMovement and TimedStepMovement Slider at
some positions. Check 'Touchable' property of Direct Movement; StepMovement and
TimedStepMovement Slider is 1. Check if the 'CurrentValue' of Direct Movement;
StepMovement and TimedStepMovement Slider changed to corresponding values via getting property.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_01_02[[TC_W14_01_02\]]

==== TC_W14_02[[TC_W14_02]]
. Testcase Description
+
property : Visible +
Check property 'Visible' of widget Slider.
+
Test the bindable property 'Visible' to set the Slider Widget to be visible or invisible.


. Expected result
+
Slider should be visible when setting 'Visible' to true and invisible when setting
'Visible' to false.

. Obtained result
+
Property values checked for 'Visible' through Getproperty in TTFIS. Bitmap comparison
is also done.

. Related Test cases
.. TC_W14_02_01[[TC_W14_02_01]]

... Testcase Description
+
Test the bindable property 'Visible' from the widget 'Slider' to be visible or
invisible. Set 'Visible' of Direct Movement; TimedStepMovement; StepMovement and
SliderAsProgressBar to 0(false). Check if the Direct Movement; TimedStepMovement;
StepMovement and SliderAsProgressBar are invisible via screenshot compare. Set
'Visible' of Direct Movement; TimedStepMovement; StepMovement and SliderAsProgressBar
to 1(true). Check if the Direct Movement; TimedStepMovement; StepMovement and
SliderAsProgressBar are visible via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_02_01[[TC_W14_02_01\]]

==== TC_W14_03[[TC_W14_03]]

. Testcase Description
+
property : Enable +
Check property 'Enable' of widget Slider.
+
Test the bindable property 'Enable' from the widget 'Slider' that it can enable
or disable the Slider.


. Expected result
+
Slider should be touched when setting 'Enable' to true and cannot be touched
when setting 'Enable' to false. The 'CurrentValue' are changed to the corresponding
value with touching position in Slider.

. Obtained result
+
Property values checked for 'Enable' and 'CurrentValue' through Getproperty in TTFIS.

. Related Test cases

.. TC_W14_03_01[[TC_W14_03_01]]

... Testcase Description
+
Test the bindable property 'Enable' from the widget 'Slider' that it can enable
or disable the Slider. Set 'Enable' of Direct Movement; StepMovement and
TimedStepMovement Slider to 0(false). Touch to the Direct Movement; StepMovement
and TimedStepMovement Slider at some positions. Check 'Enable' property of
Direct Movement; StepMovement and TimedStepMovement Slider is 0. Check if the
'CurrentValue' of Direct Movement; StepMovement and TimedStepMovement Slider
didn't change via getting property. Set 'Enable' of Direct Movement; StepMovement
and TimedStepMovement Slider to 1(true). Touch to the Direct Movement; StepMovement
and TimedStepMovement Slider at some positions. Check 'Enable' property of
Direct Movement; StepMovement and TimedStepMovement Slider is 1. Check if the
'CurrentValue' of Direct Movement; StepMovement and TimedStepMovement Slider
changed to corresponding values via getting property.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_03_01[[TC_W14_03_01\]]


==== TC_W14_04[[TC_W14_04]]

. Testcase Description
+
property : CurrentValue +
Check property 'CurrentValue' of widget Slider.
+
Test the bindable property 'CurrentValue' from the widget 'Slider'
that should be in the range between min and max values. Test when
changing 'CurrentValue'; the marker will move based on the
'SliderOrientation' was set in the CGI. Test when touching on the
Slider; the marker and 'CurrentValue' will be set based on the
'MarkerMovement' type was set in the CGI. Test the slider can be
filled as ProgressBar based on 'CurrentValue'.

. Expected result
+
'CurrentValue' is always in the range of 'MinVal' and 'MaxVal'.
The Slider can be set to four orientations. When changing 'CurrentValue';
the marker on the Slider will move based on the 'SliderOrientation' was
set in the CGI. 'CurrentValue' changes its value based on the 'MarkerMovement'
type was set in the CGI. If design the Slider UI as ProgressBar; then
change the 'CurrentValue'; the Slider will be filled as ProgressBar.

. Obtained result
+
Property values checked for 'CurrentValue' through
Getproperty in TTFIS. Bitmap comparison is also done.

. Related Test cases

.. TC_W14_04_01[[TC_W14_04_01]]

... Testcase Description
+
Test the bindable property 'CurrentValue' from the widget 'Slider' that
should be in the range between min and max values. Set 'CurrentValue' of
Direct Movement slider to 1000.0f. Check to make sure 'CurrentValue' Property
equal to 1000.0f. Set 'CurrentValue' of Direct Movement slider to -20000.0f
which smaller than min value (-10000.0f). Check to make sure 'CurrentValue'
Property equal to min value (-10000.0f). Set 'CurrentValue' to 20000.0f which
greater than max value (10000.0f). Check to make sure 'CurrentValue' Property
equal to max value (10000.0f).
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_04_01[[TC_W14_04_01\]]

.. TC_W14_04_02[[TC_W14_04_02]]

... Testcase Description
+
Test the bindable property 'CurrentValue' and 'SliderOrientation' from the
widget 'Slider'. Test when changing 'CurrentValue'; the marker will move
based on the 'SliderOrientation' was set in the CGI. Set 'CurrentValue' of
TimedStepMovement Slider; DirectMovement Slider; StepMovement Slider and
SliderAsProgressBar Slider to max value. Check one screenshot compare if:

* the Marker of TimedStepMovement Slider is moved to the most right (HorizontalLeft).
* the Marker of DirectMovement Slider is moved to the most left (HorizontalRight).
* the Marker of StepMovement Slider is moved to the most bottom (VerticalTop).
* the Marker of SliderAsProgressBar Slider is moved to the most top (VerticalBottom).
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_04_02[[TC_W14_04_02\]]

.. TC_W14_04_03[[TC_W14_04_03]]

... Testcase Description
+
Test the bindable property 'CurrentValue' and 'MarkerMovement' from the
widget 'Slider'. Test when touching on the Slider; the marker and 'CurrentValue'
will be set based on the 'MarkerMovement' type was set in the CGI
(Marker moves each step by stepsize - TimedStepMovement.
Marker moves directly to clicked position - DirectMovement.
Marker moves to the nearest clicked position calculated by stepsize - StepMovement).
Touch to Max value position in TimedStepMovement Slider. Touch to Max Value
position in DirectMovement Slider. Touch to near max value position in the
StepMovement Slider. Check if CurrentValue of TimedStepMovement is 1000 by
property check (because the CurrentValue will move only one stepsize (1000.0f)).
Check if CurrentValue of DirectMovement is 10000 by property check; the value
of the position that we clicked. Check if CurrentValue of StepMovement is equal
MaxValue (1000.0f) (because the current value will be set to the value that the
nearest touched position which calculated by stepsize). Check if the Market is
moved to the corresponding position with 'CurrentValue' via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_04_03[[TC_W14_04_03\]]

.. TC_W14_04_04[[TC_W14_04_04]]

... Testcase Description
+
Test the bindable property 'CurrentValue' and Slider as ProgressBar feature
from the widget 'Slider'. Test the slider can be filled as ProgressBar based
on 'CurrentValue'. Set 'CurrentValue' of SliderAsProgressBar to 30. Check if
CurrentValue is 30 by property check. Check if the SliderAsProgressBar is
filled 30% via screenshot compare. Set 'CurrentValue' of SliderAsProgressBar
to 100. Check if CurrentValue is 100 by property check. Check if the
SliderAsProgressBar is filled 100% via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_04_04[[TC_W14_04_04\]]


==== TC_W14_05[[TC_W14_05]]

. Testcase Description
+
property : StepSize; NumOfSteps   +
Check property 'StepSize'; 'NumOfSteps' of widget Slider.
+
Test 'StepSize' property that allows the marker to move with the given value.
Test if 'UseNumOfSteps' is enabled then 'NumOfSteps' property can set the
total number of steps for the marker movement.
. Expected result
+
The marker on Slider moves with the given StepSize or NumOfSteps.

. Obtained result
+
Property values checked for 'StepSize' and 'NumOfSteps' through Getproperty in TTFIS.


. Related Test cases

.. TC_W14_05_01[[TC_W14_05_01]]

... Testcase Description
+
Test the bindable property 'StepSize' from the widget 'Slider'. Test 'StepSize'
property that allows the marker to move with the given value. Touch to
StepMovement Slider at the near min slider position (Default StepSize is 200.0f
and slider range from -1000.0f to 1000.0f; we will click about -850.0f). Check
if the CurrentValue is -800.0f by property check (expect CurrentValue will move
to the nearest of (-850.0f) by default stepsize (200.0f) = -800.0f). Change
'StepSize' to 1000.0f. Reset CurrentValue to 0.0f at default. Touch to the slider
at the near min slider position again. Check if the StepSize is 1000.0f. Check
if the CurrentValue is -1000.0f by property check (expect CurrentValue will move
from 0 to -1000.0f because stepsize is 1000.0f).
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_05_01[[TC_W14_05_01\]]


.. TC_W14_05_02[[TC_W14_05_02]]

... Testcase Description
+
Test the bindable property 'NumOfSteps' and 'UseNumOfSteps' from the widget
'Slider'. Test if 'UseNumOfSteps' is enabled then 'NumOfSteps' property can
set the total number of steps for the marker movement. The Stepsize will be
calculated based on the given range and NumOfSteps. The preconditions are set
and checked. Touch to Max value position in TimedStepMovement. Check if NumOfSteps
of TimedStepMovement is 20.0f as default. Check if the CurrentValue is 1000.0f.
(Because the range is from -10000.0f to 10000.0f => if NumOfSteps is 20.0f then
stepsize is: (10000.0f - (-10000.0f)) / 20.0f = 1000.0f. Default CurrentValue
is 0.0f => 0.0f + 1000.0f = 1000.0f). Set NumOfSteps of TimedStepMovement
Slider 10.0f. Touch to Max value position in Slider. Check if the NumOfSteps
of TimedStepMovement is 10.0f. Check if the CurrentValue is 3000.0f by property
check (Because the range is from -10000.0f to 10000.0f => if NumOfSteps is 10.0f
then stepsize is: (10000.0f - (-10000.0f)) / 10.0f = 2000.0f. CurrentValue at
step 1 is 1000.0f => 1000.0f + 2000.0f = 3000.0f).
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_05_02[[TC_W14_05_02\]]


==== TC_W14_06[[TC_W14_06]]

. Testcase Description
+
property : MinVal  +
Check property 'MinVal' of widget Slider.
+
Test the bindable property 'MinVal' from the widget 'Slider' that it can be set
to FLOAT_MIN(1.4012985E-45) and FLOAT_MIN_NEG(-1.4012985E-45).

. Expected result
+
'MinVal' can be set to FLOAT_MIN(1.4012985E-45) and FLOAT_MIN_NEG(-1.4012985E-45)

. Obtained result
+
Property values checked for 'MinVal' through Getproperty in TTFIS.

. Related Test cases

.. TC_W14_06_01[[TC_W14_06_01]]

... Testcase Description
+
Test the bindable property 'MinVal' from the widget 'Slider' that it can
be set to FLOAT_MIN and FLOAT_MIN_NEG. Set 'MinVal' property of Direct Movement
slider to FLOAT_MIN(1.4012985E-45). Check if the MinVal is FLOAT_MIN via
getting property. Set 'CurrentValue' property of Direct Movement slider to
FLOAT_MIN(1.4012985E-45). Check if the 'CurrentValue' is FLOAT_MIN via
getting property. Set 'MinVal' property of Direct Movement slider to
FLOAT_MIN_NEG(-1.4012985E-45). Check if the MinVal is FLOAT_MIN_NEG via
getting property. Set 'CurrentValue' property of Direct Movement slider
to FLOAT_MIN_NEG(-1.4012985E-45). Check if the 'CurrentValue' is FLOAT_MIN_NEG
via getting property.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_06_01[[TC_W14_06_01\]]

==== TC_W14_07[[TC_W14_07]]

. Testcase Description
+
property : MaxVal  +
Check property 'MaxVal' of widget Slider.
+
Test the bindable property 'MaxVal' from the widget 'Slider' that it can be set
to FLOAT_MAX(3.4028235E+38) and FLOAT_MAX_NEG(-3.4028235E+38).

. Expected result
+
'MaxVal' can be set to FLOAT_MAX(3.4028235E+38) and FLOAT_MAX_NEG(-3.4028235E+38).

. Obtained result
+
Property values checked for 'MaxVal' through Getproperty in TTFIS.

. Related Test cases
.. TC_W14_07_01[[TC_W14_07_01]]

... Testcase Description
+
Test the bindable property 'MaxVal' from the widget 'Slider' that it can be
set to FLOAT_MAX and FLOAT_MAX_NEG. Set 'MaxVal' property of Direct Movement
slider to FLOAT_MAX(3.4028235E+38). Check if the MaxVal is FLOAT_MAX via
getting property. Set 'CurrentValue' property of Direct Movement slider to
FLOAT_MAX(3.4028235E+38). Check if the 'CurrentValue' is FLOAT_MAX via getting
property. Set 'MaxVal' property of Direct Movement slider to FLOAT_MAX_NEG(-3.4028235E+38).
Check if the MaxVal is FLOAT_MAX_NEG via getting
property. Set 'CurrentValue' property of Direct Movement slider to
FLOAT_MAX_NEG(3.4028235E+38). Check if the 'CurrentValue' is FLOAT_MAX_NEG
via getting property.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W14_07_01[[TC_W14_07_01\]]

=== SolidColorEffect Widget 2D

==== UI Design

The UI designed for SolidColorEffect Widget 2D includes multiple Render node for manipulating the Size and the FillColor properties of the existing SolidColorBrush effect.

image::images/SolidColorEffectScene.png[title="SolidColorEffect Scene"]

==== TC_W96_01[[TC_W96_01]]

. Testcase Description
+
property : FillColor
+
Check property 'FillColor' of SolidColorEffectWidget.
+
Test scope checks the property value of 'FillColor'.
+
Test by changing the value of 'FillColor' to change color or degree of transparency of RenderNode.

. Expected result
+
The property 'FillColor' should be updated according to the value set.
+
Render Nodes changed color or degree of transparency.

. Obtained result
+
Property values of 'FillColor' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W96_01_01[[TC_W96_01_01]]

... TestCase Description
+
Test the bindable property 'FillColor' from the widget 'SolidColorEffectWidget2D'.
Test if the nodes can change color and effect of node.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set 'FillColor' to some values to change color of RenderNode.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W96_01_01[[TC_W96_01_01\]]

==== TC_W96_02[[TC_W96_02]]

. Testcase Description
+
property : Size
+
Check property 'Size' of SolidColorEffectWidget.
+
Test scope checks the property value of 'Size'.
+
Test by changing the value of 'Size' to changed size of Render Node.

. Expected result
+
The property 'Size' should be updated according to the value set.
+
The size of Render Node is changed according to the value set.

. Obtained result
+
Property values of 'Size' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W96_02_01[[TC_W96_02_01]]

... TestCase Description
+
Test the bindable property 'Size' from the widget 'SolidColorEffectWidget2D'.
Test if the nodes change size of node.
The preconditions are set and checked.
Set property 'Size' to some value to change size of node.
Check the actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W96_02_01[[TC_W96_02_01\]]

==== TC_W96_09[[TC_W96_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of SolidColorEffectWidget.
+
Test scope checks the property value of 'Visible'.
+
Test by changing the value TRUE/FALSE of 'Visible' to make node visible/invisible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The property 'Visible' makes node visible or invisible as configured.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W96_09_01[[TC_W96_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'SolidColorEffectWidget2D'.
Test if widget can be set to invisible or visible.
The preconditions are set and check.
Set property 'Visible' to True and False to make node visible and invisible.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W96_09_01[[TC_W96_09_01\]]


=== Speller Widget 2D

==== UI Design

The UI designed for Speller Widget 2D includes: 2 views for 2 main mode (FreeMode and MatchMode)
and one view for type Customsequence.

image::images/Speller_FreeMode.png[title="Speller Free Mode"]
image::images/Speller_MatchMode.png[title="Speller Match Mode"]
image::images/Speller_CustomSequence.png[title="Speller CustomSequence"]

==== TC_W15_01[[TC_W15_01]]

. Testcase Description
+
property : SpellerKeyPressed
+
Check property 'SpellerKeyPressed' of SpellerWidget.
+
Test scope checks the property value of 'SpellerKeyPressed'.
+
Test by changing the value of 'SpellerKeyPressed' to some strings.

. Expected result
+
The property 'SpellerKeyPressed' should be updated according to the value set.
+

. Obtained result
+
Property values of 'SpellerKeyPressed' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W15_01_01[[TC_W15_01_01]]

... TestCase Description
+
Test the bindable property 'SpellerKeyPressed' from the widget 'SpellerWidget2D'.
Test if the widget can get the input from user.
The preconditions are set and checked.
Set 'SpellerKeyPressed' some values and check if the widget can get that value.
Check these actions via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_01_01[[TC_W15_01_01\]]

==== TC_W15_02[[TC_W15_02]]

. Testcase Description
+
property : KeypadFormat
+
Check property 'KeypadFormat' of SpellerWidget.
+
Test scope checks the property value of 'KeypadFormat'.
+
Test by changing the value of 'KeypadFormat' to two enums available for apllication.

. Expected result
+
The property 'KeypadFormat' should be updated according to the value set.
Enum 'Basic_acb' makes characters in the layout change to lowercase.
Enum 'Basic_QWERT' makes characters in the layout change to uppercase.

. Obtained result
+
Property values of 'KeypadFormat' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_02_01[[TC_W15_02_01]]

... TestCase Description
+
Test the bindable property 'KeypadFormat' from the widget 'SpellerWidget2D'.
Test when changing 'KeypadFormat'; if character in layout can change to others and test if
still the expected
characters is pressed.
The preconditions are set and checked.
Set property 'KeypadFormat' to some enum to see the change of character in the same
layout.
Simulation press first key of second line of layout and check the key was pressed.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_02_01[[TC_W15_02_01\]]

==== TC_W15_03[[TC_W15_03]]

. Testcase Description
+
property : ActiveLanguage
+
Check property 'ActiveLanguage' of SpellerWidget.
+
Test scope checks the property value of 'ActiveLanguage'.
+
Test by changing the value of 'ActiveLanguage' to valid; invalid and out range value.

. Expected result
+
The property 'ActiveLanguage' should be updated according to the value set.
+
A valid value will make the character layout change. An invalid and out range value will not make the character layout change.

. Obtained result
+
Property values of 'ActiveLanguage' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_03_01[[TC_W15_03_01]]

... TestCase Description
+
Test the bindable property 'ActiveLanguage' from the widget 'SpellerWidget2D'.
Test when changing 'ActiveLanguage'; along with suitable 'ActiveCountry' and 'Mode' if
character in layout can
change to others in FreeMode.
The preconditions are set and checked.
Set property 'ActiveLanguage' to a valid value to see the change of character layout.
Set property 'ActiveLanguage' to an invalid value to see the unchange of character layout
and max value of property.
Set property 'ActiveLanguage' to out range value to see if it can.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_03_01[[TC_W15_03_01\]]

==== TC_W15_04[[TC_W15_04]]

. Testcase Description
+
property : ActiveCountry
+
Check property 'ActiveCountry' of SpellerWidget.
+
Test scope checks the property value of 'ActiveCountry'.
+
Test by changing the value of 'ActiveCountry' to valid; invalid and out range value.

. Expected result
+
The property 'ActiveCountry' should be updated according to the value set.
+
A valid value will make the character layout change. An invalid and out range value will not make the character layout change.

. Obtained result
+
Property values of 'ActiveCountry' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_04_01[[TC_W15_04_01]]

... TestCase Description
+
Test the bindable property 'ActiveCountry' from the widget 'SpellerWidget2D'.
Test when changing 'ActiveCountry'; along with suitable 'ActiveLanguage' and 'Mode' if
character in layout can
change to others in MatchMode.
The preconditions are set and checked.
Set 'Type' to Others to be able to apply this property.
Set property 'ActiveCountry' to a valid value to see the change of character layout.
Set property 'ActiveCountry' to an invalid value to see the unchange of character layout
and max value of property.
Set property 'ActiveCountry' to out range value to see if it can.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_04_01[[TC_W15_04_01\]]

==== TC_W15_05[[TC_W15_05]]

. Testcase Description
+
property : UserDefinedSequence
+
Check property 'UserDefinedSequence' of SpellerWidget.
+
Test scope checks the property value of 'UserDefinedSequence'.
+
Test by changing the value of 'UserDefinedSequence' to some strings which are valid; invalid; and valid but don't have a respective character layout.

. Expected result
+
The property 'UserDefinedSequence' should be updated according to the value set.
+
The property 'UserDefinedSequence' makes all character buttons in the layout disable or enable as configured.

. Obtained result
+
Property values of 'UserDefinedSequence' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_05_01[[TC_W15_05_01]]

... TestCase Description
+
Test the bindable property 'UserDefinedSequence' from the widget 'SpellerWidget2D'.
Test when changing 'UserDefinedSequence'; if layout can change to others.
The preconditions are set and checked.
Set property 'UserDefinedSequence' to a string which refer a sequence in Sequence.dat file to see the change of layout.
Set property 'UserDefinedSequence' to a string which not refer a sequence in Sequence.dat file
to see the unchange of layout.
Set property 'UserDefinedSequence' to a string which refer a sequence in Sequence.dat file
but don't have suitable layout in CGI to see the disappearance of layout.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_05_01[[TC_W15_05_01\]]

==== TC_W15_06[[TC_W15_06]]

. Testcase Description
+
property : AllCharLayoutDisable
+
Check property 'AllCharLayoutDisable' of SpellerWidget.
+
Test scope checks the property value of 'AllCharLayoutDisable'.
+
Test by changing the value of 'AllCharLayoutDisable' to true and false.

. Expected result
+
The property 'AllCharLayoutDisable' should be updated according to the value set.
+
The property 'AllCharLayoutDisable' makes all character buttons in the layout disable or enable as configured.

. Obtained result
+
Property values of 'AllCharLayoutDisable' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_06_01[[TC_W15_06_01]]

... TestCase Description
+
Test the bindable property 'AllCharLayoutDisable' from the widget 'SpellerWidget2D'.
Test if all characters layout can be disable.
The preconditions are set and checked.
First; set property 'AllCharLayoutDisable' to true to disable all character layout buttons
and press a button to test.
Then; set property 'AllCharLayoutDisable' to false to enable all character layout buttons
again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_06_01[[TC_W15_06_01\]]

==== TC_W15_07[[TC_W15_07]]

. Testcase Description
+
property : AutoLayoutToggle
+
Check property 'AutoLayoutToggle' of SpellerWidget.
+
Test scope checks the property value of 'AutoLayoutToggle'.
+
Test by changing the value of 'AutoLayoutToggle' to false and true.

. Expected result
+
The property 'AutoLayoutToggle' should be updated according to the value set.
+
The property 'AutoLayoutToggle' makes the layout auto toggle or not as configured in MatchMode.

. Obtained result
+
Property values of 'AutoLayoutToggle' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_07_01[[TC_W15_07_01]]

... TestCase Description
+
Test the bindable property 'AutoLayoutToggle' from the widget 'SpellerWidget2D'.
Test if widget auto toggle layout based on ValidcharSet in MatchMode.
The preconditions are set and checked.
First; set property 'AutoLayoutToggle' to false to disable auto toggle layout.
Simulate press buttons the string as config to see if layout toggle when have lower case character.
Then; set property 'AutoLayoutToggle' to false to auto toggle layout again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_07_01[[TC_W15_07_01\]]

==== TC_W15_08[[TC_W15_08]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of SpellerWidget.
+
Test scope checks the property value of 'Enable'.
+
Test by changing the value of 'Enable' to false and true.

. Expected result
+
The property 'Enable' should be updated according to the value set.
+
The property 'Enable' make all main character layout button disabled or enabled in FreeMode.
In MatchMode; 'Enable' property don't control the enability.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_08_01[[TC_W15_08_01]]

... TestCase Description
+
Test the bindable property 'Enable' and non-bindable property 'Mode' from the widget
'SpellerWidget2D'.
Test if some main characters in the layout can be disable in FreeMode.
The preconditions are set and checked.
First; set property 'Enable' to false to disable all main character layout buttons.
Then; set property 'Enable' to true to enable all main character layout buttons again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_08_01[[TC_W15_08_01\]]

.. TC_W15_08_02[[TC_W15_08_02]]

... TestCase Description
+
Test the bindable property 'Enable' and non-bindable property 'Mode' from the widget
'SpellerWidget2D'.
Test if some main characters in the layout don't rely on Enable property to control their
enable or disable in MatchMode.
The preconditions are set and checked.
First; check if property 'Enable' has value true and all main character layout buttons are
still disable.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_08_02[[TC_W15_08_02\]]

==== TC_W15_10[[TC_W15_10]]

. Testcase Description
+
property : ValidCharSet
+
Check property 'ValidCharSet' of SpellerWidget.
+
Test scope checks the property value of 'ValidCharSet'.
+
Test by changing the value of 'ValidCharSet' to some string.

. Expected result
+
The property 'ValidCharSet' should be updated according to the value set.
+
The character buttons respectively are enabled based on the set string.

. Obtained result
+
Property values of 'ValidCharSet' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W15_10_01[[TC_W15_10_01]]

... TestCase Description
+
Test the bindable property 'ValidCharSet' from the widget 'SpellerWidget2D'.
Test if widget can control which character button will be enable in MatchMode.
The preconditions are set and checked.
Set property 'ValidCharSet' to some strings to see if the character button respectively is enable.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W15_10_01[[TC_W15_10_01\]]


=== Switch Widget 2D

==== UI Design

The UI designed for Switch Widget 2D includes 4 children nodes as the below figure:

image::images/SwitchScene.png[title="Switch Scene"]

==== TC_W87_01[[TC_W87_01]]

. Testcase Description
+
property : Index
+
Check property 'Index' of SwitchWidget.
+
Test scope checks the property value of 'Index'.
+
Test 'Index' of child node to be made visible.

. Expected result
+
The property 'Index' should be updated according to the value set.
+
It should be possible to hide all children node by using outbound value for the 'Index'
It should be possible to show one child node and hide all the others by using inbound value for the 'Index'

. Obtained result
+
Property values of 'Index' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W87_01_01[[TC_W87_01_01]]

... TestCase Description
+
Test the bindable property 'Index' from the widget 'Switch'.
Test 'Index' of child node to be made visible.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set 'Index' to outbound and inbound values.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W87_01_01[[TC_W87_01_01\]]

==== TC_W87_02[[TC_W87_02]]

. Testcase Description
+
property : BitmaskEnabled
+
Check property 'BitmaskEnabled' of SwitchWidget.
+
Test scope checks the property value of 'BitmaskEnabled'.
+
Test 'BitmaskEnabled' allow SwitchWidget to treat 'Index' value as bitmask.

. Expected result
+
The property 'BitmaskEnabled' should be updated according to the value set.
+
Children node(s) should be possible to hide or show by considering the index value as a bitmask

. Obtained result
+
Property values of 'BitmaskEnabled' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W87_02_01[[TC_W87_02_01]]

... TestCase Description
+
Test the bindable property 'BitmaskEnabled' from the widget 'Switch'.
Test 'BitmaskEnabled' allow SwitchWidget to treat 'Index' value as bitmask.
The preconditions are set and checked.
Set 'BitmaskEnabled' to 1 (true).
Check if this property is enable via property check and screenshot compare.
Set 'BitmaskEnabled' to 0 (false)
Check if this property is disable via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W87_02_01[[TC_W87_02_01\]]

==== TC_W87_09[[TC_W87_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of SwitchWidget.
+
Test scope checks the property value of 'Visible'.
+
Test if SwitchWidget2D can be set to invisible or visible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget is visible or invisible

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W87_09_01[[TC_W87_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'Switch'.
Test if SwitchWidget2D can be set to invisible or visible.
The preconditions are set and checked.
Set property 'Visible' to 0 (false).
Check if the widget is invisible via property check and screenshot compare.
Set property 'Visible' to 1 (true).
Check if the widget is visible via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W87_09_01[[TC_W87_09_01\]]

=== TextColor Widget 2D

==== TC_W08_01[[TC_W08_01]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of TextColorWidget.
+
Test Description
+
Test scope checks the property value of 'Enable'. Test by changing
the value of 'Enable' to false in NormalTextColor and ActiveTextColor.
Then change the value of 'Enable' to true in DisabledTextColor
and ActiveTextColor.

. Expected result
+
The property 'Enable' should be updated according to the value set.
When 'Enable' is set to false; the widget state should be changed to disabled.
The active info should be ignored.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W08_01_01[[TC_W08_01_01]]

... TestCase Description
+
Test the bindable property 'Enable' from the widget 'TextColor'.
The preconditions are set and checked.
Check initial state with screenshot compare.
First; set 'Enable' to false in NormalTextColor and ActiveTextColor
to change the widget state to disabled.
Check this action via property check a screenshot compare.
Then; set 'Enable' to true in DisabledTextColor to change the widget
state to normal. Set 'Enable' to true in ActiveTextColor to change
the widget state to activate.
Check this action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W08_01_01[[TC_W08_01_01\]]

==== TC_W08_02[[TC_W08_02]]

. Testcase Description
+
property : Active
+
Check property 'Active' of TextColorWidget.
+
Test Description
+
Test scope checks the property value of 'Active'.
Test by changing the value of 'Active' to true in NormalTextColor.
Then; change the value of 'Active' to false in ActiveTextColor and DisabledTextColor.

. Expected result
+
When property value of 'Active' and 'Enable' is set to true;
the widget state should be changed to active.

. Obtained result
+
Property values of 'Active' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W08_02_01[[TC_W08_02_01]]

... TestCase Description
+
Test the bindable property 'Active' from the widget 'TextColor'.
The preconditions are set and checked.
First; set 'Active' to true in NormalTextColor to change the widget state to active.
Then; set 'Active' to false in ActiveTextColor to change the widget state to normal.
Set 'Active' to false in DisabledTextColor to see the text still disabled.
Check this action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W08_02_01[[TC_W08_02_01\]]

==== TC_W08_03[[TC_W08_03]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of TextColorWidget.
+
Test Description
+
Test scope checks the property value of 'Visible'.
Test by changing the value of 'Visible' to false.
Then; change the value of 'Visible' to true.
Test for all of 'TextColor' Widget in scene.

. Expected result
+
The property 'Visible' should be updated according to the value set.
The text should be turned to invisible when 'Visible' is set to False.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W08_03_01[[TC_W08_03_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'TextColor'.
The preconditions are set and checked.
Set 'Visible' of all 'TextColor' widgets to false to make the widget invisible.
Check this action via property check and screenshot compare.
Then; set 'Visible' of all 'TextColor' widgets to true to make the widget visible.
Check this action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W08_03_01[[TC_W08_03_01\]]


=== Text Widget 2D

==== TC_W18_01[[TC_W18_01]]

. Testcase Description
+
property : Text
+
Check property 'Text' of Text widget.
+
Test Description
+
Test scope checks the text displayed on the label by setting 'Text' content
with a single-line text including special character and multi-line text.
+
. Expected result
+
The text which is configured should be displayed on the label.

. Obtained result
+
Property values of 'Text' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_01_01[[TC_W18_01_01]]

... Testcase Description
+
Test the bindable property 'Text' by setting 'Text' content with a 1 line length
text including special character (i.e: 'amp;#Sample Rendering Text?!').
Check if the widget changes the text content to 'amp;#Sample Rendering Text?!'
Check via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_01_01[[TC_W18_01_01\]]

.. TC_W18_01_02[[TC_W18_01_02]]

... Testcase Description
+
Test the bindable property 'Text' by setting a multi-line text
content (i.e '\nSample\nRendering\nText!').
Check if the text was updated to correct content as set via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_01_02[[TC_W18_01_02\]]

==== TC_W18_02[[TC_W18_02]]

. Testcase Description
+
property : TextColor
+
Check property 'TextColor' of Text widget.
+
Test Description
+
Test scope checks the property value of 'TextColor'. Test by changing the value
of 'TextColor' to blue for single-line text; to green for multi-line text.

. Expected result
+
The text Color should be updated according to the color value set by 'TextColor'.
The text should be changed to blue for single-line text; to green for multi-line text.

. Obtained result
+
Property values of 'TextColor' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_02_01[[TC_W18_02_01]]

... Testcase Description
+
Test the bindable property 'TextColor' from the widget 'Text' by setting property
'TextColor' to blue for single-line text; to green for multi-line text. Check if
single-line text color is shown in blue; multi-line text color is shown in green.
Check via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_02_01[[TC_W18_02_01\]]

==== TC_W18_03[[TC_W18_03]]

. Testcase Description
+
property : Alpha
+
Check property 'Alpha' of Text widget.
+
Test Description
+
Test scope checks the property value of 'Alpha'. Test by changing the value of 'Alpha'
to 0 for single-line text and 0.5 for multi-line text.

. Expected result
+
The transparent behavior of the text should be updated according to the 'Alpha' value.
The text should be shown as Transparent(invisible) if it set to 0(minimum) and should
be shown as Blur when it set to 0.5.

. Obtained result
+
Property values of 'Alpha' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_03_01[[TC_W18_03_01]]

... Testcase Description
+
Test property 'Alpha' by changing the value with minimum float value (0) for single-line
text and a float value within range (i.e 0.5) for multi-line text.
Check if the text is shown as Blurred in multi-line and turned invisible in single-line text.
Check via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_03_01[[TC_W18_03_01\]]

==== TC_W18_04[[TC_W18_04]]

. Testcase Description
+
property : Enable
+
Check property 'Enable' of Text widget.
+
Test Description
+
Test scope checks the property value of 'Enable' that should disable
widgets if property is set to false. Test by changing the value of 'Enable'
to False for single-line text and multi-line text.

. Expected result
+
The property 'Enable' should be updated according to the value set.

. Obtained result
+
Property values of 'Enable' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W18_04_01[[TC_W18_04_01]]

... Testcase Description
+
Test the bindable property 'Enable' by setting property 'Enable' to false for single-line and
multi-line text. Check if the property value was updated to false as expected via property check.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_04_01[[TC_W18_04_01\]]

==== TC_W18_05[[TC_W18_05]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of Text widget.
+
Test Description
+
Test scope checks the property value of 'Visible'.
If the property is set to false the text should be hidden.
Test by changing the value of 'Visible' to False for single-line text;
multi-line text and multi-line text when height of MaximumSize set to -1.

. Expected result
+
The property 'Visible' should be updated according to the value set.
The text should be turned to Invisible when 'Visible' is set to False.
+
. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_05_01[[TC_W18_05_01]]

... Testcase Description
+
Test the bindable property 'Visible' by setting property 'Visible' to False for single-line text
and multi-line text. Check if the text is turned to invisible as expected.
Check via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_05_01[[TC_W18_05_01\]]

==== TC_W18_06[[TC_W18_06]]

. Testcase Description
+
property : Bold
+
Check property 'Bold' of Text widget.
+
Test Description
+
Test scope checks the property value of 'Bold'.
Test by changing the value of 'Bold' to True for TextFormatDemo.

. Expected result
+
The property 'Bold' should be updated according to the value set.
The text should be turned to 'Medium' style when "Bold" set to True.

. Obtained result
+
Property values of 'Bold' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_06_01[[TC_W18_06_01]]

... Testcase Description
+
Test the bindable property 'Bold' by setting property 'Bold' to True for TextFormatDemo.
Check if 'Bold' was updated to 1 via property check.
Check if TextFormatDemo is shown as 'Medium' Style via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_06_01[[TC_W18_06_01\]]

==== TC_W18_07[[TC_W18_07]]

. Testcase Description
+
properties : Italic
+
Check property 'Italic' of Text widget.
+
Test Description
+
Test scope checks the property value of 'Italic'.
Test by changing the value of 'Italic' to True for TextFormatDemo.

. Expected result
+
The property 'Italic' should be updated according to the value set.
The text should be turned to 'Small' style when "Italic" set to True.

. Obtained result
+
Property values of 'Italic' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases
.. TC_W18_07_01[[TC_W18_07_01]]

... Testcase Description
+
Test the bindable property 'Italic' by setting property 'Italic' to True for TextFormatDemo.
Check if 'Italic' was updated to 1 via property check.
Check if TextFormatDemo is shown as 'Small' Style via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_07_01[[TC_W18_07_01\]]

==== TC_W18_08[[TC_W18_08]]

. Testcase Description
+
properties : 'OutlineWidth'; 'OutlineColor'
+
Check properties 'OutlineWidth' and 'OutlineColor' of Text widget.
+
Test Description
+
Test scope checks the property value of 'OutlineWidth' and 'OutlineColor'.
Test by changing the Color to Green and Width (1 minimum - 5 maximum to show the effect)
to 3 to the same TextWidget. Change the 'OutlineWidth'color to 0 to
check if the Outline Effect is disabled.

. Expected result
+
The properties 'OutlineWidth' and 'OutlineColor' should be updated according to the value set.
The outline color should be turned to Green with the width is equal to 3.

. Obtained result
+
Property values of 'OutlineWidth' and 'OutlineColor' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_08_01[[TC_W18_08_01]]

... Testcase Description
+
Test the bindable property 'OutlineWidth' and 'OutlineColor' by setting property 'OutlineWidth' to 3;
'OutlineColor' to Green for multi-line TextOutline widget. Set 'OutlineWidth' to 0 for
single-line TextOutline widget. Check if widget increases the width to 3 and color to
Green in multi-line TextOutline widget. Check if Outline Effect is disabled; the text
is shown in Black set in 'TextColor' in single-line TextOutline widget.
Check via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_08_01[[TC_W18_08_01\]]

==== TC_W18_09[[TC_W18_09]]

. Testcase Description
+
properties : 'MaximumSize'
+
Check properties 'MaximumSize' of Text widget.
+
Test Description
+
Test scope checks the property value of 'MaximumSize'.
Test by changing the value of 'MaximumSize' to maximum screen size (1280x768) and sFLOAT_MIN in
truncation mode and multi-line mode.

. Expected result
+
'MaximumSize' should change the size of the text box.
+
While 'FixedTextBoxSize' set to true; the text should be shown equal to MaximumSize.
+
The text should be shown fully content without truncation in Truncation Sample Text.
The text should be turned invisible in multi-line text.

. Obtained result
+
Property values of 'MaximumSize' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_09_01[[TC_W18_09_01]]

... Testcase Description
+
Test the bindable property 'MaximumSize' by setting width of 'MaximumSize' to 1280;
height to 768 in Truncation text. Set height and width of 'MaximumSize'
to sFLOAT_MIN (1.4012985E-45) in multi-line text. Check if "MaximumSize" was updated to
maximum box size and sFLOAT_MIN via property check. While 'FixedTextBoxSize' default is set to True;
the text should be shown equal to maximum box size. Check if the text is shown fully content
without truncation in Truncation Sample Text and turned invisible in multi-line text. Check via
screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_09_01[[TC_W18_09_01\]]

==== TC_W18_10[[TC_W18_10]]

. Testcase Description
+
property : 'MaximumNumberOfLines'
+
Check properties 'MaximumNumberOfLines' of Text widget.
+
Test Description
+
Test scope checks the property value of 'MaximumNumberOfLines'.
Test by setting the property value to UINT16_MAX and to 3 in Text Widget.

. Expected result
+
The property 'MaximumNumberOfLines' can be set to UINT16_MAX and should control the number
of lines shown in TextBox.

. Obtained result
+
Property values of 'MaximumNumberOfLines' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_10_01[[TC_W18_10_01]]

... Testcase Description
+
Test the bindable property 'MaximumNumberOfLines' by setting 'MaximumNumberOfLines'
to UINT16_MAX(65535) Text Widget. Check if "MaximumNumberOfLines" was updated to
value '65535' as previously set via property check.
Set 'MaximumNumberOfLines' to 3 Text Widget.
Check if the text is shown as 3 lines as set via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_10_01[[TC_W18_10_01\]]

==== TC_W18_11[[TC_W18_11]]

. Testcase Description
+
property : 'WordWrap'
+
Check property 'WordWrap' of Text widget.
+
Test Description
+
Test scope checks the property value of 'WordWrap'. Test in case width of
'MaximumSize' is different from -1.

. Expected result
+
If width of 'MaximumSize' is not -1; 'WordWrap should take effect.
The content must be span into 4 lines.

. Obtained result
+
Property values of 'WordWrap' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_11_01[[TC_W18_11_01]]

... Testcase Description
+
Test the bindable property 'WordWrap' by setting a 1 line text "TextWidget\ Sample\ Rendering\ Text"
to multi-line text Widget (width of 'MaximumSize' is different from -1).
Set 'WordWrap' to False. Check if "WordWrap" was updated to False via property check.
Check if the text is shown as 1 line with truncation via screenshot compare.
Set 'WordWrap' to True in multi-line text Widget. Check if the text is span to 4 lines
via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_11_01[[TC_W18_11_01\]]

==== TC_W18_12[[TC_W18_12]]

. Testcase Description
+
property : 'MultiLineLayouting'
+
Check property 'MultiLineLayouting' of Text widget.
+
Test Description
+
Test scope checks the property value of 'MultiLineLayouting'. Test by setting
'MultiLineLayouting' to false in multi-line text Widget(i.e cmp2DText12_HCenterVCenter)
to disable multi-line configurations. Then; set 'MultiLineLayouting' of cmp2DText12_HCenterVCenter
to true to enable multi-line configurations.

. Expected result
+
The property 'MultiLineLayouting' should provide configuration to make the text show
as multi-line mode. If 'MultiLineLayouting' is set to True; properties 'WordWrap';
'LineSpacingFactor'; 'LineSpacingInPixels' and 'MaximumNumberOfLines' will take effect.
If 'MultiLineLayouting' is set to False; 'WordWrap'; 'LineSpacingFactor';
'LineSpacingInPixels' and 'MaximumNumberOfLines' will take no effect.

. Obtained result
+
Property values of 'MultiLineLayouting' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_12_01[[TC_W18_12_01]]

... Testcase Description
+
Test the bindable property 'MultiLineLayouting' from the widget 'Text'.
The property 'MultiLineLayouting' should provide configuration to make the text show
as multi-line mode. If 'MultiLineLayouting' is set to true; 'WordWrap';
'LineSpacingFactor'; 'LineSpacingInPixels' and 'MaximumNumberOfLines' will take effect.
If 'MultiLineLayouting' is set to false; 'WordWrap'; 'LineSpacingFactor';
'LineSpacingInPixels' and 'MaximumNumberOfLines' will take no effect.
The preconditions are set and checked.
First; set 'MultiLineLayouting' of multi-line text widget to false to disable multi-line
configurations. Then; set 'MultiLineLayouting' to true to enable multi-line configurations.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_12_01[[TC_W18_12_01\]]

==== TC_W18_13[[TC_W18_13]]

. Testcase Description
+
property : 'LineSpacingFactor'
+
Check property 'LineSpacingFactor' of Text widget.
+
Test Description
+
Test scope checks the property value of 'LineSpacingFactor'. Test by changing
the value of 'LineSpacingFactor' to the minimum value(1 Pixel) and to a float
value (i.e 10.5 Pixel).

. Expected result
+
The property 'LineSpacingFactor' should control the distance between lines of
text by Factor. The expected value must be from 0 (minimum) to 1 (maximum).
Else; the text should be run out of the text scene.
+
. Obtained result
+
Property values of 'LineSpacingFactor' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_13_01[[TC_W18_13_01]]

... Testcase Description
+
Test the bindable property 'LineSpacingFactor' by setting 'LineSpacingFactor' to the
Minimum value (0.0). Check if Linespacing was updated to 0 via property check and
screenshot compare. Set 'LineSpacingFactor' to 0.8. Check if 'LineSpacingFactor'
was updated to 0.8 as set. Check via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_13_01[[TC_W18_13_01\]]

==== TC_W18_14[[TC_W18_14]]

. Testcase Description
+
property : 'LineSpacingInPixels'
+
Check property 'LineSpacingInPixels' of Text widget.
+
Test Description
+
Test scope checks the property value of 'LineSpacingInPixels'. Test by changing
the value of 'LineSpacingInPixels' to the minimum value(1 Pixel) and to a
float value (i.e 10.5 Pixel).

. Expected result
+
The property 'LineSpacingInPixels' should control the distance between lines of
text by Pixel. The expected value must be at least 1 pixel.
+
. Obtained result
+
Property values of 'LineSpacingInPixels' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_14_01[[TC_W18_14_01]]
... Widget being tested
+
Test the bindable property 'LineSpacingInPixels' by setting 'LineSpacingInPixels' to
the minimum value(1 Pixel). Check if 'LineSpacingInPixels' was updated to 1.
Check via property check and screenshot compare. Set 'LineSpacingInPixels' to
10.5 Pixel. Check if 'LineSpacingInPixels' value was updated to 10.5 pixel.
Check via property check and screenshot compare
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_14_01[[TC_W18_14_01\]]

==== TC_W18_15[[TC_W18_15]]

. Testcase Description
+
property :  Direction
+
Check property 'Direction' of Text widget.
+
Test Description
+
Test scope checks the property value of 'Direction'. The property should control
the text flow direction depend mode was set. Test by changing the value of 'Direction'
to Left To Right for TextDirection text widget which set 'Direction' default as Right To Left.

. Expected result
+
The property 'Direction' should be updated according to the value set. The text
flow should be turned to Left to Right as set.

. Obtained result
+
Property values of 'Direction' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_15_01[[TC_W18_15_01]]

... Testcase Description
+
Test the bindable property 'Direction' by setting 'Direction' to Left To RightTextDirection Widget.
Check if the value of "Direction" is equal to 1 (Left To Right) via property check.
Check if the text is shown as "Text Direction Example!!" via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_15_01[[TC_W18_15_01\]]

==== TC_W18_16[[TC_W18_16]]

. Testcase Description
+
property :  TruncationDirection
+
Check property 'TruncationDirection' of Text widget.
+
Test Description
+
Test scope checks the property value of 'TruncationDirection'. The property should
control direction of truncation. Test by setting 'TruncationDirection' to 1 (Right) in
LeftTruncation Text Widget (cmp2DText25_LeftSoftTrun). Set 'TruncationDirection' to 0
(Left) in RightTruncation Text Widget(cmp2DText25_RightTextTrunc).

. Expected result
+
The property 'TruncationDirection' should be updated according to the value set.
In LeftTruncation Text Widget; 'TruncationDirection' value should be equal to 1
and text should be shown as 'Left Soft Te'. In RightTruncation Text Widget'TruncationDirection'
value should be equal to 0 and Text should be shown as '..runcation'.

. Obtained result
+
Property values of 'TruncationDirection' are checked through Getproperty in TTFIS.
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_16_01[[TC_W18_16_01]]

... Testcase Description
+
Test the bindable property 'TruncationDirection' by setting 'TruncationDirection' to Right
with LeftTruncation Text Widget(cmp2DText25_LeftSoftTrun). Set 'TruncationDirection' to
Left with RightTruncation Text Widget(cmp2DText25_RightTextTrunc). Check if 'TruncationDirection'
was updated as set via property check and screenshot compare. In LeftTruncation Text Widget;
the value of 'TruncationDirection' should be equal to 1 (Right) and the text should be
shown as 'Left Soft Te'. In RightTruncation Text Widget; the value of 'TruncationDirection'
should be equal to 0 (Left) and the text should be shown as '..runcation'.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_16_01[[TC_W18_16_01\]]

==== TC_W18_17[[TC_W18_17]]

. Testcase Description
+
property : 'VerticalAlignment'
+
Check property 'VerticalAlignment' of Text widget.
+
Test Description
+
Test scope checks the property value of 'VerticalAlignment'.
The property 'VerticalAlignment' should control the text vertical alignment.

. Expected result
+
The value of property 'VerticalAlignment' should be updated
according to the value set. The text alignment should be shown as set.

. Obtained result
+
Property values of 'VerticalAlignment' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_17_01[[TC_W18_17_01]]

... Testcase Description
+
Test the bindable property 'VerticalAlignment' from the widget 'Text'.
Test if the widget can be set to 4 vertical alignment modes: VTop; VCenter; VBottom; VStretch.
Test these modes in single-line and multi-line text widgets.
The preconditions are set and checked.
First; set property 'VerticalAlignment' of single-line text widgets to VBottom and VCenter.
Then; set property 'VerticalAlignment' of multi-line text widgets to VTop and VStretch
to change it's vertical alignment modes.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_17_01[[TC_W18_17_01\]]

==== TC_W18_18[[TC_W18_18]]

. Testcase Description
+
property : 'HorizontalAlignment'
+
Check property 'HorizontalAlignment' of Text widget.
+
Test Description
+
Test scope checks the property value of 'HorizontalAlignment'.
The property 'HorizontalAlignment' should control the text horizontal alignment.

. Expected result
+
The value of property 'HorizontalAlignment' should be updated
according to the value set. The text alignment should be shown as set.

. Obtained result
+
Property values of 'HorizontalAlignment' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W18_18_01[[TC_W18_18_01]]

... Testcase Description
+
Test the bindable property 'HorizontalAlignment' from the widget 'Text'.
Test if the widget can be set to 4 horizontal alignment modes: HTop; HCenter; HBottom; HStretch.
Test these modes in single-line and multi-line text widgets.
The preconditions are set and checked.
First; set property 'HorizontalAlignment' of single-line text widgets to HLeft and HCenter.
Then; set property 'HorizontalAlignment' of multi-line text widgetsto HRight and HStretch
to change it's horizontal alignment modes.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W18_18_01[[TC_W18_18_01\]]


=== TextArea Widget 2D

==== UI Design

The UI designed for TextArea Widget 2D includes thirteen composites marked as the below figure:

- 1: TxtArea_Normal
- 2: TxtArea_Disable
- 3: TxtArea_DynamicText
- 4: TxtArea_LeftHardTrunc
- 5: TxtArea_LeftSoftTrunc
- 6: TxtArea_LeftTextTrunc
- 7: TxtArea_RightSoftTrunc
- 8: TxtArea_ActiveRightTextTrunc
- 9: MulTxtArea_Dynamic
- 10: MulTxtArea_TextTrunc
- 11: MulTxtArea_WrapChar
- 12: MulTxtArea_ActiveSoftTrunc
- 13: MulTxtArea_DisableTextTrunc

image::images/TextAreaScene.png[title="TextArea Scene"]

==== TC_W19_01[[TC_W19_01]]

. Testcase Description
+
property : AlphaValue
+
Check property 'AlphaValue' of TextAreaWidget.
+
Test scope checks the property value of 'AlphaValue'.
+
Test by changing the value of 'AlphaValue' to float value in range of 0 to 1.

. Expected result
+
The property 'AlphaValue' should be updated according to the value set.
+
The text should be shown as transparent (invisible) if it set to 0 (minimum)
and should be shown as fully visible if it set to 1 (maximum).

. Obtained result
+
Property values of 'AlphaValue' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W19_01_01[[TC_W19_01_01]]

... TestCase Description
+
Test the bindable property 'AlphaValue' from the widget 'TextArea'.
Test if the 'AlphaValue' can be set to float value in range of 0 to 1.
The preconditions are set and checked.
Set 'AlphaValue' of TextAreaWidget to minimum (0); maximum(1) value and value in range 0 to 1
to change the transparency of text to invisible; opaque and blurred respectively.
Check the action via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W19_01_01[[TC_W19_01_01\]]

==== TC_W19_02[[TC_W19_02]]

. Testcase Description
+
property : ActiveTextColor
+
Check property 'ActiveTextColor' of TextAreaWidget.
+
Test scope checks the property value of 'ActiveTextColor'.
+
Test by changing the value of 'ActiveTextColor' to different value in
different widget modes to change the widget's color.

. Expected result
+
The property 'ActiveTextColor' should be updated according to the value set.
+
When text widget mode set to Active; the color of the widget should be
updated according to the value set.

. Obtained result
+
Property values of 'ActiveTextColor' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W19_02_01[[TC_W19_02_01]]

... TestCase Description
+
Test the bindable property 'ActiveTextColor' from the widget 'TextArea'.
Test if the color of text can be changed by changing the value of property 'ActiveTextColor'.
The preconditions are set and checked.
Set property 'ActiveTextColor' to different colors in different widget modes to change its color.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W19_02_01[[TC_W19_02_01\]]

==== TC_W19_03[[TC_W19_03]]

. Testcase Description
+
property : DisabledTextColor
+
Check property 'DisabledTextColor' of TextAreaWidget.
+
Test scope checks the property value of 'DisabledTextColor'.
+
Test by changing the value of 'DisabledTextColor' to different value in different
modes to change the widget's color.

. Expected result
+
The property 'DisabledTextColor' should be updated according to the value set.
+
When the text is disabled; the color of the widget should be updated according to the value set.

. Obtained result
+
Property values of 'DisabledTextColor' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W19_03_01[[TC_W19_03_01]]

... TestCase Description
+
Test the bindable property 'DisabledTextColor' from the widget 'TextArea'.
Test if the color of text can be changed by changing the value of property 'DisabledTextColor'.
The preconditions are set and checked.
Set property 'DisabledTextColor' to different colors in different widget modes to change its color.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W19_03_01[[TC_W19_03_01\]]

==== TC_W19_04[[TC_W19_04]]

. Testcase Description
+
property : HighlightMode
+
Check property 'HighlightMode' of TextAreaWidget.
+
Test scope checks the property value of 'HighlightMode'.
+
Test by changing the value of 'HighlightMode' to IndexMode and TextMode.

. Expected result
+
The property 'HighlightMode' should be updated according to the value set.
+
If the 'HighlightMode' set to IndexMode; the input of the highlighting will be included
by a pair of start index plus count set from 'HighlightStartIndex' and 'HighlightCount'.
If the 'HighlightMode' set to TextMode; the input of the highlighting will provide by
a "sub-string" set from property 'HighlighText'.

. Obtained result
+
Property values of 'HighlightMode' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W19_04_01[[TC_W19_04_01]]

... TestCase Description
+
Test the bindable property 'HighlightMode' from the widget 'TextArea'.
Test if the widget can be set to 2 highlight modes: IndexMode and TextMode.
The preconditions are set and checked.
First; change the highlight mode of MulTxtArea_WrapChar; TxtArea_LeftSoftTrunc to TextMode.
Then; change the highlight mode of MulTxtArea_ActiveSoftTrunc; MulTxtArea_DisableTextTrunc to IndexMode.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W19_04_01[[TC_W19_04_01\]]

==== TC_W19_05[[TC_W19_05]]

. Testcase Description
+
property : HighlightTextColor
+
Check property 'HighlightTextColor' of TextAreaWidget.
+
Test scope checks the property value of 'HighlightTextColor'.
+
Test by changing the value of 'HighlightTextColor' to different value in 2 highlight modes
to change the widget's color.

. Expected result
+
The property 'HighlightTextColor' should be updated according to the value set.
+
When the highlight mode is applied; the highlight color of the widget should be
changed according to the value set.

. Obtained result
+
Property values of 'HighlightTextColor' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W19_05_01[[TC_W19_05_01]]

... TestCase Description
+
Test the bindable property 'HighlightTextColor' from the widget 'TextArea'.
Test if the color of text can be changed by changing the value of property 'HighlightTextColor'.
The preconditions are set and checked.
Set property 'HighlightTextColor' to different colors in 2 highlight modes to change its color.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W19_05_01[[TC_W19_05_01\]]

==== TC_W19_06[[TC_W19_06]]

. Testcase Description
+
properties : HighlightStartIndex; HighlightCount
+
Check properties 'HighlightStartIndex'; 'HighlightCount' of TextAreaWidget.
+
Test scope checks the property value of 'HighlightStartIndex'; 'HighlightCount'.
+
Test by changing the value of 'HighlightStartIndex'; 'HighlightCount' to UINT16_MAX
and UINT16_MIN alternately to change its highlighted text.

. Expected result
+
The properties 'HighlightStartIndex'; 'HighlightCount' should be updated according to the value set.
+
While the 'HighlightMode' set to IndexMode; the input of the highlight will be included
by a pair of start index plus count set from 'HighlightStartIndex' and 'HighlightCount'.

. Obtained result
+
Property values of 'HighlightStartIndex'; 'HighlightCount' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W19_06_01[[TC_W19_06_01]]

... TestCase Description
+
Test the bindable properties 'HighlightStartIndex' and 'HighlightCount' from the widget 'TextArea'.
Test if the highlighted text is changed according to the value
of property 'HighlightStartIndex' and 'HighlightCount'.
The preconditions are set and checked.
Set properties 'HighlightStartIndex' and 'HighlightCount' to UINT16_MAX
and UINT16_MIN alternately to change its highlighted text.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W19_06_01[[TC_W19_06_01\]]

==== TC_W19_07[[TC_W19_07]]

. Testcase Description
+
property : HighlightText
+
Check property 'HighlightText' of TextAreaWidget.
+
Test scope checks the property value of 'HighlightText'.
+
Test by changing the value of 'HighlightText' to sub-string match and not match words
in text content to change its highlighted text.

. Expected result
+
The property 'HighlightText' should be updated according to the value set.
+
The highlighted text should be changed base on the sub-string that match in text content.

. Obtained result
+
Property values of 'HighlightText' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W19_07_01[[TC_W19_07_01]]

... TestCase Description
+
Test the bindable property 'HighlightText' from the widget 'TextArea'.
Test if the highlighted text is changed according to the sub-string given by property 'HighlightText'.
The preconditions are set and checked.
First; set property 'HighlightText' to sub-string match words in text content to change its highlighted text.
Test incase 'HighlightMode' was set to TextMode and IndexMode.
Then; set property 'HighlightText' to sub-string that not match words in text
content to see if no highlighted text is shown.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W19_07_01[[TC_W19_07_01\]]


=== TextExtension Widget 2D

==== UI Design

The UI designed for TextExtension Widget 2D with two parts. On the left side; the widget is applied

for Text Widget. On the right side; the widget is apllied for Rich Text.

image::images/TextExtensionScene.png[title="TextExtension Scene"]

==== TC_W89_01[[TC_W89_01]]

. Testcase Description
+
property : Text1 - Text5
+
Check property 'Text1 - Text5' of TextExtensionWidget.
+
Test scope checks the property value of 'Text1 - Text5'.
+
Test by changing the value of 'Text1-Text5' to another content which contain some different aspects.

. Expected result
+
The texts with different methods (TEXTCONCAT; TEXTSWITCH; TEXTARGS) and parent widget (text widget; rich text)
+
should be updated successfully with the new content.

. Obtained result
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W89_01_01[[TC_W89_01_01]]

... TestCase Description
+
Test the bindable property 'Text1 - Text5' from the widget 'TextExtensionWidget2D'.
Test if the text content can be changed dynamically in many extension method and in both text widget and rich text.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set some 'Text[1-5]' with another content.
Check if the text is updated to expected content via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W89_01_01[[TC_W89_01_01\]]

.. TC_W89_01_02[[TC_W89_01_02]]

... TestCase Description
+
Test the bindable property 'Text1 - Text5' and non-bindable property 'ExtensionMethod'
from the widget 'TextExtensionWidget2D'.
Test if the text content of switch mode can be switched to other text properties in both text widget and rich text.
The preconditions are set and checked.
The initial screenshot; content of texts with switch mode will show content of Text1.
Wait a particular time for text to switch to Text2 content.
Check if the text content is Text2 content.
Wait a particular time for the text to switch to Text5 content.
Check if the text content is Text5 content.
Wait a particular time for the text to switch cyclically back to Text1 content.
Check if the text content is Text5 content.
Check these actions via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W89_01_02[[TC_W89_01_02\]]

==== TC_W89_02[[TC_W89_02]]

. Testcase Description
+
property : FormatText
+
Check property 'FormatText' of TextExtensionWidget.
+
Test by changing the value of 'FormatText' to another dynamic content and argument.

. Expected result
+
The texts whose method is TEXTARGS should be updated successfully with the new content.

. Obtained result
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W89_02_01[[TC_W89_02_01]]

... TestCase Description
+
Test the bindable property 'FormatText' from the widget 'TextExtensionWidget2D'.
Test if the text format of text extension argument can changed to other dynamic text.
The preconditions are set and checked.
Set 'FormatText' content with another text which has other arguments.
Check if the text is updated to expected content via screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W89_02_01[[TC_W89_02_01\]]

==== TC_W89_09[[TC_W89_09]]

. Testcase Description
+
property : Visible
+
Check property 'Visible' of TextExtensionWidget.
+
Test scope checks the property value of 'Visible'.
+
Test the bindable property 'Visible' to set the TextExtension Widget to be visible or invisible.

. Expected result
+
The property 'Visible' should be updated according to the value set.
+
The widget should be visible when setting 'Visible' to true and invisible when setting 'Visible' to false.

. Obtained result
+
Property values of 'Visible' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W89_09_01[[TC_W89_09_01]]

... TestCase Description
+
Test the bindable property 'Visible' from the widget 'TextExtensionWidget2D'.
Test if the text is invisible when 'Visible' is set to false.
The preconditions are set and checked.
First; set 'Visible' to false to make the widget invisible.
Then; set 'Visible' to true to make the widget visible again.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W89_09_01[[TC_W89_09_01\]]


=== ViewSwitch Widget 2D

==== UI Design

The UI designed for ViewSwitch Widget 2D includes one main view; a scene group (scenegroup1) including 3 views
(Scene2D_1; Scene2D_2; Scene2D_3) and another scene group (scenegroup2) including 2 views (Scene2D_4; Scene2D_5)
marked respectively as the below figures:

image::images/ViewSwitch_MainView.png[title="MainView: ViewSwitch";400]
image::images/ViewSwitch_SubScene1.png[title="Scenegroup1: Scene 1";400]
image::images/ViewSwitch_SubScene2.png[title="Scenegroup1: Scene 2";400]
image::images/ViewSwitch_SubScene3.png[title="Scenegroup1: Scene 3";400]
image::images/ViewSwitch_SubScene4.png[title="Scenegroup2: Scene 4";400]
image::images/ViewSwitch_SubScene5.png[title="Scenegroup2: Scene 5";400]


==== TC_W95_01[[TC_W95_01]]

. Testcase Description
+
property : Index
+
Check property 'Index' of ViewSwitchWidget.
+
Test scope checks the property value of 'Index'.
+
Test by changing the value of 'Index' to toggle between several alternative views (subviews).

. Expected result
+
The property 'Index' should be updated according to the value set.
+
It should be possible to show the MainView only by using an outbound value for the 'Index'.
It should be possible to show both the MainView and one subview contemporaneously by using an inbound value for the 'Index'.

. Obtained result
+
Property values of 'Index' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W95_01_01[[TC_W95_01_01]]

... TestCase Description
+
Test the bindable property 'Index' from the widget ViewSwitchWidget2D.
Test 'Index' of all scenes of each scenegroup to be made visible.
The preconditions are set and checked.
Check the initial state with a screenshot compare.
Set 'Index' to outbound and inbound values.
Check these actions via property check and screenshot compare.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W95_01_01[[TC_W95_01_01\]]

==== TC_W95_02[[TC_W95_02]]

. Testcase Description
+
property : ViewPrefix
+
Check property 'ViewPrefix' of ViewSwitchWidget.
+
Test scope checks the property value of 'ViewPrefix'.
+
Test by changing the value of 'ViewPrefix' to switch between several alternative views
from different scenegroups with corresponding Index and ViewId values.

. Expected result
+
The property 'ViewPrefix' should be updated according to the value set.
+
The scene according to the ViewPrefix; ViewId; and Index values will be loaded and activated (visible).
If not; only the main view is visible.

. Obtained result
+
Property values of 'ViewPrefix' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W95_02_01[[TC_W95_02_01]]

... TestCase Description
+
Test the bindable property 'ViewPrefix' from the widget 'ViewSwitchWidget2D'.
The property 'ViewPrefix' allows this Widget to switch between several alternative views
from different scenegroups
with corresponding Index and ViewId values.
The preconditions are set and checked.
Set 'ViewPrefix' to a name (string) to be able to switch between different scenegroups.
Check if the property 'ViewPrefix' has been set to the expected value and if scenes with
the corresponding Index
and ViewId are visible/ invisible.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W95_02_01[[TC_W95_02_01\]]

==== TC_W95_03[[TC_W95_03]]

. Testcase Description
+
property : ViewIds
+
Check property 'ViewIds' of ViewSwitchWidget.
+
Test scope checks the property value of 'ViewIds'.
+
Test by changing the value of 'ViewIds' to switch between several alternative views
from different scenegroups with corresponding Index and ViewPrefix values.

. Expected result
+
The property 'ViewIds' should be updated according to the value set.
+
The scene according to the ViewId; ViewPrefix; and Index values will be loaded and activated (visible).
If not; only the main view is visible.

. Obtained result
+
Property values of 'ViewIds' are checked through Getproperty in TTFIS.
+
Bitmap comparison is also done.

. Related Test cases

.. TC_W95_03_01[[TC_W95_03_01]]

... TestCase Description
+
Test the bindable property 'ViewIds' from the widget 'ViewSwitchWidget2D'.
The 'ViewIds' allow this Widget to switch between several alternative views in a
scenegroup with corresponding Index values.
The preconditions are set and checked.
Set 'ViewIds' to a string array registering scenes for scenegroups.
Check if property 'ViewIds' has been set to the expected value and if scenes with the
corresponding Index are visible/ invisible.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W95_03_01[[TC_W95_03_01\]]

==== TC_W95_04[[TC_W95_04]]

. Testcase Description
+
property : CacheViews
+
Check property 'CacheViews' of ViewSwitchWidget.
+
Test scope checks the property value of 'CacheViews'.
+
Test by changing the value of 'CacheViews' to manage the load/unload and activate/deactivate of some views
which are considered as children of the widget's parent view.

. Expected result
+
The property 'CacheViews' should be updated according to the value set.
+
It should be possible to configure if the hidden views are destroyed or if they remain in memory (are cached).

. Obtained result
+
Property values of 'CacheViews' are checked through Getproperty in TTFIS.

. Related Test cases

.. TC_W95_04_01[[TC_W95_04_01]]

... TestCase Description
+
Test the bindable property 'CacheViews' from the widget 'ViewSwitchWidget2D'.
We need to test CacheViews if the property incorporates with Index property because
CacheViews only affects the previous view.
("previous view" means the view before making an action to switch to another view).
If set CacheView's value of the previous view to true then that view will be deactivated
else it will be unloaded whenever switching to another view.
The preconditions are set and checked.
Set property of 'Index' to switch to one of the visible scenes in scenegroup1.
Then set property 'CacheViews' to true or false for array elements to deactivate (or
unload) the previous scene.
Set property of 'Index' to switch to another scene in scenegroup1.
Check if property 'ViewCacheViews' has been set to the expected value; and check messages
displayed on TTFis based on set CacheViews values.
+
link:https://rbcm-jen-hmib.hi.de.bosch.com:8443/userContent/nightly_builds/nb_w_cmdgen3_featuretrace_analyse/FeatureTrace.html#TC_W95_04_01[[TC_W95_04_01\]]



